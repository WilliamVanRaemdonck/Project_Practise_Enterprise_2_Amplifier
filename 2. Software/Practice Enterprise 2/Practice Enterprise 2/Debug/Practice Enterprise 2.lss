
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000120d  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b0c  00000000  00000000  000015f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e8  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  000029e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ba  00000000  00000000  00002bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000501  00000000  00000000  00003166  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	d9 d0       	rcall	.+434    	; 0x1f4 <main>
  42:	f1 c0       	rjmp	.+482    	; 0x226 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <writeToDisplay>:
	_delay_us(50);
	clearEnable();
}

void setRS(void){
	PORTC |= 0b01000000;
  46:	08 95       	ret

00000048 <clearRS>:
}

void clearRS(void){
	PORTC &= 0b10111111;
  48:	8a b1       	in	r24, 0x0a	; 10
  4a:	8f 7b       	andi	r24, 0xBF	; 191
  4c:	8a b9       	out	0x0a, r24	; 10
  4e:	08 95       	ret

00000050 <setEnable>:
}

void setEnable(void){
	PORTC |= 0b10000000;
  50:	8a b1       	in	r24, 0x0a	; 10
  52:	80 68       	ori	r24, 0x80	; 128
  54:	8a b9       	out	0x0a, r24	; 10
  56:	08 95       	ret

00000058 <clearEnable>:
}

void clearEnable(void){
	PORTC &= 0b01111111;
  58:	8a b1       	in	r24, 0x0a	; 10
  5a:	8f 77       	andi	r24, 0x7F	; 127
  5c:	8a b9       	out	0x0a, r24	; 10
  5e:	08 95       	ret

00000060 <sendNibble>:

void writeToDisplay(uint8_t data){	
	
}

void sendNibble(uint8_t data){
  60:	cf 93       	push	r28
  62:	c8 2f       	mov	r28, r24
	setEnable();
  64:	f5 df       	rcall	.-22     	; 0x50 <setEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	80 e1       	ldi	r24, 0x10	; 16
  68:	8a 95       	dec	r24
  6a:	f1 f7       	brne	.-4      	; 0x68 <sendNibble+0x8>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <sendNibble+0xe>
	_delay_us(50);
	PORTA = data;
  6e:	c2 b9       	out	0x02, r28	; 2
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	8a 95       	dec	r24
  74:	f1 f7       	brne	.-4      	; 0x72 <sendNibble+0x12>
  76:	00 c0       	rjmp	.+0      	; 0x78 <sendNibble+0x18>
	_delay_us(50);
	clearEnable();
  78:	ef df       	rcall	.-34     	; 0x58 <clearEnable>
}
  7a:	cf 91       	pop	r28
  7c:	08 95       	ret

0000007e <initDisplay>:
*/

#include "../main.h"
#include "Display.h"

void initDisplay(void){
  7e:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	83 ed       	ldi	r24, 0xD3	; 211
  82:	90 e3       	ldi	r25, 0x30	; 48
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <initDisplay+0x6>
  88:	00 c0       	rjmp	.+0      	; 0x8a <initDisplay+0xc>
  8a:	00 00       	nop
	//power on delay
	_delay_ms(50);
	//set to 0
	clearRS();
  8c:	dd df       	rcall	.-70     	; 0x48 <clearRS>
	clearEnable();
  8e:	e4 df       	rcall	.-56     	; 0x58 <clearEnable>
	sendNibble(0xff);
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	e6 df       	rcall	.-52     	; 0x60 <sendNibble>
	
	//send function set times
	clearRS();
  94:	d9 df       	rcall	.-78     	; 0x48 <clearRS>
	clearEnable();
  96:	e0 df       	rcall	.-64     	; 0x58 <clearEnable>
	sendNibble(0b11001111);//Function set 
  98:	8f ec       	ldi	r24, 0xCF	; 207
  9a:	e2 df       	rcall	.-60     	; 0x60 <sendNibble>
	
	//send function set 2 times
	for(uint8_t functionCounter = 0; functionCounter < 2; functionCounter++){
  9c:	c0 e0       	ldi	r28, 0x00	; 0
  9e:	05 c0       	rjmp	.+10     	; 0xaa <initDisplay+0x2c>
		sendNibble(0b11011111);//Function set 
  a0:	8f ed       	ldi	r24, 0xDF	; 223
  a2:	de df       	rcall	.-68     	; 0x60 <sendNibble>
		sendNibble(0b10111111);//Function set 
  a4:	8f eb       	ldi	r24, 0xBF	; 191
  a6:	dc df       	rcall	.-72     	; 0x60 <sendNibble>
	clearRS();
	clearEnable();
	sendNibble(0b11001111);//Function set 
	
	//send function set 2 times
	for(uint8_t functionCounter = 0; functionCounter < 2; functionCounter++){
  a8:	cf 5f       	subi	r28, 0xFF	; 255
  aa:	c2 30       	cpi	r28, 0x02	; 2
  ac:	c8 f3       	brcs	.-14     	; 0xa0 <initDisplay+0x22>
		sendNibble(0b11011111);//Function set 
		sendNibble(0b10111111);//Function set 
	}
	
	sendNibble(0b11111111);//display on/off
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	d7 df       	rcall	.-82     	; 0x60 <sendNibble>
	sendNibble(0b01111111);
  b2:	8f e7       	ldi	r24, 0x7F	; 127
  b4:	d5 df       	rcall	.-86     	; 0x60 <sendNibble>
	
	sendNibble(0b11111111);//display clear
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	d3 df       	rcall	.-90     	; 0x60 <sendNibble>
	sendNibble(0b11101111);
  ba:	8f ee       	ldi	r24, 0xEF	; 239
  bc:	d1 df       	rcall	.-94     	; 0x60 <sendNibble>
	
	sendNibble(0b11111111);//Entry mode set
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	cf df       	rcall	.-98     	; 0x60 <sendNibble>
	sendNibble(0b10011111);
  c2:	8f e9       	ldi	r24, 0x9F	; 159
  c4:	cd df       	rcall	.-102    	; 0x60 <sendNibble>
}
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <clkLow>:
	clkHigh();
	_delay_us(I2CSpeed);
}

void clkLow(void){
	PORTB &= 0b10111111;
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	86 b9       	out	0x06, r24	; 6
  d0:	08 95       	ret

000000d2 <clkHigh>:
}

void clkHigh(void){
	PORTB |= 0b01000000;
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	86 b9       	out	0x06, r24	; 6
  d8:	08 95       	ret

000000da <sdaLow>:
}

void sdaLow(void){
	PORTB &= 0b01111111;
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	86 b9       	out	0x06, r24	; 6
  e0:	08 95       	ret

000000e2 <sdaHigh>:
}

void sdaHigh(void){
	PORTB |= 0b10000000;
  e2:	86 b1       	in	r24, 0x06	; 6
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	86 b9       	out	0x06, r24	; 6
  e8:	08 95       	ret

000000ea <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
  ea:	fb df       	rcall	.-10     	; 0xe2 <sdaHigh>
	clkHigh();
  ec:	f2 df       	rcall	.-28     	; 0xd2 <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	81 e1       	ldi	r24, 0x11	; 17
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <initI2C+0x6>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	d8 2f       	mov	r29, r24
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//start condition
	sdaLow();
  fe:	ed df       	rcall	.-38     	; 0xda <sdaLow>
 100:	81 e1       	ldi	r24, 0x11	; 17
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
 106:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 108:	e0 df       	rcall	.-64     	; 0xca <clkLow>
 10a:	81 e1       	ldi	r24, 0x11	; 17
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
 110:	00 00       	nop
	_delay_us(I2CSpeed);
	
	//send input
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	11 c0       	rjmp	.+34     	; 0x138 <__EEPROM_REGION_LENGTH__+0x38>
		result = shift & mask;
		if(result == 0x01){
 116:	d0 ff       	sbrs	r29, 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
			sdaHigh();
 11a:	e3 df       	rcall	.-58     	; 0xe2 <sdaHigh>
 11c:	01 c0       	rjmp	.+2      	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
		}
		else{
			sdaLow();
 11e:	dd df       	rcall	.-70     	; 0xda <sdaLow>
		}
		clkHigh();
 120:	d8 df       	rcall	.-80     	; 0xd2 <clkHigh>
 122:	81 e1       	ldi	r24, 0x11	; 17
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
 128:	00 00       	nop
		_delay_us(I2CSpeed);
		clkLow();
 12a:	cf df       	rcall	.-98     	; 0xca <clkLow>
 12c:	81 e1       	ldi	r24, 0x11	; 17
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
 132:	00 00       	nop
		_delay_us(I2CSpeed);
		shift = (shift >> 1);	//shift right by one
 134:	d6 95       	lsr	r29
	clkLow();
	_delay_us(I2CSpeed);
	
	//send input
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
 136:	cf 5f       	subi	r28, 0xFF	; 255
 138:	c8 30       	cpi	r28, 0x08	; 8
 13a:	68 f3       	brcs	.-38     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
		clkLow();
		_delay_us(I2CSpeed);
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaLow();
 13c:	ce df       	rcall	.-100    	; 0xda <sdaLow>
	
	clkHigh();
 13e:	c9 df       	rcall	.-110    	; 0xd2 <clkHigh>
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
 146:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 148:	c0 df       	rcall	.-128    	; 0xca <clkLow>
 14a:	81 e1       	ldi	r24, 0x11	; 17
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>
 150:	00 00       	nop
	_delay_us(I2CSpeed);
	
	sdaHigh();
 152:	c7 df       	rcall	.-114    	; 0xe2 <sdaHigh>
 154:	81 e1       	ldi	r24, 0x11	; 17
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
 15a:	00 00       	nop
	_delay_us(I2CSpeed);
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <finishCom>:

void finishCom(){
	// finish communication
	sdaHigh();
 162:	bf df       	rcall	.-130    	; 0xe2 <sdaHigh>
	clkHigh();
 164:	b6 df       	rcall	.-148    	; 0xd2 <clkHigh>
 166:	81 e1       	ldi	r24, 0x11	; 17
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <finishCom+0x6>
 16c:	00 00       	nop
 16e:	08 95       	ret

00000170 <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	d6 2f       	mov	r29, r22
 176:	c4 2f       	mov	r28, r20
	sendI2C(chipAddress);
 178:	bf df       	rcall	.-130    	; 0xf8 <sendI2C>
	sendI2C(subAddress);
 17a:	8d 2f       	mov	r24, r29
 17c:	bd df       	rcall	.-134    	; 0xf8 <sendI2C>
	sendI2C(data);
 17e:	8c 2f       	mov	r24, r28
 180:	bb df       	rcall	.-138    	; 0xf8 <sendI2C>
	finishCom();
 182:	ef df       	rcall	.-34     	; 0x162 <finishCom>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0xff;		//output
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;		//Set pull ups
 18e:	83 b9       	out	0x03, r24	; 3
	PORTA = 0x00;		//write zero
 190:	12 b8       	out	0x02, r1	; 2
	
	//PORT B
	DDRB = 0b11000000;	//output
 192:	90 ec       	ldi	r25, 0xC0	; 192
 194:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 196:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b00000000;	//write zero
 198:	16 b8       	out	0x06, r1	; 6
	
	//PORT C
	DDRC = 0b11000000;	//output
 19a:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 19c:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b00000000;	//write zero
 19e:	1a b8       	out	0x0a, r1	; 10
 1a0:	08 95       	ret

000001a2 <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving of
 1a2:	e4 e6       	ldi	r30, 0x64	; 100
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 1b6:	ad e7       	ldi	r26, 0x7D	; 125
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	8c 91       	ld	r24, X
 1bc:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 1be:	80 81       	ld	r24, Z
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 1c4:	eb e7       	ldi	r30, 0x7B	; 123
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA	|= ADCReadPin;		
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	89 2b       	or	r24, r25
 1d8:	80 83       	st	Z, r24
	ADMUXB	&= 0b11111110;		
 1da:	ed e7       	ldi	r30, 0x7D	; 125
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	80 83       	st	Z, r24
	ADCSRA	|= 0b01000000;		//ADSC on
 1e4:	ea e7       	ldi	r30, 0x7A	; 122
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 83       	st	Z, r24
	return ADCH;
 1ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 1f2:	08 95       	ret

000001f4 <main>:
#include "Display/Display.h"

int main(void)
{
	//IO
	initIO();
 1f4:	ca df       	rcall	.-108    	; 0x18a <initIO>
	
	//ADC
	initADC();
 1f6:	d5 df       	rcall	.-86     	; 0x1a2 <initADC>
	
	//I2C
	initI2C();
 1f8:	78 df       	rcall	.-272    	; 0xea <initI2C>
	
	//display
	initDisplay();
 1fa:	41 df       	rcall	.-382    	; 0x7e <initDisplay>
	uint8_t treble = 0x00;
	
    while (1) 
    {
		//read inputs
		gain = ReadADCPinValue(0b00001000);		//PB0
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	e8 df       	rcall	.-48     	; 0x1d0 <ReadADCPinValue>
		bass = ReadADCPinValue(0b00001011);		//PB3
 200:	8b e0       	ldi	r24, 0x0B	; 11
 202:	e6 df       	rcall	.-52     	; 0x1d0 <ReadADCPinValue>
		midRange = ReadADCPinValue(0b00001100);	//PB4
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	e4 df       	rcall	.-56     	; 0x1d0 <ReadADCPinValue>
		treble = ReadADCPinValue(0b00001101);	//PB5
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	e2 df       	rcall	.-60     	; 0x1d0 <ReadADCPinValue>
		
		//Volume -> rotary encoder
		
		//TDA update
		//debug
		setTDAValue(0b10000000, 0b00000000, 0b00000000);
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	ae df       	rcall	.-164    	; 0x170 <setTDAValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	83 ec       	ldi	r24, 0xC3	; 195
 216:	99 e0       	ldi	r25, 0x09	; 9
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <__DATA_REGION_LENGTH__+0x18>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
 21e:	00 00       	nop
		setTDAValue(CHIP_ADDRESS, SubAdr_Bass_gain, bass);
		setTDAValue(CHIP_ADDRESS, SubAdr_Mid_range_gain, midRange);
		setTDAValue(CHIP_ADDRESS, SubAdr_Treble_gain, treble);		
		*/
		//Display update -> parallel
		writeToDisplay(0b11001111);
 220:	8f ec       	ldi	r24, 0xCF	; 207
 222:	11 df       	rcall	.-478    	; 0x46 <writeToDisplay>
 224:	eb cf       	rjmp	.-42     	; 0x1fc <main+0x8>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
