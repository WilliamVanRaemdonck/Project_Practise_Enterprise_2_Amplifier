
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b8  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a1f  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b9  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000028f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000590  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000644  00000000  00000000  00003024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	af d0       	rcall	.+350    	; 0x1a0 <main>
  42:	bb c0       	rjmp	.+374    	; 0x1ba <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <clearRS>:
void setRS(void){
	PORTC |= 0b01000000;
}

void clearRS(void){
	PORTC &= 0b10111111;
  46:	8a b1       	in	r24, 0x0a	; 10
  48:	8f 7b       	andi	r24, 0xBF	; 191
  4a:	8a b9       	out	0x0a, r24	; 10
  4c:	08 95       	ret

0000004e <setEnable>:
}

void setEnable(void){
	
	PORTC |= 0b10000000;
  4e:	8a b1       	in	r24, 0x0a	; 10
  50:	80 68       	ori	r24, 0x80	; 128
  52:	8a b9       	out	0x0a, r24	; 10
  54:	08 95       	ret

00000056 <clearEnable>:
}

void clearEnable(void){
	PORTC &= 0b01111111;
  56:	8a b1       	in	r24, 0x0a	; 10
  58:	8f 77       	andi	r24, 0x7F	; 127
  5a:	8a b9       	out	0x0a, r24	; 10
  5c:	08 95       	ret

0000005e <initDisplay>:
*/

#include "../main.h"
#include "Display.h"

void initDisplay(void){
  5e:	cf 93       	push	r28
	//Step 0
	clearEnable();
  60:	fa df       	rcall	.-12     	; 0x56 <clearEnable>
	clearRS();
  62:	f1 df       	rcall	.-30     	; 0x46 <clearRS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	85 ea       	ldi	r24, 0xA5	; 165
  66:	9e e0       	ldi	r25, 0x0E	; 14
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <initDisplay+0xa>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <initDisplay+0x10>
  6e:	00 00       	nop
	_delay_ms(15);
	
	//step 1
	setEnable();
  70:	ee df       	rcall	.-36     	; 0x4e <setEnable>
	PORTA = 0b11001111;
  72:	cf ec       	ldi	r28, 0xCF	; 207
  74:	c2 b9       	out	0x02, r28	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	91 e2       	ldi	r25, 0x21	; 33
  78:	9a 95       	dec	r25
  7a:	f1 f7       	brne	.-4      	; 0x78 <initDisplay+0x1a>
  7c:	00 00       	nop
	_delay_us(100);
	clearEnable();
  7e:	eb df       	rcall	.-42     	; 0x56 <clearEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	81 ee       	ldi	r24, 0xE1	; 225
  82:	94 e0       	ldi	r25, 0x04	; 4
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <initDisplay+0x26>
  88:	00 c0       	rjmp	.+0      	; 0x8a <initDisplay+0x2c>
  8a:	00 00       	nop
	
	_delay_ms(5); //>4.1ms
	
	
	//step 2
	setEnable();
  8c:	e0 df       	rcall	.-64     	; 0x4e <setEnable>
	PORTA = 0b11001111;
  8e:	c2 b9       	out	0x02, r28	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	91 e2       	ldi	r25, 0x21	; 33
  92:	9a 95       	dec	r25
  94:	f1 f7       	brne	.-4      	; 0x92 <initDisplay+0x34>
  96:	00 00       	nop
	_delay_us(100);
	clearEnable();
  98:	de df       	rcall	.-68     	; 0x56 <clearEnable>
  9a:	22 e3       	ldi	r18, 0x32	; 50
  9c:	2a 95       	dec	r18
  9e:	f1 f7       	brne	.-4      	; 0x9c <initDisplay+0x3e>
	
	_delay_us(150); //> 100us
	

	//step 3
	setEnable();
  a0:	d6 df       	rcall	.-84     	; 0x4e <setEnable>
	PORTA = 0b11001111;
  a2:	c2 b9       	out	0x02, r28	; 2
  a4:	81 e2       	ldi	r24, 0x21	; 33
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <initDisplay+0x48>
  aa:	00 00       	nop
	_delay_us(100);
	clearEnable();
  ac:	d4 df       	rcall	.-88     	; 0x56 <clearEnable>
  ae:	92 e3       	ldi	r25, 0x32	; 50
  b0:	9a 95       	dec	r25
  b2:	f1 f7       	brne	.-4      	; 0xb0 <initDisplay+0x52>
	
	_delay_us(150); //> 100us
	
	
	//step 4
	setEnable();
  b4:	cc df       	rcall	.-104    	; 0x4e <setEnable>
	PORTA = 0b11000111;	//function set
  b6:	87 ec       	ldi	r24, 0xC7	; 199
  b8:	82 b9       	out	0x02, r24	; 2
  ba:	21 e2       	ldi	r18, 0x21	; 33
  bc:	2a 95       	dec	r18
  be:	f1 f7       	brne	.-4      	; 0xbc <initDisplay+0x5e>
  c0:	00 00       	nop
	_delay_us(100);
	clearEnable();
  c2:	c9 df       	rcall	.-110    	; 0x56 <clearEnable>

	setEnable();
  c4:	c4 df       	rcall	.-120    	; 0x4e <setEnable>
	PORTA = 0b11110111;	//display off
  c6:	87 ef       	ldi	r24, 0xF7	; 247
  c8:	82 b9       	out	0x02, r24	; 2
  ca:	81 e2       	ldi	r24, 0x21	; 33
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <initDisplay+0x6e>
  d0:	00 00       	nop
	_delay_us(100);
	clearEnable();
  d2:	c1 df       	rcall	.-126    	; 0x56 <clearEnable>

	setEnable();
  d4:	bc df       	rcall	.-136    	; 0x4e <setEnable>
	PORTA = 0b11111110;	//display clear
  d6:	8e ef       	ldi	r24, 0xFE	; 254
  d8:	82 b9       	out	0x02, r24	; 2
  da:	91 e2       	ldi	r25, 0x21	; 33
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <initDisplay+0x7e>
  e0:	00 00       	nop
	_delay_us(100);
	clearEnable();
  e2:	b9 df       	rcall	.-142    	; 0x56 <clearEnable>

	setEnable();
  e4:	b4 df       	rcall	.-152    	; 0x4e <setEnable>
	PORTA = 0b11111000;	//entry mode set
  e6:	88 ef       	ldi	r24, 0xF8	; 248
  e8:	82 b9       	out	0x02, r24	; 2
  ea:	21 e2       	ldi	r18, 0x21	; 33
  ec:	2a 95       	dec	r18
  ee:	f1 f7       	brne	.-4      	; 0xec <initDisplay+0x8e>
  f0:	00 00       	nop
	_delay_us(100);
	clearEnable();
  f2:	b1 df       	rcall	.-158    	; 0x56 <clearEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	92 e4       	ldi	r25, 0x42	; 66
  f8:	2f e0       	ldi	r18, 0x0F	; 15
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <initDisplay+0x9c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 104:	00 00       	nop



	_delay_ms(5000);
	//of the books
	setEnable();
 106:	a3 df       	rcall	.-186    	; 0x4e <setEnable>
	PORTA = 0b11110000;	//display on
 108:	80 ef       	ldi	r24, 0xF0	; 240
 10a:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
	_delay_us(150);
	clearEnable();
 112:	a1 df       	rcall	.-190    	; 0x56 <clearEnable>
}
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <clkHigh>:
static void clkHigh(void){
	PORTB |= 0b01000000;
}

static void sdaLow(void){
	PORTB &= 0b01111111;
 118:	86 b1       	in	r24, 0x06	; 6
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	86 b9       	out	0x06, r24	; 6
 11e:	08 95       	ret

00000120 <sdaHigh>:
}

static void sdaHigh(void){
	PORTB |= 0b10000000;
 120:	86 b1       	in	r24, 0x06	; 6
 122:	80 68       	ori	r24, 0x80	; 128
 124:	86 b9       	out	0x06, r24	; 6
 126:	08 95       	ret

00000128 <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
 128:	fb df       	rcall	.-10     	; 0x120 <sdaHigh>
	clkHigh();
 12a:	f6 df       	rcall	.-20     	; 0x118 <clkHigh>
 12c:	81 e1       	ldi	r24, 0x11	; 17
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <initI2C+0x6>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0xff;		//output
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;		//Set pull ups
 13a:	83 b9       	out	0x03, r24	; 3
	PORTA = 0xff;		//write zero
 13c:	82 b9       	out	0x02, r24	; 2
	
	//PORT B
	DDRB = 0b11000000;	//output
 13e:	90 ec       	ldi	r25, 0xC0	; 192
 140:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 142:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b11000000;	//write zero
 144:	96 b9       	out	0x06, r25	; 6
	
	//PORT C
	DDRC = 0b11000000;	//output
 146:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 148:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b11000000;	//write zero
 14a:	9a b9       	out	0x0a, r25	; 10
 14c:	08 95       	ret

0000014e <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving of
 14e:	e4 e6       	ldi	r30, 0x64	; 100
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 162:	ad e7       	ldi	r26, 0x7D	; 125
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	8c 91       	ld	r24, X
 168:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 16a:	80 81       	ld	r24, Z
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 170:	eb e7       	ldi	r30, 0x7B	; 123
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 60       	ori	r24, 0x08	; 8
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret

0000017c <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA	|= ADCReadPin;		
 17c:	ec e7       	ldi	r30, 0x7C	; 124
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	89 2b       	or	r24, r25
 184:	80 83       	st	Z, r24
	ADMUXB	&= 0b11111110;		
 186:	ed e7       	ldi	r30, 0x7D	; 125
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	80 83       	st	Z, r24
	ADCSRA	|= 0b01000000;		//ADSC on
 190:	ea e7       	ldi	r30, 0x7A	; 122
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 64       	ori	r24, 0x40	; 64
 198:	80 83       	st	Z, r24
	return ADCH;
 19a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 19e:	08 95       	ret

000001a0 <main>:
#include "Display/Display.h"

int main(void)
{
	//IO
	initIO();
 1a0:	ca df       	rcall	.-108    	; 0x136 <initIO>
	
	//ADC
	initADC();
 1a2:	d5 df       	rcall	.-86     	; 0x14e <initADC>
	
	//I2C
	initI2C();
 1a4:	c1 df       	rcall	.-126    	; 0x128 <initI2C>
	
	//display
	initDisplay();
 1a6:	5b df       	rcall	.-330    	; 0x5e <initDisplay>
	uint8_t treble = 0x00;
	
    while (1) 
    {
		//read inputs
		gain = ReadADCPinValue(0b00001000);		//PB0
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	e8 df       	rcall	.-48     	; 0x17c <ReadADCPinValue>
		bass = ReadADCPinValue(0b00001011);		//PB3
 1ac:	8b e0       	ldi	r24, 0x0B	; 11
 1ae:	e6 df       	rcall	.-52     	; 0x17c <ReadADCPinValue>
		midRange = ReadADCPinValue(0b00001100);	//PB4
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	e4 df       	rcall	.-56     	; 0x17c <ReadADCPinValue>
		treble = ReadADCPinValue(0b00001101);	//PB5
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	e2 df       	rcall	.-60     	; 0x17c <ReadADCPinValue>
 1b8:	f7 cf       	rjmp	.-18     	; 0x1a8 <main+0x8>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
