
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000130a  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa5  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000091d  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00002ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a7  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000625  00000000  00000000  0000322f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	f7 d0       	rcall	.+494    	; 0x230 <main>
  42:	10 c1       	rjmp	.+544    	; 0x264 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <clearRS>:
void setRS(void){
	PORTC |= 0b01000000;
}

void clearRS(void){
	PORTC &= 0b10111111;
  46:	8a b1       	in	r24, 0x0a	; 10
  48:	8f 7b       	andi	r24, 0xBF	; 191
  4a:	8a b9       	out	0x0a, r24	; 10
  4c:	08 95       	ret

0000004e <setEnable>:
}

void setEnable(void){
	
	PORTC |= 0b10000000;
  4e:	8a b1       	in	r24, 0x0a	; 10
  50:	80 68       	ori	r24, 0x80	; 128
  52:	8a b9       	out	0x0a, r24	; 10
  54:	08 95       	ret

00000056 <clearEnable>:
}

void clearEnable(void){
	PORTC &= 0b01111111;
  56:	8a b1       	in	r24, 0x0a	; 10
  58:	8f 77       	andi	r24, 0x7F	; 127
  5a:	8a b9       	out	0x0a, r24	; 10
  5c:	08 95       	ret

0000005e <initDisplay>:
#include "Display.h"

//from https://www.farnell.com/datasheets/50586.pdf
void initDisplay(void){
	//Step 0
	clearEnable();
  5e:	fb df       	rcall	.-10     	; 0x56 <clearEnable>
	clearRS();
  60:	f2 df       	rcall	.-28     	; 0x46 <clearRS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	85 ea       	ldi	r24, 0xA5	; 165
  64:	9e e0       	ldi	r25, 0x0E	; 14
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <initDisplay+0x8>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <initDisplay+0xe>
  6c:	00 00       	nop
	_delay_ms(15);
	
	setEnable();
  6e:	ef df       	rcall	.-34     	; 0x4e <setEnable>
	PORTA = Function_set;
  70:	87 ec       	ldi	r24, 0xC7	; 199
  72:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	90 e1       	ldi	r25, 0x10	; 16
  76:	9a 95       	dec	r25
  78:	f1 f7       	brne	.-4      	; 0x76 <initDisplay+0x18>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <initDisplay+0x1e>
	_delay_us(50);	//>37us
	clearEnable();
  7c:	ec df       	rcall	.-40     	; 0x56 <clearEnable>
	
	setEnable();
  7e:	e7 df       	rcall	.-50     	; 0x4e <setEnable>
	PORTA = Display_OFF;
  80:	84 ef       	ldi	r24, 0xF4	; 244
  82:	82 b9       	out	0x02, r24	; 2
  84:	80 e1       	ldi	r24, 0x10	; 16
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <initDisplay+0x28>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <initDisplay+0x2e>
	_delay_us(50);	//>37us
	clearEnable();
  8c:	e4 df       	rcall	.-56     	; 0x56 <clearEnable>
	
	setEnable();
  8e:	df df       	rcall	.-66     	; 0x4e <setEnable>
	PORTA = Display_ON;
  90:	80 ef       	ldi	r24, 0xF0	; 240
  92:	82 b9       	out	0x02, r24	; 2
  94:	90 e1       	ldi	r25, 0x10	; 16
  96:	9a 95       	dec	r25
  98:	f1 f7       	brne	.-4      	; 0x96 <initDisplay+0x38>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <initDisplay+0x3e>
	_delay_us(50);	//>37us
	clearEnable();
  9c:	dc df       	rcall	.-72     	; 0x56 <clearEnable>
	
	setEnable();
  9e:	d7 df       	rcall	.-82     	; 0x4e <setEnable>
	PORTA = Clear_Display;
  a0:	8e ef       	ldi	r24, 0xFE	; 254
  a2:	82 b9       	out	0x02, r24	; 2
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <initDisplay+0x48>
  aa:	00 c0       	rjmp	.+0      	; 0xac <initDisplay+0x4e>
	_delay_us(50);	//>37us
	clearEnable();
  ac:	d4 df       	rcall	.-88     	; 0x56 <clearEnable>
	
	setEnable();
  ae:	cf df       	rcall	.-98     	; 0x4e <setEnable>
	PORTA = Return_Home;
  b0:	8d ef       	ldi	r24, 0xFD	; 253
  b2:	82 b9       	out	0x02, r24	; 2
  b4:	90 e1       	ldi	r25, 0x10	; 16
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <initDisplay+0x58>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <initDisplay+0x5e>
	_delay_us(50);	//>37us
	clearEnable();
  bc:	cc df       	rcall	.-104    	; 0x56 <clearEnable>
  be:	08 95       	ret

000000c0 <writeToDisplay>:
}

void writeToDisplay(uint8_t address, uint8_t data){
	
	setEnable();
  c0:	c6 df       	rcall	.-116    	; 0x4e <setEnable>
	PORTA = Display_ON;
  c2:	80 ef       	ldi	r24, 0xF0	; 240
  c4:	82 b9       	out	0x02, r24	; 2
  c6:	20 e1       	ldi	r18, 0x10	; 16
  c8:	2a 95       	dec	r18
  ca:	f1 f7       	brne	.-4      	; 0xc8 <writeToDisplay+0x8>
  cc:	00 c0       	rjmp	.+0      	; 0xce <writeToDisplay+0xe>
	_delay_us(50);	//?
	clearEnable();
  ce:	c3 df       	rcall	.-122    	; 0x56 <clearEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e9       	ldi	r24, 0x9F	; 159
  d2:	96 e8       	ldi	r25, 0x86	; 134
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	20 40       	sbci	r18, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <writeToDisplay+0x16>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <writeToDisplay+0x20>
  e0:	00 00       	nop
	
	_delay_ms(500);
	
	setEnable();
  e2:	b5 df       	rcall	.-150    	; 0x4e <setEnable>
	PORTA = Display_OFF;
  e4:	84 ef       	ldi	r24, 0xF4	; 244
  e6:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <writeToDisplay+0x2a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <writeToDisplay+0x30>
	_delay_us(50);	//?
	clearEnable();
  f0:	b2 df       	rcall	.-156    	; 0x56 <clearEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	9f e9       	ldi	r25, 0x9F	; 159
  f4:	26 e8       	ldi	r18, 0x86	; 134
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	91 50       	subi	r25, 0x01	; 1
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <writeToDisplay+0x38>
 100:	00 c0       	rjmp	.+0      	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <clkLow>:
	clkHigh();
	_delay_us(I2CSpeed);
}

void clkLow(void){
	PORTB &= 0b10111111;
 106:	86 b1       	in	r24, 0x06	; 6
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	86 b9       	out	0x06, r24	; 6
 10c:	08 95       	ret

0000010e <clkHigh>:
}

void clkHigh(void){
	PORTB |= 0b01000000;
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	80 64       	ori	r24, 0x40	; 64
 112:	86 b9       	out	0x06, r24	; 6
 114:	08 95       	ret

00000116 <sdaLow>:
}

void sdaLow(void){
	PORTB &= 0b01111111;
 116:	86 b1       	in	r24, 0x06	; 6
 118:	8f 77       	andi	r24, 0x7F	; 127
 11a:	86 b9       	out	0x06, r24	; 6
 11c:	08 95       	ret

0000011e <sdaHigh>:
}

void sdaHigh(void){
	PORTB |= 0b10000000;
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	80 68       	ori	r24, 0x80	; 128
 122:	86 b9       	out	0x06, r24	; 6
 124:	08 95       	ret

00000126 <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
 126:	fb df       	rcall	.-10     	; 0x11e <sdaHigh>
	clkHigh();
 128:	f2 df       	rcall	.-28     	; 0x10e <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	81 e1       	ldi	r24, 0x11	; 17
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <initI2C+0x6>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	d8 2f       	mov	r29, r24
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//start condition
	sdaLow();
 13a:	ed df       	rcall	.-38     	; 0x116 <sdaLow>
 13c:	81 e1       	ldi	r24, 0x11	; 17
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <sendI2C+0xa>
 142:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 144:	e0 df       	rcall	.-64     	; 0x106 <clkLow>
 146:	81 e1       	ldi	r24, 0x11	; 17
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <sendI2C+0x14>
 14c:	00 00       	nop
	_delay_us(I2CSpeed);
	
	//send input
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	11 c0       	rjmp	.+34     	; 0x174 <sendI2C+0x40>
		result = shift & mask;
		if(result == 0x01){
 152:	d0 ff       	sbrs	r29, 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <sendI2C+0x26>
			sdaHigh();
 156:	e3 df       	rcall	.-58     	; 0x11e <sdaHigh>
 158:	01 c0       	rjmp	.+2      	; 0x15c <sendI2C+0x28>
		}
		else{
			sdaLow();
 15a:	dd df       	rcall	.-70     	; 0x116 <sdaLow>
		}
		clkHigh();
 15c:	d8 df       	rcall	.-80     	; 0x10e <clkHigh>
 15e:	81 e1       	ldi	r24, 0x11	; 17
 160:	8a 95       	dec	r24
 162:	f1 f7       	brne	.-4      	; 0x160 <sendI2C+0x2c>
 164:	00 00       	nop
		_delay_us(I2CSpeed);
		clkLow();
 166:	cf df       	rcall	.-98     	; 0x106 <clkLow>
 168:	81 e1       	ldi	r24, 0x11	; 17
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <sendI2C+0x36>
 16e:	00 00       	nop
		_delay_us(I2CSpeed);
		shift = (shift >> 1);	//shift right by one
 170:	d6 95       	lsr	r29
	clkLow();
	_delay_us(I2CSpeed);
	
	//send input
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
 172:	cf 5f       	subi	r28, 0xFF	; 255
 174:	c8 30       	cpi	r28, 0x08	; 8
 176:	68 f3       	brcs	.-38     	; 0x152 <sendI2C+0x1e>
		clkLow();
		_delay_us(I2CSpeed);
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaLow();
 178:	ce df       	rcall	.-100    	; 0x116 <sdaLow>
	
	clkHigh();
 17a:	c9 df       	rcall	.-110    	; 0x10e <clkHigh>
 17c:	81 e1       	ldi	r24, 0x11	; 17
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <sendI2C+0x4a>
 182:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 184:	c0 df       	rcall	.-128    	; 0x106 <clkLow>
 186:	81 e1       	ldi	r24, 0x11	; 17
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <sendI2C+0x54>
 18c:	00 00       	nop
	_delay_us(I2CSpeed);
	
	sdaHigh();
 18e:	c7 df       	rcall	.-114    	; 0x11e <sdaHigh>
 190:	81 e1       	ldi	r24, 0x11	; 17
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <sendI2C+0x5e>
 196:	00 00       	nop
	_delay_us(I2CSpeed);
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <finishCom>:

void finishCom(){
	// finish communication
	sdaHigh();
 19e:	bf df       	rcall	.-130    	; 0x11e <sdaHigh>
	clkHigh();
 1a0:	b6 df       	rcall	.-148    	; 0x10e <clkHigh>
 1a2:	81 e1       	ldi	r24, 0x11	; 17
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <finishCom+0x6>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	d6 2f       	mov	r29, r22
 1b2:	c4 2f       	mov	r28, r20
	sendI2C(chipAddress);
 1b4:	bf df       	rcall	.-130    	; 0x134 <sendI2C>
	sendI2C(subAddress);
 1b6:	8d 2f       	mov	r24, r29
 1b8:	bd df       	rcall	.-134    	; 0x134 <sendI2C>
	sendI2C(data);
 1ba:	8c 2f       	mov	r24, r28
 1bc:	bb df       	rcall	.-138    	; 0x134 <sendI2C>
	finishCom();
 1be:	ef df       	rcall	.-34     	; 0x19e <finishCom>
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0xff;		//output
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;		//Set pull ups
 1ca:	83 b9       	out	0x03, r24	; 3
	PORTA = 0x00;		//write zero
 1cc:	12 b8       	out	0x02, r1	; 2
	
	//PORT B
	DDRB = 0b11000000;	//output
 1ce:	90 ec       	ldi	r25, 0xC0	; 192
 1d0:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 1d2:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b00000000;	//write zero
 1d4:	16 b8       	out	0x06, r1	; 6
	
	//PORT C
	DDRC = 0b11000000;	//output
 1d6:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 1d8:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b00000000;	//write zero
 1da:	1a b8       	out	0x0a, r1	; 10
 1dc:	08 95       	ret

000001de <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving of
 1de:	e4 e6       	ldi	r30, 0x64	; 100
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 1e8:	ea e7       	ldi	r30, 0x7A	; 122
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 1f2:	ad e7       	ldi	r26, 0x7D	; 125
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	8c 91       	ld	r24, X
 1f8:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 1fa:	80 81       	ld	r24, Z
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 200:	eb e7       	ldi	r30, 0x7B	; 123
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	88 60       	ori	r24, 0x08	; 8
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA	|= ADCReadPin;		
 20c:	ec e7       	ldi	r30, 0x7C	; 124
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	90 81       	ld	r25, Z
 212:	89 2b       	or	r24, r25
 214:	80 83       	st	Z, r24
	ADMUXB	&= 0b11111110;		
 216:	ed e7       	ldi	r30, 0x7D	; 125
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	80 83       	st	Z, r24
	ADCSRA	|= 0b01000000;		//ADSC on
 220:	ea e7       	ldi	r30, 0x7A	; 122
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 64       	ori	r24, 0x40	; 64
 228:	80 83       	st	Z, r24
	return ADCH;
 22a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 22e:	08 95       	ret

00000230 <main>:
#include "Display/Display.h"

int main(void)
{
	//IO
	initIO();
 230:	ca df       	rcall	.-108    	; 0x1c6 <initIO>
	
	//ADC
	initADC();
 232:	d5 df       	rcall	.-86     	; 0x1de <initADC>
	
	//I2C
	initI2C();
 234:	78 df       	rcall	.-272    	; 0x126 <initI2C>
	
	//display
	initDisplay();
 236:	13 df       	rcall	.-474    	; 0x5e <initDisplay>
	uint8_t treble = 0x00;
	
    while (1) 
    {
		//read inputs
		gain = ReadADCPinValue(0b00001000);		//PB0
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	e8 df       	rcall	.-48     	; 0x20c <ReadADCPinValue>
		bass = ReadADCPinValue(0b00001011);		//PB3
 23c:	8b e0       	ldi	r24, 0x0B	; 11
 23e:	e6 df       	rcall	.-52     	; 0x20c <ReadADCPinValue>
		midRange = ReadADCPinValue(0b00001100);	//PB4
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	e4 df       	rcall	.-56     	; 0x20c <ReadADCPinValue>
		treble = ReadADCPinValue(0b00001101);	//PB5
 244:	8d e0       	ldi	r24, 0x0D	; 13
 246:	e2 df       	rcall	.-60     	; 0x20c <ReadADCPinValue>
		
		//Volume -> rotary encoder
		
		//TDA update
		//debug
		setTDAValue(0b10000000, 0b00000000, 0b00000000);
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	80 e8       	ldi	r24, 0x80	; 128
 24e:	ae df       	rcall	.-164    	; 0x1ac <setTDAValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	83 ec       	ldi	r24, 0xC3	; 195
 252:	99 e0       	ldi	r25, 0x09	; 9
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x24>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x2a>
 25a:	00 00       	nop
		setTDAValue(CHIP_ADDRESS, SubAdr_Bass_gain, bass);
		setTDAValue(CHIP_ADDRESS, SubAdr_Mid_range_gain, midRange);
		setTDAValue(CHIP_ADDRESS, SubAdr_Treble_gain, treble);		
		*/
		//Display update -> parallel
		writeToDisplay(0x00, 0xff);
 25c:	6f ef       	ldi	r22, 0xFF	; 255
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	2f df       	rcall	.-418    	; 0xc0 <writeToDisplay>
 262:	ea cf       	rjmp	.-44     	; 0x238 <main+0x8>

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
