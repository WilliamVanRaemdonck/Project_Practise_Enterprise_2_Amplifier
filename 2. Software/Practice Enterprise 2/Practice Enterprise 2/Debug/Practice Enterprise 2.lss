
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080016e  0080016e  00000744  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac5  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b91  00000000  00000000  000023c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c92  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dc  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c45  00000000  00000000  0000454c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	d3 c2       	rjmp	.+1446   	; 0x5ba <__vector_9>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e4       	ldi	r30, 0x42	; 66
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 36       	cpi	r26, 0x6E	; 110
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e6       	ldi	r26, 0x6E	; 110
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 38       	cpi	r26, 0x8D	; 141
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	17 d2       	rcall	.+1070   	; 0x496 <main>
  68:	ea c2       	rjmp	.+1492   	; 0x63e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <setRS>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8a b9       	out	0x0a, r24	; 10
  72:	08 95       	ret

00000074 <clearRS>:
  74:	8a b1       	in	r24, 0x0a	; 10
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	8a b9       	out	0x0a, r24	; 10
  7a:	08 95       	ret

0000007c <setEnable>:
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8a b9       	out	0x0a, r24	; 10
  82:	08 95       	ret

00000084 <clearEnable>:
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	08 95       	ret

0000008c <sendByte>:
  8c:	82 b9       	out	0x02, r24	; 2
  8e:	f6 df       	rcall	.-20     	; 0x7c <setEnable>
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <sendByte+0x6>
  96:	00 c0       	rjmp	.+0      	; 0x98 <sendByte+0xc>
  98:	f5 df       	rcall	.-22     	; 0x84 <clearEnable>
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <sendByte+0x10>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <sendByte+0x16>
  a2:	f0 df       	rcall	.-32     	; 0x84 <clearEnable>
  a4:	e7 df       	rcall	.-50     	; 0x74 <clearRS>
  a6:	12 b8       	out	0x02, r1	; 2
  a8:	08 95       	ret

000000aa <sendNibble>:
  aa:	cf 93       	push	r28
  ac:	89 35       	cpi	r24, 0x59	; 89
  ae:	31 f0       	breq	.+12     	; 0xbc <sendNibble+0x12>
  b0:	98 2f       	mov	r25, r24
  b2:	90 7f       	andi	r25, 0xF0	; 240
  b4:	c8 2f       	mov	r28, r24
  b6:	c2 95       	swap	r28
  b8:	c0 7f       	andi	r28, 0xF0	; 240
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <sendNibble+0x16>
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	92 b9       	out	0x02, r25	; 2
  c2:	dc df       	rcall	.-72     	; 0x7c <setEnable>
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <sendNibble+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <sendNibble+0x22>
  cc:	db df       	rcall	.-74     	; 0x84 <clearEnable>
  ce:	80 e1       	ldi	r24, 0x10	; 16
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <sendNibble+0x26>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <sendNibble+0x2c>
  d6:	c2 b9       	out	0x02, r28	; 2
  d8:	d1 df       	rcall	.-94     	; 0x7c <setEnable>
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <sendNibble+0x32>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <sendNibble+0x38>
  e2:	d0 df       	rcall	.-96     	; 0x84 <clearEnable>
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <sendNibble+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <sendNibble+0x42>
  ec:	cb df       	rcall	.-106    	; 0x84 <clearEnable>
  ee:	c2 df       	rcall	.-124    	; 0x74 <clearRS>
  f0:	12 b8       	out	0x02, r1	; 2
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <cursorHome>:
	sendNibble(CLEAR_DISPLAY);	// clear display
	_delay_ms(2);	//>1.67ms
}

void cursorHome(void){
	sendNibble(RETURN_HOME);	// return home
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	d8 df       	rcall	.-80     	; 0xaa <sendNibble>
  fa:	83 ef       	ldi	r24, 0xF3	; 243
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <cursorHome+0x8>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <writeToDisplay>:

	writeToDisplay(barStr, strlen(barStr), 0xc0);
	writeToDisplay(muxStr, strlen(muxStr), 0xd4);
}

void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	7c 01       	movw	r14, r24
 116:	06 2f       	mov	r16, r22
 118:	14 2f       	mov	r17, r20
	uint8_t address = DDRAMaddress;
	cursorHome();
 11a:	ed df       	rcall	.-38     	; 0xf6 <cursorHome>
	for(int i = 0; i < length;i++){
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	0f c0       	rjmp	.+30     	; 0x140 <writeToDisplay+0x38>
		sendNibble(address);		//address = 0 DDRAM
 122:	81 2f       	mov	r24, r17
 124:	c2 df       	rcall	.-124    	; 0xaa <sendNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <writeToDisplay+0x20>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <writeToDisplay+0x26>
		_delay_us(50);				//>1.67ms
		
		setRS();
 12e:	9e df       	rcall	.-196    	; 0x6c <setRS>
		sendNibble(data[i]);
 130:	f7 01       	movw	r30, r14
 132:	ec 0f       	add	r30, r28
 134:	fd 1f       	adc	r31, r29
 136:	80 81       	ld	r24, Z
 138:	b8 df       	rcall	.-144    	; 0xaa <sendNibble>
		clearRS();
 13a:	9c df       	rcall	.-200    	; 0x74 <clearRS>
		
		address++;
 13c:	1f 5f       	subi	r17, 0xFF	; 255
}

void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
	uint8_t address = DDRAMaddress;
	cursorHome();
	for(int i = 0; i < length;i++){
 13e:	21 96       	adiw	r28, 0x01	; 1
 140:	80 2f       	mov	r24, r16
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	c8 17       	cp	r28, r24
 146:	d9 07       	cpc	r29, r25
 148:	64 f3       	brlt	.-40     	; 0x122 <writeToDisplay+0x1a>
		clearRS();
		
		address++;
	}
	address = DDRAMaddress;
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	ff 90       	pop	r15
 154:	ef 90       	pop	r14
 156:	08 95       	ret

00000158 <updateDisplay>:
	
	writeToDisplay(volStrText, strlen(volStrText), 0x80);
	writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
}

void updateDisplay(uint8_t displayValueF, uint8_t mux){
 158:	46 2f       	mov	r20, r22
	//2 ??????_______________	address: 0xc0
	//3 INPUT:					address: 0x94
	//4 [] [] [?] []			address: 0xd4

	// volume string
	bars = displayValueF / 12; // 0 - 255 => 0 - 20 => / 12.75 ~ 13
 15a:	6c e0       	ldi	r22, 0x0C	; 12
 15c:	64 d2       	rcall	.+1224   	; 0x626 <__udivmodqi4>
 15e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <bars>
	blanks = 20 - bars;
 162:	94 e1       	ldi	r25, 0x14	; 20
 164:	98 1b       	sub	r25, r24
 166:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <__data_end>
	//assemble string
	strcpy(barStr, "");
 16a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <barStr>
	for(int i = 0; i < bars; i++){
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	0c c0       	rjmp	.+24     	; 0x18c <updateDisplay+0x34>
		strcat(barStr, "Y");
 174:	e7 e7       	ldi	r30, 0x77	; 119
 176:	f1 e0       	ldi	r31, 0x01	; 1
 178:	01 90       	ld	r0, Z+
 17a:	00 20       	and	r0, r0
 17c:	e9 f7       	brne	.-6      	; 0x178 <updateDisplay+0x20>
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	89 e5       	ldi	r24, 0x59	; 89
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
	// volume string
	bars = displayValueF / 12; // 0 - 255 => 0 - 20 => / 12.75 ~ 13
	blanks = 20 - bars;
	//assemble string
	strcpy(barStr, "");
	for(int i = 0; i < bars; i++){
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <bars>
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	28 17       	cp	r18, r24
 194:	39 07       	cpc	r19, r25
 196:	74 f3       	brlt	.-36     	; 0x174 <updateDisplay+0x1c>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <updateDisplay+0x5e>
		strcat(barStr, "Y");
	}
	for(int i = 0; i < blanks; i++){
		strcat(barStr, "_");
 19e:	e7 e7       	ldi	r30, 0x77	; 119
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	01 90       	ld	r0, Z+
 1a4:	00 20       	and	r0, r0
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <updateDisplay+0x4a>
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	8f e5       	ldi	r24, 0x5F	; 95
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	91 83       	std	Z+1, r25	; 0x01
 1b0:	80 83       	st	Z, r24
	//assemble string
	strcpy(barStr, "");
	for(int i = 0; i < bars; i++){
		strcat(barStr, "Y");
	}
	for(int i = 0; i < blanks; i++){
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	28 17       	cp	r18, r24
 1be:	39 07       	cpc	r19, r25
 1c0:	74 f3       	brlt	.-36     	; 0x19e <updateDisplay+0x46>
		strcat(barStr, "_");
	}
	
	//mux string
	muxStr = muxTable[mux];
 1c2:	e4 2f       	mov	r30, r20
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	80 81       	ld	r24, Z
 1d0:	91 81       	ldd	r25, Z+1	; 0x01
 1d2:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <muxStr+0x1>
 1d6:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <muxStr>

	writeToDisplay(barStr, strlen(barStr), 0xc0);
 1da:	e7 e7       	ldi	r30, 0x77	; 119
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	01 90       	ld	r0, Z+
 1e0:	00 20       	and	r0, r0
 1e2:	e9 f7       	brne	.-6      	; 0x1de <updateDisplay+0x86>
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	bf 01       	movw	r22, r30
 1e8:	67 57       	subi	r22, 0x77	; 119
 1ea:	71 40       	sbci	r23, 0x01	; 1
 1ec:	40 ec       	ldi	r20, 0xC0	; 192
 1ee:	87 e7       	ldi	r24, 0x77	; 119
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	8a df       	rcall	.-236    	; 0x108 <writeToDisplay>
	writeToDisplay(muxStr, strlen(muxStr), 0xd4);
 1f4:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <muxStr>
 1f8:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <muxStr+0x1>
 1fc:	fc 01       	movw	r30, r24
 1fe:	01 90       	ld	r0, Z+
 200:	00 20       	and	r0, r0
 202:	e9 f7       	brne	.-6      	; 0x1fe <updateDisplay+0xa6>
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	bf 01       	movw	r22, r30
 208:	68 1b       	sub	r22, r24
 20a:	79 0b       	sbc	r23, r25
 20c:	44 ed       	ldi	r20, 0xD4	; 212
 20e:	7c df       	rcall	.-264    	; 0x108 <writeToDisplay>
 210:	08 95       	ret

00000212 <initDisplay>:
uint8_t bars = 0;
uint8_t blanks = 0;

void initDisplay(void){
	//init
	setRS();
 212:	2c df       	rcall	.-424    	; 0x6c <setRS>
	setEnable();
 214:	33 df       	rcall	.-410    	; 0x7c <setEnable>
	PORTA = 0x00;
 216:	12 b8       	out	0x02, r1	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	2f e9       	ldi	r18, 0x9F	; 159
 21a:	86 e8       	ldi	r24, 0x86	; 134
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <initDisplay+0xc>
 226:	00 c0       	rjmp	.+0      	; 0x228 <initDisplay+0x16>
 228:	00 00       	nop
	//power on delay
	_delay_ms(500);
	
	clearEnable();
 22a:	2c df       	rcall	.-424    	; 0x84 <clearEnable>
	clearRS();
 22c:	23 df       	rcall	.-442    	; 0x74 <clearRS>
 22e:	2f e9       	ldi	r18, 0x9F	; 159
 230:	86 e8       	ldi	r24, 0x86	; 134
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <initDisplay+0x22>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <initDisplay+0x2c>
 23e:	00 00       	nop
	_delay_ms(500);
	
	//send function set 3 times
	sendByte(0b00110000);//Function set
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	24 df       	rcall	.-440    	; 0x8c <sendByte>
 244:	81 ee       	ldi	r24, 0xE1	; 225
 246:	94 e0       	ldi	r25, 0x04	; 4
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <initDisplay+0x36>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <initDisplay+0x3c>
 24e:	00 00       	nop
	_delay_ms(5);	//>4.1
	
	sendByte(0b00110000);//Function set
 250:	80 e3       	ldi	r24, 0x30	; 48
 252:	1c df       	rcall	.-456    	; 0x8c <sendByte>
 254:	83 ef       	ldi	r24, 0xF3	; 243
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <initDisplay+0x46>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <initDisplay+0x4c>
 25e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00110000);//Function set
 260:	80 e3       	ldi	r24, 0x30	; 48
 262:	14 df       	rcall	.-472    	; 0x8c <sendByte>
 264:	83 ef       	ldi	r24, 0xF3	; 243
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <initDisplay+0x56>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <initDisplay+0x5c>
 26e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00100000);//Function set	- 4bit mode
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	0c df       	rcall	.-488    	; 0x8c <sendByte>
 274:	83 ef       	ldi	r24, 0xF3	; 243
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <initDisplay+0x66>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <initDisplay+0x6c>
 27e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(FUNCTION_SET);	// interface length and Character font	- 4 bit en 5*8
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	13 df       	rcall	.-474    	; 0xaa <sendNibble>
 284:	83 ef       	ldi	r24, 0xF3	; 243
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <initDisplay+0x76>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <initDisplay+0x7c>
 28e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CURSOR_ON_BLINK);// display on, cursor on, blink on
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0b df       	rcall	.-490    	; 0xaa <sendNibble>
 294:	83 ef       	ldi	r24, 0xF3	; 243
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <initDisplay+0x86>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <initDisplay+0x8c>
 29e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CLEAR_DISPLAY);	// clear display
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	03 df       	rcall	.-506    	; 0xaa <sendNibble>
 2a4:	83 ef       	ldi	r24, 0xF3	; 243
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <initDisplay+0x96>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <initDisplay+0x9c>
 2ae:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(ENTRY_MODE);		// ready to write
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	fb de       	rcall	.-522    	; 0xaa <sendNibble>
 2b4:	83 ef       	ldi	r24, 0xF3	; 243
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <initDisplay+0xa6>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <initDisplay+0xac>
 2be:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(RETURN_HOME);	// return home
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	f3 de       	rcall	.-538    	; 0xaa <sendNibble>
 2c4:	83 ef       	ldi	r24, 0xF3	; 243
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <initDisplay+0xb6>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <initDisplay+0xbc>
 2ce:	00 00       	nop
 2d0:	9f e3       	ldi	r25, 0x3F	; 63
 2d2:	2d e0       	ldi	r18, 0x0D	; 13
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <initDisplay+0xc4>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <initDisplay+0xce>
 2e0:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	_delay_ms(1000);
	
	writeToDisplay(volStrText, strlen(volStrText), 0x80);
 2e2:	e8 e0       	ldi	r30, 0x08	; 8
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	01 90       	ld	r0, Z+
 2e8:	00 20       	and	r0, r0
 2ea:	e9 f7       	brne	.-6      	; 0x2e6 <initDisplay+0xd4>
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	bf 01       	movw	r22, r30
 2f0:	68 50       	subi	r22, 0x08	; 8
 2f2:	71 40       	sbci	r23, 0x01	; 1
 2f4:	40 e8       	ldi	r20, 0x80	; 128
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	06 df       	rcall	.-500    	; 0x108 <writeToDisplay>
	writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
 2fc:	e3 e1       	ldi	r30, 0x13	; 19
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	01 90       	ld	r0, Z+
 302:	00 20       	and	r0, r0
 304:	e9 f7       	brne	.-6      	; 0x300 <__stack+0x1>
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	bf 01       	movw	r22, r30
 30a:	63 51       	subi	r22, 0x13	; 19
 30c:	71 40       	sbci	r23, 0x01	; 1
 30e:	44 e9       	ldi	r20, 0x94	; 148
 310:	83 e1       	ldi	r24, 0x13	; 19
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	f9 de       	rcall	.-526    	; 0x108 <writeToDisplay>
 316:	08 95       	ret

00000318 <EEPROM_write>:
#include "EEPROM.h"

void EEPROM_write(uint8_t ucAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
 318:	f9 99       	sbic	0x1f, 1	; 31
 31a:	fe cf       	rjmp	.-4      	; 0x318 <EEPROM_write>
	/* Set Programming mode */
	EECR = (0<<EEPM1)|(0<<EEPM0);
 31c:	1f ba       	out	0x1f, r1	; 31
	/* Set up address and data registers */
	EEAR = ucAddress;
 31e:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 320:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 322:	8f b3       	in	r24, 0x1f	; 31
 324:	84 60       	ori	r24, 0x04	; 4
 326:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 328:	8f b3       	in	r24, 0x1f	; 31
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	8f bb       	out	0x1f, r24	; 31
 32e:	08 95       	ret

00000330 <EEPROM_read>:
}

uint8_t EEPROM_read(uint8_t ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
 330:	f9 99       	sbic	0x1f, 1	; 31
 332:	fe cf       	rjmp	.-4      	; 0x330 <EEPROM_read>
	/* Set up address register */
	EEAR = ucAddress;
 334:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 336:	8f b3       	in	r24, 0x1f	; 31
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	8f bb       	out	0x1f, r24	; 31
	/* Return data from data register */
	return EEDR;
 33c:	80 b5       	in	r24, 0x20	; 32
 33e:	08 95       	ret

00000340 <clkLow>:
	clkLow();
	_delay_us(I2CSpeed);
}

void clkLow(void){
	PORTB &= 0b10111111;
 340:	86 b1       	in	r24, 0x06	; 6
 342:	8f 7b       	andi	r24, 0xBF	; 191
 344:	86 b9       	out	0x06, r24	; 6
 346:	08 95       	ret

00000348 <clkHigh>:
}

void clkHigh(void){
	PORTB |= 0b01000000;
 348:	86 b1       	in	r24, 0x06	; 6
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	86 b9       	out	0x06, r24	; 6
 34e:	08 95       	ret

00000350 <clkPulse>:
	sdaHigh();
	_delay_us(I2CSpeed);
}

void clkPulse(void){
	clkHigh();
 350:	fb df       	rcall	.-10     	; 0x348 <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	81 e2       	ldi	r24, 0x21	; 33
 354:	8a 95       	dec	r24
 356:	f1 f7       	brne	.-4      	; 0x354 <clkPulse+0x4>
 358:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 35a:	f2 df       	rcall	.-28     	; 0x340 <clkLow>
 35c:	81 e2       	ldi	r24, 0x21	; 33
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <clkPulse+0xe>
 362:	00 00       	nop
 364:	08 95       	ret

00000366 <sdaLow>:
void clkHigh(void){
	PORTB |= 0b01000000;
}

void sdaLow(void){
	PORTB &= 0b01111111;
 366:	86 b1       	in	r24, 0x06	; 6
 368:	8f 77       	andi	r24, 0x7F	; 127
 36a:	86 b9       	out	0x06, r24	; 6
 36c:	08 95       	ret

0000036e <startCom>:
	clkPulse();
}

void startCom(void){
	//start condition
	sdaLow();
 36e:	fb df       	rcall	.-10     	; 0x366 <sdaLow>
 370:	81 e2       	ldi	r24, 0x21	; 33
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <startCom+0x4>
 376:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 378:	e3 df       	rcall	.-58     	; 0x340 <clkLow>
 37a:	81 e2       	ldi	r24, 0x21	; 33
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <startCom+0xe>
 380:	00 00       	nop
 382:	08 95       	ret

00000384 <sdaHigh>:
void sdaLow(void){
	PORTB &= 0b01111111;
}

void sdaHigh(void){
	PORTB |= 0b10000000;
 384:	86 b1       	in	r24, 0x06	; 6
 386:	80 68       	ori	r24, 0x80	; 128
 388:	86 b9       	out	0x06, r24	; 6
 38a:	08 95       	ret

0000038c <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
 38c:	fb df       	rcall	.-10     	; 0x384 <sdaHigh>
	clkHigh();
 38e:	dc df       	rcall	.-72     	; 0x348 <clkHigh>
 390:	81 e2       	ldi	r24, 0x21	; 33
 392:	8a 95       	dec	r24
 394:	f1 f7       	brne	.-4      	; 0x392 <initI2C+0x6>
 396:	00 00       	nop
 398:	08 95       	ret

0000039a <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
 39e:	e7 d0       	rcall	.+462    	; 0x56e <reverse>
 3a0:	d8 2f       	mov	r29, r24
	for(uint8_t index = 0; index < 8; index++){
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <sendI2C+0x1c>
		result = shift & mask;
		if(result == 0x01){
 3a6:	d0 ff       	sbrs	r29, 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <sendI2C+0x14>
			sdaHigh();
 3aa:	ec df       	rcall	.-40     	; 0x384 <sdaHigh>
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <sendI2C+0x16>
		}
		else{
			sdaLow();
 3ae:	db df       	rcall	.-74     	; 0x366 <sdaLow>
		}
		clkPulse();
 3b0:	cf df       	rcall	.-98     	; 0x350 <clkPulse>
		shift = (shift >> 1);	//shift right by one
 3b2:	d6 95       	lsr	r29
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
	for(uint8_t index = 0; index < 8; index++){
 3b4:	cf 5f       	subi	r28, 0xFF	; 255
 3b6:	c8 30       	cpi	r28, 0x08	; 8
 3b8:	b0 f3       	brcs	.-20     	; 0x3a6 <sendI2C+0xc>
		}
		clkPulse();
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaHigh();	//sdalow ?
 3ba:	e4 df       	rcall	.-56     	; 0x384 <sdaHigh>
	clkPulse();
 3bc:	c9 df       	rcall	.-110    	; 0x350 <clkPulse>
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <finishCom>:
	_delay_us(I2CSpeed);
}

void finishCom(){
	// finish communication
	clkHigh();
 3c4:	c1 df       	rcall	.-126    	; 0x348 <clkHigh>
 3c6:	81 e2       	ldi	r24, 0x21	; 33
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <finishCom+0x4>
 3cc:	00 00       	nop
	_delay_us(I2CSpeed);
	sdaHigh();
 3ce:	da df       	rcall	.-76     	; 0x384 <sdaHigh>
 3d0:	81 e2       	ldi	r24, 0x21	; 33
 3d2:	8a 95       	dec	r24
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <finishCom+0xe>
 3d6:	00 00       	nop
 3d8:	08 95       	ret

000003da <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	18 2f       	mov	r17, r24
 3e2:	d6 2f       	mov	r29, r22
 3e4:	c4 2f       	mov	r28, r20
	startCom();
 3e6:	c3 df       	rcall	.-122    	; 0x36e <startCom>
	sendI2C(chipAddress);
 3e8:	81 2f       	mov	r24, r17
 3ea:	d7 df       	rcall	.-82     	; 0x39a <sendI2C>
	sendI2C(subAddress);
 3ec:	8d 2f       	mov	r24, r29
 3ee:	d5 df       	rcall	.-86     	; 0x39a <sendI2C>
	sendI2C(data);
 3f0:	8c 2f       	mov	r24, r28
 3f2:	d3 df       	rcall	.-90     	; 0x39a <sendI2C>
	finishCom();
 3f4:	e7 df       	rcall	.-50     	; 0x3c4 <finishCom>
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	08 95       	ret

000003fe <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0b11111111;	//output
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;		//Set pull ups
 402:	83 b9       	out	0x03, r24	; 3
	PORTA = 0x00;		//write zero
 404:	12 b8       	out	0x02, r1	; 2
	
	//PORT B
	DDRB = 0b11000000;	//output
 406:	90 ec       	ldi	r25, 0xC0	; 192
 408:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 40a:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b00000000;	//write zero
 40c:	16 b8       	out	0x06, r1	; 6
	
	//PORT C
	DDRC = 0b11000000;	//output
 40e:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 410:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b00000000;	//write zero
 412:	1a b8       	out	0x0a, r1	; 10
 414:	08 95       	ret

00000416 <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving off
 416:	e4 e6       	ldi	r30, 0x64	; 100
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	8e 7f       	andi	r24, 0xFE	; 254
 41e:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 420:	ea e7       	ldi	r30, 0x7A	; 122
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	80 68       	ori	r24, 0x80	; 128
 428:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 42a:	ad e7       	ldi	r26, 0x7D	; 125
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	8c 91       	ld	r24, X
 430:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 432:	80 81       	ld	r24, Z
 434:	84 60       	ori	r24, 0x04	; 4
 436:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 438:	eb e7       	ldi	r30, 0x7B	; 123
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	88 60       	ori	r24, 0x08	; 8
 440:	80 83       	st	Z, r24
 442:	08 95       	ret

00000444 <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA	|= ADCReadPin;
 444:	ec e7       	ldi	r30, 0x7C	; 124
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	90 81       	ld	r25, Z
 44a:	89 2b       	or	r24, r25
 44c:	80 83       	st	Z, r24
	ADMUXB	&= 0b11111110;
 44e:	ed e7       	ldi	r30, 0x7D	; 125
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	8e 7f       	andi	r24, 0xFE	; 254
 456:	80 83       	st	Z, r24
	ADCSRA	|= 0b01000000;		//ADSC on
 458:	ea e7       	ldi	r30, 0x7A	; 122
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	80 83       	st	Z, r24
	return ADCH;
 462:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 466:	08 95       	ret

00000468 <initTimer1>:

//-----------------------------------------------------------------------------------------	Timer1
void initTimer1(void){
	PRR	   &= 0b11110111;						//power saving off
 468:	e4 e6       	ldi	r30, 0x64	; 100
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	87 7f       	andi	r24, 0xF7	; 247
 470:	80 83       	st	Z, r24

	TCCR1B |= (1 << WGM12 );					// Configure timer 1 for CTC mode
 472:	e1 e8       	ldi	r30, 0x81	; 129
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	88 60       	ori	r24, 0x08	; 8
 47a:	80 83       	st	Z, r24
	OCR1A = 0;
 47c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 480:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
	
	TIMSK1 |= (1 << OCIE1A );					// Enable CTC interrupt
 484:	af e6       	ldi	r26, 0x6F	; 111
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	8c 91       	ld	r24, X
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11 ) | (1 << CS10 );		// prescaler of 64
 48e:	80 81       	ld	r24, Z
 490:	83 60       	ori	r24, 0x03	; 3
 492:	80 83       	st	Z, r24
 494:	08 95       	ret

00000496 <main>:
uint8_t treble = 0x00;

int main(void)
{
	//IO
	initIO();
 496:	b3 df       	rcall	.-154    	; 0x3fe <initIO>
	
	//ADC
	initADC();
 498:	be df       	rcall	.-132    	; 0x416 <initADC>
	
	//TIMER1
	initTimer1();
 49a:	e6 df       	rcall	.-52     	; 0x468 <initTimer1>

	//I2C
	initI2C();
 49c:	77 df       	rcall	.-274    	; 0x38c <initI2C>
	
	//DISPLAY
	initDisplay();
 49e:	b9 de       	rcall	.-654    	; 0x212 <initDisplay>
	
	//ENABLE INTERRUPTS
	sei();
 4a0:	78 94       	sei
	
	//read volume value
	volume = EEPROM_read(0x00);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	45 df       	rcall	.-374    	; 0x330 <EEPROM_read>
 4a6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <volume>
	
	//unmute TDA IC
	setTDAValue(CHIP_ADDRESS, SubAdr_Speaker_attenuation_L, 0x00);
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	66 e0       	ldi	r22, 0x06	; 6
 4ae:	88 e8       	ldi	r24, 0x88	; 136
 4b0:	94 df       	rcall	.-216    	; 0x3da <setTDAValue>
	setTDAValue(CHIP_ADDRESS, SubAdr_Speaker_attenuation_R, 0x00);
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	67 e0       	ldi	r22, 0x07	; 7
 4b6:	88 e8       	ldi	r24, 0x88	; 136
 4b8:	90 df       	rcall	.-224    	; 0x3da <setTDAValue>
	setTDAValue(CHIP_ADDRESS, SubAdr_Volume, volume);
 4ba:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <volume>
 4be:	62 e0       	ldi	r22, 0x02	; 2
 4c0:	88 e8       	ldi	r24, 0x88	; 136
 4c2:	8b df       	rcall	.-234    	; 0x3da <setTDAValue>
	
	while (1)
	{
		//read inputs
		gain = ReadADCPinValue(0b00001000);		//PB0
 4c4:	88 e0       	ldi	r24, 0x08	; 8
 4c6:	be df       	rcall	.-132    	; 0x444 <ReadADCPinValue>
 4c8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <gain>
		bass = ReadADCPinValue(0b00001011);		//PB3
 4cc:	8b e0       	ldi	r24, 0x0B	; 11
 4ce:	ba df       	rcall	.-140    	; 0x444 <ReadADCPinValue>
 4d0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <bass>
		midRange = ReadADCPinValue(0b00001100);	//PB4
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	b6 df       	rcall	.-148    	; 0x444 <ReadADCPinValue>
 4d8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <midRange>
		treble = ReadADCPinValue(0b00001101);	//PB5
 4dc:	8d e0       	ldi	r24, 0x0D	; 13
 4de:	b2 df       	rcall	.-156    	; 0x444 <ReadADCPinValue>
 4e0:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <treble>
		
		//mux PC2 PC3 PC4 PC5
		uint8_t PINC2v = PINC & (1 << PINC2);
 4e4:	38 b1       	in	r19, 0x08	; 8
		uint8_t PINC3v = PINC & (1 << PINC3);
 4e6:	88 b1       	in	r24, 0x08	; 8
 4e8:	88 70       	andi	r24, 0x08	; 8
		uint8_t PINC4v = PINC & (1 << PINC4);
 4ea:	98 b1       	in	r25, 0x08	; 8
 4ec:	90 71       	andi	r25, 0x10	; 16
		uint8_t PINC5v = PINC & (1 << PINC5);
 4ee:	28 b1       	in	r18, 0x08	; 8
 4f0:	20 72       	andi	r18, 0x20	; 32
		
		if(PINC2v){
 4f2:	32 ff       	sbrs	r19, 2
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <main+0x66>
			mux = 0;
 4f6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <mux>
 4fa:	11 c0       	rjmp	.+34     	; 0x51e <main+0x88>
		}
		else if(PINC3v){
 4fc:	88 23       	and	r24, r24
 4fe:	21 f0       	breq	.+8      	; 0x508 <main+0x72>
			mux = 1;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <mux>
 506:	0b c0       	rjmp	.+22     	; 0x51e <main+0x88>
		}
		else if(PINC4v){
 508:	99 23       	and	r25, r25
 50a:	21 f0       	breq	.+8      	; 0x514 <main+0x7e>
			mux = 2;
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <mux>
 512:	05 c0       	rjmp	.+10     	; 0x51e <main+0x88>
		}
		else if(PINC5v){
 514:	22 23       	and	r18, r18
 516:	19 f0       	breq	.+6      	; 0x51e <main+0x88>
			mux = 3;
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <mux>
		}
		
		//TDA update
		setTDAValue(CHIP_ADDRESS, SubAdr_Input_selector, mux);
 51e:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <mux>
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	88 e8       	ldi	r24, 0x88	; 136
 526:	59 df       	rcall	.-334    	; 0x3da <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Input_gain, gain);
 528:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <gain>
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	88 e8       	ldi	r24, 0x88	; 136
 530:	54 df       	rcall	.-344    	; 0x3da <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Volume, volume);
 532:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <volume>
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	88 e8       	ldi	r24, 0x88	; 136
 53a:	4f df       	rcall	.-354    	; 0x3da <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Bass_gain, bass);
 53c:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <bass>
 540:	63 e0       	ldi	r22, 0x03	; 3
 542:	88 e8       	ldi	r24, 0x88	; 136
 544:	4a df       	rcall	.-364    	; 0x3da <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Mid_range_gain, midRange);
 546:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <midRange>
 54a:	64 e0       	ldi	r22, 0x04	; 4
 54c:	88 e8       	ldi	r24, 0x88	; 136
 54e:	45 df       	rcall	.-374    	; 0x3da <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Treble_gain, treble);
 550:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <treble>
 554:	65 e0       	ldi	r22, 0x05	; 5
 556:	88 e8       	ldi	r24, 0x88	; 136
 558:	40 df       	rcall	.-384    	; 0x3da <setTDAValue>
		
		//Display update -> parallel
		updateDisplay(volume, mux);
 55a:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <mux>
 55e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <volume>
 562:	fa dd       	rcall	.-1036   	; 0x158 <updateDisplay>
		for(int i = 0; i < 4;i++){
			updateDisplay((i*50), i);
		}*/
	
		//write to EEPROM
		EEPROM_write(0x00, volume);
 564:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <volume>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	d6 de       	rcall	.-596    	; 0x318 <EEPROM_write>
	}
 56c:	ab cf       	rjmp	.-170    	; 0x4c4 <main+0x2e>

0000056e <reverse>:
}

//-----------------------------------------------------------------------------------------	MISC
// src: https://stackoverflow.com/questions/2602823/in-c-c-whats-the-simplest-way-to-reverse-the-order-of-bits-in-a-byte
uint8_t reverse(uint8_t b) {
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 56e:	28 2f       	mov	r18, r24
 570:	22 95       	swap	r18
 572:	2f 70       	andi	r18, 0x0F	; 15
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	82 95       	swap	r24
 578:	92 95       	swap	r25
 57a:	90 7f       	andi	r25, 0xF0	; 240
 57c:	98 27       	eor	r25, r24
 57e:	80 7f       	andi	r24, 0xF0	; 240
 580:	98 27       	eor	r25, r24
 582:	92 2f       	mov	r25, r18
 584:	98 2b       	or	r25, r24
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 586:	29 2f       	mov	r18, r25
 588:	2c 7c       	andi	r18, 0xCC	; 204
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	35 95       	asr	r19
 58e:	27 95       	ror	r18
 590:	35 95       	asr	r19
 592:	27 95       	ror	r18
 594:	93 73       	andi	r25, 0x33	; 51
 596:	89 2f       	mov	r24, r25
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	82 2b       	or	r24, r18
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 5a4:	28 2f       	mov	r18, r24
 5a6:	2a 7a       	andi	r18, 0xAA	; 170
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	35 95       	asr	r19
 5ac:	27 95       	ror	r18
 5ae:	85 75       	andi	r24, 0x55	; 85
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
	return b;
}
 5b6:	82 2b       	or	r24, r18
 5b8:	08 95       	ret

000005ba <__vector_9>:

//-----------------------------------------------------------------------------------------	ISR
ISR(TIMER1_COMPA_vect, ISR_BLOCK){
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
	/*
	0x00	READ
	0x01	IDLE	*/

	// Toggle LED on each interrupt
	PORTA ^= 1 << PORTA1;
 5c8:	92 b1       	in	r25, 0x02	; 2
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	89 27       	eor	r24, r25
 5ce:	82 b9       	out	0x02, r24	; 2

	//rotary encoder
	switch (volumeSwitchState)
 5d0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <volumeSwitchState.1823>
 5d4:	88 23       	and	r24, r24
 5d6:	19 f0       	breq	.+6      	; 0x5de <__vector_9+0x24>
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	d9 f0       	breq	.+54     	; 0x612 <__vector_9+0x58>
 5dc:	1d c0       	rjmp	.+58     	; 0x618 <__vector_9+0x5e>
	{
		case 0x00:
		if(PINB & (1<<PINB2)){					// clk = 0?
 5de:	22 9b       	sbis	0x04, 2	; 4
 5e0:	1b c0       	rjmp	.+54     	; 0x618 <__vector_9+0x5e>
			if(PINB & (1<<PINB1)){				// data = 0
 5e2:	21 9b       	sbis	0x04, 1	; 4
 5e4:	0b c0       	rjmp	.+22     	; 0x5fc <__vector_9+0x42>
				if(volume >= 5){
 5e6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <volume>
 5ea:	85 30       	cpi	r24, 0x05	; 5
 5ec:	18 f0       	brcs	.+6      	; 0x5f4 <__vector_9+0x3a>
					volume -= 5;
 5ee:	85 50       	subi	r24, 0x05	; 5
 5f0:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <volume>
				}
				volumeSwitchState = 0x01;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <volumeSwitchState.1823>
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <__vector_9+0x5e>
			}
			else{								// data = 1
				if(volume <= 250){
 5fc:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <volume>
 600:	8b 3f       	cpi	r24, 0xFB	; 251
 602:	18 f4       	brcc	.+6      	; 0x60a <__vector_9+0x50>
					volume += 5;
 604:	8b 5f       	subi	r24, 0xFB	; 251
 606:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <volume>
				}
				volumeSwitchState = 0x01;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <volumeSwitchState.1823>
 610:	03 c0       	rjmp	.+6      	; 0x618 <__vector_9+0x5e>
			}
		}
		break;
		
		case 0x01:
		if(PINB & (1<<PINB2)){					// clk still low?
 612:	22 9b       	sbis	0x04, 2	; 4
			//stay
		}
		else{
			volumeSwitchState = 0x00;
 614:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <volumeSwitchState.1823>
		}
		break;
	}
	
}
 618:	9f 91       	pop	r25
 61a:	8f 91       	pop	r24
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <__udivmodqi4>:
 626:	99 1b       	sub	r25, r25
 628:	79 e0       	ldi	r23, 0x09	; 9
 62a:	04 c0       	rjmp	.+8      	; 0x634 <__udivmodqi4_ep>

0000062c <__udivmodqi4_loop>:
 62c:	99 1f       	adc	r25, r25
 62e:	96 17       	cp	r25, r22
 630:	08 f0       	brcs	.+2      	; 0x634 <__udivmodqi4_ep>
 632:	96 1b       	sub	r25, r22

00000634 <__udivmodqi4_ep>:
 634:	88 1f       	adc	r24, r24
 636:	7a 95       	dec	r23
 638:	c9 f7       	brne	.-14     	; 0x62c <__udivmodqi4_loop>
 63a:	80 95       	com	r24
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
