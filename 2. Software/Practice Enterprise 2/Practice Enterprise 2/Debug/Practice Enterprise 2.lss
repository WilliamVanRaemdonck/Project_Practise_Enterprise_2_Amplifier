
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc3  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000898  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000556  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053e  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038c  00000000  00000000  000024fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000288a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	97 d0       	rcall	.+302    	; 0x170 <main>
  42:	ac c0       	rjmp	.+344    	; 0x19c <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <clkLow>:
}

uint8_t convert7bits(uint8_t input){
	
	return 0;
}
  46:	86 b1       	in	r24, 0x06	; 6
  48:	8f 7b       	andi	r24, 0xBF	; 191
  4a:	86 b9       	out	0x06, r24	; 6
  4c:	08 95       	ret

0000004e <clkHigh>:
  4e:	86 b1       	in	r24, 0x06	; 6
  50:	80 64       	ori	r24, 0x40	; 64
  52:	86 b9       	out	0x06, r24	; 6
  54:	08 95       	ret

00000056 <sdaLow>:
  56:	86 b1       	in	r24, 0x06	; 6
  58:	8f 77       	andi	r24, 0x7F	; 127
  5a:	86 b9       	out	0x06, r24	; 6
  5c:	08 95       	ret

0000005e <sdaHigh>:
  5e:	86 b1       	in	r24, 0x06	; 6
  60:	80 68       	ori	r24, 0x80	; 128
  62:	86 b9       	out	0x06, r24	; 6
  64:	08 95       	ret

00000066 <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
  66:	fb df       	rcall	.-10     	; 0x5e <sdaHigh>
	clkHigh();
  68:	f2 df       	rcall	.-28     	; 0x4e <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	81 e1       	ldi	r24, 0x11	; 17
  6c:	8a 95       	dec	r24
  6e:	f1 f7       	brne	.-4      	; 0x6c <initI2C+0x6>
  70:	00 00       	nop
  72:	08 95       	ret

00000074 <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	d8 2f       	mov	r29, r24
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//start condition
	sdaLow();
  7a:	ed df       	rcall	.-38     	; 0x56 <sdaLow>
  7c:	81 e1       	ldi	r24, 0x11	; 17
  7e:	8a 95       	dec	r24
  80:	f1 f7       	brne	.-4      	; 0x7e <sendI2C+0xa>
  82:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
  84:	e0 df       	rcall	.-64     	; 0x46 <clkLow>
  86:	81 e1       	ldi	r24, 0x11	; 17
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <sendI2C+0x14>
  8c:	00 00       	nop
	_delay_us(I2CSpeed);
	
	//send address
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
  8e:	c0 e0       	ldi	r28, 0x00	; 0
  90:	11 c0       	rjmp	.+34     	; 0xb4 <sendI2C+0x40>
		result = shift & mask;
		if(result == 0x01){
  92:	d0 ff       	sbrs	r29, 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <sendI2C+0x26>
			sdaHigh();
  96:	e3 df       	rcall	.-58     	; 0x5e <sdaHigh>
  98:	01 c0       	rjmp	.+2      	; 0x9c <sendI2C+0x28>
		}
		else{
			sdaLow();
  9a:	dd df       	rcall	.-70     	; 0x56 <sdaLow>
		}
		clkHigh();
  9c:	d8 df       	rcall	.-80     	; 0x4e <clkHigh>
  9e:	81 e1       	ldi	r24, 0x11	; 17
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <sendI2C+0x2c>
  a4:	00 00       	nop
		_delay_us(I2CSpeed);
		clkLow();
  a6:	cf df       	rcall	.-98     	; 0x46 <clkLow>
  a8:	81 e1       	ldi	r24, 0x11	; 17
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <sendI2C+0x36>
  ae:	00 00       	nop
		_delay_us(I2CSpeed);
		shift = (shift << 1);	//shift right by one
  b0:	dd 0f       	add	r29, r29
	clkLow();
	_delay_us(I2CSpeed);
	
	//send address
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
  b2:	cf 5f       	subi	r28, 0xFF	; 255
  b4:	c8 30       	cpi	r28, 0x08	; 8
  b6:	68 f3       	brcs	.-38     	; 0x92 <sendI2C+0x1e>
		clkLow();
		_delay_us(I2CSpeed);
		shift = (shift << 1);	//shift right by one
	}
	//ACK
	sdaLow();
  b8:	ce df       	rcall	.-100    	; 0x56 <sdaLow>
	clkHigh();
  ba:	c9 df       	rcall	.-110    	; 0x4e <clkHigh>
  bc:	81 e1       	ldi	r24, 0x11	; 17
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <sendI2C+0x4a>
  c2:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
  c4:	c0 df       	rcall	.-128    	; 0x46 <clkLow>
  c6:	81 e1       	ldi	r24, 0x11	; 17
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <sendI2C+0x54>
  cc:	00 00       	nop
	_delay_us(I2CSpeed);
	sdaHigh();
  ce:	c7 df       	rcall	.-114    	; 0x5e <sdaHigh>
  d0:	81 e1       	ldi	r24, 0x11	; 17
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <sendI2C+0x5e>
  d6:	00 00       	nop
	_delay_us(I2CSpeed);

}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <finishCom>:

void finishCom(){
	// finish communication
	sdaHigh();
  de:	bf df       	rcall	.-130    	; 0x5e <sdaHigh>
	clkHigh();
  e0:	b6 df       	rcall	.-148    	; 0x4e <clkHigh>
  e2:	81 e1       	ldi	r24, 0x11	; 17
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <finishCom+0x6>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	d6 2f       	mov	r29, r22
  f2:	c4 2f       	mov	r28, r20
	sendI2C(chipAddress);
  f4:	bf df       	rcall	.-130    	; 0x74 <sendI2C>
	sendI2C(subAddress);
  f6:	8d 2f       	mov	r24, r29
  f8:	bd df       	rcall	.-134    	; 0x74 <sendI2C>
	sendI2C(data);
  fa:	8c 2f       	mov	r24, r28
  fc:	bb df       	rcall	.-138    	; 0x74 <sendI2C>
	finishCom();
  fe:	ef df       	rcall	.-34     	; 0xde <finishCom>
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0xff;	//output
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;	//Set pull ups
 10a:	83 b9       	out	0x03, r24	; 3
	PORTA = 0xff;	//write zero
 10c:	82 b9       	out	0x02, r24	; 2
	
	//PORT B
	DDRB = 0b11000000;	//output
 10e:	90 ec       	ldi	r25, 0xC0	; 192
 110:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 112:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b11000000;	//write zero
 114:	96 b9       	out	0x06, r25	; 6
	
	//PORT C
	DDRC = 0b11000000;	//output
 116:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 118:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b11000000;	//write zero
 11a:	9a b9       	out	0x0a, r25	; 10
 11c:	08 95       	ret

0000011e <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving of
 11e:	e4 e6       	ldi	r30, 0x64	; 100
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8e 7f       	andi	r24, 0xFE	; 254
 126:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 132:	ad e7       	ldi	r26, 0x7D	; 125
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	8c 91       	ld	r24, X
 138:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 13a:	80 81       	ld	r24, Z
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 140:	eb e7       	ldi	r30, 0x7B	; 123
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA	|= ADCReadPin;		
 14c:	ec e7       	ldi	r30, 0x7C	; 124
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	90 81       	ld	r25, Z
 152:	89 2b       	or	r24, r25
 154:	80 83       	st	Z, r24
	ADMUXB	&= 0b11111110;		
 156:	ed e7       	ldi	r30, 0x7D	; 125
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	80 83       	st	Z, r24
	ADCSRA	|= 0b01000000;		//ADSC on
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
	return ADCH;
 16a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 16e:	08 95       	ret

00000170 <main>:


int main(void)
{
	//IO
	initIO();
 170:	ca df       	rcall	.-108    	; 0x106 <initIO>
	
	//ADC
	initADC();
 172:	d5 df       	rcall	.-86     	; 0x11e <initADC>
	
	//I2C
	initI2C();
 174:	78 df       	rcall	.-272    	; 0x66 <initI2C>
	uint8_t midRange = 0x00;
	uint8_t treble = 0x00;
	
    while (1) 
    {
		gain = ReadADCPinValue(0b00001000);		//PB0
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	e9 df       	rcall	.-46     	; 0x14c <ReadADCPinValue>
		bass = ReadADCPinValue(0b00001011);		//PB3
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	e7 df       	rcall	.-50     	; 0x14c <ReadADCPinValue>
		midRange = ReadADCPinValue(0b00001100);	//PB4
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	e5 df       	rcall	.-54     	; 0x14c <ReadADCPinValue>
		treble = ReadADCPinValue(0b00001101);	//PB5
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	e3 df       	rcall	.-58     	; 0x14c <ReadADCPinValue>
		
		//shit kan ook in sequence
		
		setTDAValue(0b00000000, 0b00000000, 0b00000000);
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	af df       	rcall	.-162    	; 0xec <setTDAValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	83 ec       	ldi	r24, 0xC3	; 195
 190:	99 e0       	ldi	r25, 0x09	; 9
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x22>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x28>
 198:	00 00       	nop
 19a:	ed cf       	rjmp	.-38     	; 0x176 <main+0x6>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
