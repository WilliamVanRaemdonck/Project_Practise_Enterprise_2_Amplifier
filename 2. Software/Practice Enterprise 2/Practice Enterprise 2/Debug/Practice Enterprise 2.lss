
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001244  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a83  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c8  00000000  00000000  000020a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  0000296c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000590  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bd  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	df d0       	rcall	.+446    	; 0x200 <main>
  42:	f5 c0       	rjmp	.+490    	; 0x22e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <clearRS>:
void clearRS(void){
	PORTC |= 0b01000000;
}

void setEnable(void){
	PORTC &= 0b01111111;
  46:	8a b1       	in	r24, 0x0a	; 10
  48:	80 64       	ori	r24, 0x40	; 64
  4a:	8a b9       	out	0x0a, r24	; 10
  4c:	08 95       	ret

0000004e <clearEnable>:
}

void clearEnable(void){
	PORTC |= 0b10000000;
  4e:	8a b1       	in	r24, 0x0a	; 10
  50:	80 68       	ori	r24, 0x80	; 128
  52:	8a b9       	out	0x0a, r24	; 10
  54:	08 95       	ret

00000056 <initDisplay>:
*/

#include "../main.h"
#include "Display.h"

void initDisplay(void){
  56:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	85 ea       	ldi	r24, 0xA5	; 165
  5a:	9e e0       	ldi	r25, 0x0E	; 14
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <initDisplay+0x6>
  60:	00 c0       	rjmp	.+0      	; 0x62 <initDisplay+0xc>
  62:	00 00       	nop
	//Step 0
	_delay_ms(15);
	
	//step 1
	clearEnable();
  64:	f4 df       	rcall	.-24     	; 0x4e <clearEnable>
	clearRS();
  66:	ef df       	rcall	.-34     	; 0x46 <clearRS>
	PORTA = 0b11001111;
  68:	cf ec       	ldi	r28, 0xCF	; 207
  6a:	c2 b9       	out	0x02, r28	; 2
  6c:	81 ee       	ldi	r24, 0xE1	; 225
  6e:	94 e0       	ldi	r25, 0x04	; 4
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <initDisplay+0x1a>
  74:	00 c0       	rjmp	.+0      	; 0x76 <initDisplay+0x20>
  76:	00 00       	nop
	_delay_ms(5); //>4.1ms
	
	//step 2
	clearRS();
  78:	e6 df       	rcall	.-52     	; 0x46 <clearRS>
	PORTA = 0b11001111;
  7a:	c2 b9       	out	0x02, r28	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	92 e3       	ldi	r25, 0x32	; 50
  7e:	9a 95       	dec	r25
  80:	f1 f7       	brne	.-4      	; 0x7e <initDisplay+0x28>
	_delay_us(150); //> 100us
	
	//step 3
	clearRS();
  82:	e1 df       	rcall	.-62     	; 0x46 <clearRS>
	PORTA = 0b11001111;
  84:	c2 b9       	out	0x02, r28	; 2
  86:	22 e3       	ldi	r18, 0x32	; 50
  88:	2a 95       	dec	r18
  8a:	f1 f7       	brne	.-4      	; 0x88 <initDisplay+0x32>
	_delay_us(150); //> 100us
	
	//step 4
	clearRS();
  8c:	dc df       	rcall	.-72     	; 0x46 <clearRS>
	PORTA = 0b11000111;	//function set
  8e:	87 ec       	ldi	r24, 0xC7	; 199
  90:	82 b9       	out	0x02, r24	; 2
  92:	82 e3       	ldi	r24, 0x32	; 50
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <initDisplay+0x3e>
	_delay_us(150);
	PORTA = 0b11110111;	//display off
  98:	87 ef       	ldi	r24, 0xF7	; 247
  9a:	82 b9       	out	0x02, r24	; 2
  9c:	92 e3       	ldi	r25, 0x32	; 50
  9e:	9a 95       	dec	r25
  a0:	f1 f7       	brne	.-4      	; 0x9e <initDisplay+0x48>
	_delay_us(150);
	PORTA = 0b11111110;	//display clear
  a2:	8e ef       	ldi	r24, 0xFE	; 254
  a4:	82 b9       	out	0x02, r24	; 2
  a6:	22 e3       	ldi	r18, 0x32	; 50
  a8:	2a 95       	dec	r18
  aa:	f1 f7       	brne	.-4      	; 0xa8 <initDisplay+0x52>
	_delay_us(150);
	PORTA = 0b11111000;	//entry mode set
  ac:	88 ef       	ldi	r24, 0xF8	; 248
  ae:	82 b9       	out	0x02, r24	; 2
  b0:	82 e3       	ldi	r24, 0x32	; 50
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <initDisplay+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	9f e3       	ldi	r25, 0x3F	; 63
  b8:	2d e0       	ldi	r18, 0x0D	; 13
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	91 50       	subi	r25, 0x01	; 1
  be:	20 40       	sbci	r18, 0x00	; 0
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <initDisplay+0x66>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <initDisplay+0x70>
  c6:	00 00       	nop
	_delay_us(150);
	
	_delay_ms(1000);
	
	//of the books
	PORTA = 0b11110000;	//display on
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	92 e3       	ldi	r25, 0x32	; 50
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <initDisplay+0x78>
	_delay_us(150);
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <clkLow>:
	clkHigh();
	_delay_us(I2CSpeed);
}

static void clkLow(void){
	PORTB &= 0b10111111;
  d6:	86 b1       	in	r24, 0x06	; 6
  d8:	8f 7b       	andi	r24, 0xBF	; 191
  da:	86 b9       	out	0x06, r24	; 6
  dc:	08 95       	ret

000000de <clkHigh>:
}

static void clkHigh(void){
	PORTB |= 0b01000000;
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	86 b9       	out	0x06, r24	; 6
  e4:	08 95       	ret

000000e6 <sdaLow>:
}

static void sdaLow(void){
	PORTB &= 0b01111111;
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	86 b9       	out	0x06, r24	; 6
  ec:	08 95       	ret

000000ee <sdaHigh>:
}

static void sdaHigh(void){
	PORTB |= 0b10000000;
  ee:	86 b1       	in	r24, 0x06	; 6
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	86 b9       	out	0x06, r24	; 6
  f4:	08 95       	ret

000000f6 <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
  f6:	fb df       	rcall	.-10     	; 0xee <sdaHigh>
	clkHigh();
  f8:	f2 df       	rcall	.-28     	; 0xde <clkHigh>
  fa:	81 e1       	ldi	r24, 0x11	; 17
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <initI2C+0x6>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	d8 2f       	mov	r29, r24
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//start condition
	sdaLow();
 10a:	ed df       	rcall	.-38     	; 0xe6 <sdaLow>
 10c:	81 e1       	ldi	r24, 0x11	; 17
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <sendI2C+0xa>
 112:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 114:	e0 df       	rcall	.-64     	; 0xd6 <clkLow>
 116:	81 e1       	ldi	r24, 0x11	; 17
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <sendI2C+0x14>
 11c:	00 00       	nop
	_delay_us(I2CSpeed);
	
	//send input
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	11 c0       	rjmp	.+34     	; 0x144 <sendI2C+0x40>
		result = shift & mask;
		if(result == 0x01){
 122:	d0 ff       	sbrs	r29, 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <sendI2C+0x26>
			sdaHigh();
 126:	e3 df       	rcall	.-58     	; 0xee <sdaHigh>
 128:	01 c0       	rjmp	.+2      	; 0x12c <sendI2C+0x28>
		}
		else{
			sdaLow();
 12a:	dd df       	rcall	.-70     	; 0xe6 <sdaLow>
		}
		clkHigh();
 12c:	d8 df       	rcall	.-80     	; 0xde <clkHigh>
 12e:	81 e1       	ldi	r24, 0x11	; 17
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <sendI2C+0x2c>
 134:	00 00       	nop
		_delay_us(I2CSpeed);
		clkLow();
 136:	cf df       	rcall	.-98     	; 0xd6 <clkLow>
 138:	81 e1       	ldi	r24, 0x11	; 17
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <sendI2C+0x36>
 13e:	00 00       	nop
		_delay_us(I2CSpeed);
		shift = (shift >> 1);	//shift right by one
 140:	d6 95       	lsr	r29
	clkLow();
	_delay_us(I2CSpeed);
	
	//send input
	shift = input;
	for(uint8_t index = 0; index < 8; index++){
 142:	cf 5f       	subi	r28, 0xFF	; 255
 144:	c8 30       	cpi	r28, 0x08	; 8
 146:	68 f3       	brcs	.-38     	; 0x122 <sendI2C+0x1e>
		clkLow();
		_delay_us(I2CSpeed);
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaLow();
 148:	ce df       	rcall	.-100    	; 0xe6 <sdaLow>
	clkHigh();
 14a:	c9 df       	rcall	.-110    	; 0xde <clkHigh>
 14c:	81 e1       	ldi	r24, 0x11	; 17
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <sendI2C+0x4a>
 152:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 154:	c0 df       	rcall	.-128    	; 0xd6 <clkLow>
 156:	81 e1       	ldi	r24, 0x11	; 17
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <sendI2C+0x54>
 15c:	00 00       	nop
	_delay_us(I2CSpeed);
	sdaHigh();
 15e:	c7 df       	rcall	.-114    	; 0xee <sdaHigh>
 160:	81 e1       	ldi	r24, 0x11	; 17
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <sendI2C+0x5e>
 166:	00 00       	nop
	_delay_us(I2CSpeed);

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <finishCom>:

void finishCom(){
	// finish communication
	sdaHigh();
 16e:	bf df       	rcall	.-130    	; 0xee <sdaHigh>
	clkHigh();
 170:	b6 df       	rcall	.-148    	; 0xde <clkHigh>
 172:	81 e1       	ldi	r24, 0x11	; 17
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <finishCom+0x6>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	d6 2f       	mov	r29, r22
 182:	c4 2f       	mov	r28, r20
	sendI2C(chipAddress);
 184:	bf df       	rcall	.-130    	; 0x104 <sendI2C>
	sendI2C(subAddress);
 186:	8d 2f       	mov	r24, r29
 188:	bd df       	rcall	.-134    	; 0x104 <sendI2C>
	sendI2C(data);
 18a:	8c 2f       	mov	r24, r28
 18c:	bb df       	rcall	.-138    	; 0x104 <sendI2C>
	finishCom();
 18e:	ef df       	rcall	.-34     	; 0x16e <finishCom>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0xff;	//output
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;	//Set pull ups
 19a:	83 b9       	out	0x03, r24	; 3
	PORTA = 0xff;	//write zero
 19c:	82 b9       	out	0x02, r24	; 2
	
	//PORT B
	DDRB = 0b11000000;	//output
 19e:	90 ec       	ldi	r25, 0xC0	; 192
 1a0:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 1a2:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b11000000;	//write zero
 1a4:	96 b9       	out	0x06, r25	; 6
	
	//PORT C
	DDRC = 0b11000000;	//output
 1a6:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 1a8:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b11000000;	//write zero
 1aa:	9a b9       	out	0x0a, r25	; 10
 1ac:	08 95       	ret

000001ae <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving of
 1ae:	e4 e6       	ldi	r30, 0x64	; 100
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 1c2:	ad e7       	ldi	r26, 0x7D	; 125
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	8c 91       	ld	r24, X
 1c8:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 1ca:	80 81       	ld	r24, Z
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 1d0:	eb e7       	ldi	r30, 0x7B	; 123
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA	|= ADCReadPin;		
 1dc:	ec e7       	ldi	r30, 0x7C	; 124
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	90 81       	ld	r25, Z
 1e2:	89 2b       	or	r24, r25
 1e4:	80 83       	st	Z, r24
	ADMUXB	&= 0b11111110;		
 1e6:	ed e7       	ldi	r30, 0x7D	; 125
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	8e 7f       	andi	r24, 0xFE	; 254
 1ee:	80 83       	st	Z, r24
	ADCSRA	|= 0b01000000;		//ADSC on
 1f0:	ea e7       	ldi	r30, 0x7A	; 122
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	80 83       	st	Z, r24
	return ADCH;
 1fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 1fe:	08 95       	ret

00000200 <main>:
#include "Display/Display.h"

int main(void)
{
	//IO
	initIO();
 200:	ca df       	rcall	.-108    	; 0x196 <initIO>
	
	//ADC
	initADC();
 202:	d5 df       	rcall	.-86     	; 0x1ae <initADC>
	
	//I2C
	initI2C();
 204:	78 df       	rcall	.-272    	; 0xf6 <initI2C>
	
	//display
	initDisplay();
 206:	27 df       	rcall	.-434    	; 0x56 <initDisplay>
	uint8_t treble = 0x00;
	
    while (1) 
    {
		//read inputs
		gain = ReadADCPinValue(0b00001000);		//PB0
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	e8 df       	rcall	.-48     	; 0x1dc <ReadADCPinValue>
		bass = ReadADCPinValue(0b00001011);		//PB3
 20c:	8b e0       	ldi	r24, 0x0B	; 11
 20e:	e6 df       	rcall	.-52     	; 0x1dc <ReadADCPinValue>
		midRange = ReadADCPinValue(0b00001100);	//PB4
 210:	8c e0       	ldi	r24, 0x0C	; 12
 212:	e4 df       	rcall	.-56     	; 0x1dc <ReadADCPinValue>
		treble = ReadADCPinValue(0b00001101);	//PB5
 214:	8d e0       	ldi	r24, 0x0D	; 13
 216:	e2 df       	rcall	.-60     	; 0x1dc <ReadADCPinValue>
		
		//Volume -> rotary encoder
		
		//TDA update
		//debug
		setTDAValue(0b10000000, 0b00000000, 0b00000000);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	ae df       	rcall	.-164    	; 0x17c <setTDAValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	83 ec       	ldi	r24, 0xC3	; 195
 222:	99 e0       	ldi	r25, 0x09	; 9
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x24>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x2a>
 22a:	00 00       	nop
 22c:	ed cf       	rjmp	.-38     	; 0x208 <main+0x8>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
