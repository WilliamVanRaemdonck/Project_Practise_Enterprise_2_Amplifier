
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080016e  0080016e  000006d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191c  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae1  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7b  00000000  00000000  00002c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000037f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b44  00000000  00000000  0000410b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	9b c2       	rjmp	.+1334   	; 0x54a <__vector_9>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ed       	ldi	r30, 0xD2	; 210
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 36       	cpi	r26, 0x6E	; 110
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e6       	ldi	r26, 0x6E	; 110
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 38       	cpi	r26, 0x8E	; 142
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	f4 d1       	rcall	.+1000   	; 0x450 <main>
  68:	b2 c2       	rjmp	.+1380   	; 0x5ce <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <setRS>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8a b9       	out	0x0a, r24	; 10
  72:	08 95       	ret

00000074 <clearRS>:
  74:	8a b1       	in	r24, 0x0a	; 10
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	8a b9       	out	0x0a, r24	; 10
  7a:	08 95       	ret

0000007c <setEnable>:
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8a b9       	out	0x0a, r24	; 10
  82:	08 95       	ret

00000084 <clearEnable>:
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	08 95       	ret

0000008c <sendByte>:
  8c:	82 b9       	out	0x02, r24	; 2
  8e:	f6 df       	rcall	.-20     	; 0x7c <setEnable>
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <sendByte+0x6>
  96:	00 c0       	rjmp	.+0      	; 0x98 <sendByte+0xc>
  98:	f5 df       	rcall	.-22     	; 0x84 <clearEnable>
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <sendByte+0x10>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <sendByte+0x16>
  a2:	f0 df       	rcall	.-32     	; 0x84 <clearEnable>
  a4:	e7 df       	rcall	.-50     	; 0x74 <clearRS>
  a6:	12 b8       	out	0x02, r1	; 2
  a8:	08 95       	ret

000000aa <sendNibble>:
  aa:	cf 93       	push	r28
  ac:	89 35       	cpi	r24, 0x59	; 89
  ae:	31 f0       	breq	.+12     	; 0xbc <sendNibble+0x12>
  b0:	98 2f       	mov	r25, r24
  b2:	90 7f       	andi	r25, 0xF0	; 240
  b4:	c8 2f       	mov	r28, r24
  b6:	c2 95       	swap	r28
  b8:	c0 7f       	andi	r28, 0xF0	; 240
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <sendNibble+0x16>
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	92 b9       	out	0x02, r25	; 2
  c2:	dc df       	rcall	.-72     	; 0x7c <setEnable>
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <sendNibble+0x1c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <sendNibble+0x22>
  cc:	db df       	rcall	.-74     	; 0x84 <clearEnable>
  ce:	80 e1       	ldi	r24, 0x10	; 16
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <sendNibble+0x26>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <sendNibble+0x2c>
  d6:	c2 b9       	out	0x02, r28	; 2
  d8:	d1 df       	rcall	.-94     	; 0x7c <setEnable>
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <sendNibble+0x32>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <sendNibble+0x38>
  e2:	d0 df       	rcall	.-96     	; 0x84 <clearEnable>
  e4:	80 e1       	ldi	r24, 0x10	; 16
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <sendNibble+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <sendNibble+0x42>
  ec:	cb df       	rcall	.-106    	; 0x84 <clearEnable>
  ee:	c2 df       	rcall	.-124    	; 0x74 <clearRS>
  f0:	12 b8       	out	0x02, r1	; 2
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <cursorHome>:
	sendNibble(CLEAR_DISPLAY);	// clear display
	_delay_ms(2);	//>1.67ms
}

void cursorHome(void){
	sendNibble(RETURN_HOME);	// return home
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	d8 df       	rcall	.-80     	; 0xaa <sendNibble>
  fa:	83 ef       	ldi	r24, 0xF3	; 243
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <cursorHome+0x8>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <writeToDisplay>:

	writeToDisplay(barStr, strlen(barStr), 0xc0);
	writeToDisplay(muxStr, strlen(muxStr), 0xd4);
}

void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	7c 01       	movw	r14, r24
 116:	06 2f       	mov	r16, r22
 118:	14 2f       	mov	r17, r20
	uint8_t address = DDRAMaddress;
	cursorHome();
 11a:	ed df       	rcall	.-38     	; 0xf6 <cursorHome>
	for(int i = 0; i < length;i++){
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	0b c0       	rjmp	.+22     	; 0x138 <writeToDisplay+0x30>
		sendNibble(address);		//address = 0 DDRAM
 122:	81 2f       	mov	r24, r17
 124:	c2 df       	rcall	.-124    	; 0xaa <sendNibble>
		//_delay_ms(2);	//>1.67ms	//tested not neccesary
		
		setRS();
 126:	a2 df       	rcall	.-188    	; 0x6c <setRS>
		sendNibble(data[i]);
 128:	f7 01       	movw	r30, r14
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	80 81       	ld	r24, Z
 130:	bc df       	rcall	.-136    	; 0xaa <sendNibble>
		clearRS();
 132:	a0 df       	rcall	.-192    	; 0x74 <clearRS>
		
		address++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
}

void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
	uint8_t address = DDRAMaddress;
	cursorHome();
	for(int i = 0; i < length;i++){
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	80 2f       	mov	r24, r16
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	c8 17       	cp	r28, r24
 13e:	d9 07       	cpc	r29, r25
 140:	84 f3       	brlt	.-32     	; 0x122 <writeToDisplay+0x1a>
		clearRS();
		
		address++;
	}
	address = DDRAMaddress;
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <updateDisplay>:
	
	writeToDisplay(volStrText, strlen(volStrText), 0x80);
	writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
}

void updateDisplay(uint8_t displayValueF, uint8_t mux){
 150:	46 2f       	mov	r20, r22
	//2 ??????_______________	address: 0xc0
	//3 INPUT:					address: 0x94
	//4 [] [] [?] []			address: 0xd4

	// volume string
	bars = displayValueF / 12; // 0 - 255 => 0 - 20 => / 12.75 ~ 13
 152:	6c e0       	ldi	r22, 0x0C	; 12
 154:	30 d2       	rcall	.+1120   	; 0x5b6 <__udivmodqi4>
 156:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <bars>
	blanks = 20 - bars;
 15a:	94 e1       	ldi	r25, 0x14	; 20
 15c:	98 1b       	sub	r25, r24
 15e:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <__data_end>
	//assemble string
	strcpy(barStr, "");
 162:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <barStr>
	for(int i = 0; i < bars; i++){
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	0c c0       	rjmp	.+24     	; 0x184 <updateDisplay+0x34>
		strcat(barStr, "Y");
 16c:	e8 e7       	ldi	r30, 0x78	; 120
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	01 90       	ld	r0, Z+
 172:	00 20       	and	r0, r0
 174:	e9 f7       	brne	.-6      	; 0x170 <updateDisplay+0x20>
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	89 e5       	ldi	r24, 0x59	; 89
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	91 83       	std	Z+1, r25	; 0x01
 17e:	80 83       	st	Z, r24
	// volume string
	bars = displayValueF / 12; // 0 - 255 => 0 - 20 => / 12.75 ~ 13
	blanks = 20 - bars;
	//assemble string
	strcpy(barStr, "");
	for(int i = 0; i < bars; i++){
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	3f 4f       	sbci	r19, 0xFF	; 255
 184:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <bars>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	28 17       	cp	r18, r24
 18c:	39 07       	cpc	r19, r25
 18e:	74 f3       	brlt	.-36     	; 0x16c <updateDisplay+0x1c>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	0c c0       	rjmp	.+24     	; 0x1ae <updateDisplay+0x5e>
		strcat(barStr, "Y");
	}
	for(int i = 0; i < blanks; i++){
		strcat(barStr, "_");
 196:	e8 e7       	ldi	r30, 0x78	; 120
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	01 90       	ld	r0, Z+
 19c:	00 20       	and	r0, r0
 19e:	e9 f7       	brne	.-6      	; 0x19a <updateDisplay+0x4a>
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	8f e5       	ldi	r24, 0x5F	; 95
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24
	//assemble string
	strcpy(barStr, "");
	for(int i = 0; i < bars; i++){
		strcat(barStr, "Y");
	}
	for(int i = 0; i < blanks; i++){
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	28 17       	cp	r18, r24
 1b6:	39 07       	cpc	r19, r25
 1b8:	74 f3       	brlt	.-36     	; 0x196 <updateDisplay+0x46>
		strcat(barStr, "_");
	}
	
	//mux string
	muxStr = muxTable[mux];
 1ba:	e4 2f       	mov	r30, r20
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	91 81       	ldd	r25, Z+1	; 0x01
 1ca:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <muxStr+0x1>
 1ce:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <muxStr>

	writeToDisplay(barStr, strlen(barStr), 0xc0);
 1d2:	e8 e7       	ldi	r30, 0x78	; 120
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	01 90       	ld	r0, Z+
 1d8:	00 20       	and	r0, r0
 1da:	e9 f7       	brne	.-6      	; 0x1d6 <updateDisplay+0x86>
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	bf 01       	movw	r22, r30
 1e0:	68 57       	subi	r22, 0x78	; 120
 1e2:	71 40       	sbci	r23, 0x01	; 1
 1e4:	40 ec       	ldi	r20, 0xC0	; 192
 1e6:	88 e7       	ldi	r24, 0x78	; 120
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	8e df       	rcall	.-228    	; 0x108 <writeToDisplay>
	writeToDisplay(muxStr, strlen(muxStr), 0xd4);
 1ec:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <muxStr>
 1f0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <muxStr+0x1>
 1f4:	fc 01       	movw	r30, r24
 1f6:	01 90       	ld	r0, Z+
 1f8:	00 20       	and	r0, r0
 1fa:	e9 f7       	brne	.-6      	; 0x1f6 <updateDisplay+0xa6>
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	bf 01       	movw	r22, r30
 200:	68 1b       	sub	r22, r24
 202:	79 0b       	sbc	r23, r25
 204:	44 ed       	ldi	r20, 0xD4	; 212
 206:	80 df       	rcall	.-256    	; 0x108 <writeToDisplay>
 208:	08 95       	ret

0000020a <initDisplay>:
uint8_t bars = 0;
uint8_t blanks = 0;

void initDisplay(void){
	//init
	setRS();
 20a:	30 df       	rcall	.-416    	; 0x6c <setRS>
	setEnable();
 20c:	37 df       	rcall	.-402    	; 0x7c <setEnable>
	PORTA = 0x00;
 20e:	12 b8       	out	0x02, r1	; 2
 210:	83 ed       	ldi	r24, 0xD3	; 211
 212:	90 e3       	ldi	r25, 0x30	; 48
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <initDisplay+0xa>
 218:	00 c0       	rjmp	.+0      	; 0x21a <initDisplay+0x10>
 21a:	00 00       	nop
	//power on delay
	_delay_ms(50);
	
	clearEnable();
 21c:	33 df       	rcall	.-410    	; 0x84 <clearEnable>
	clearRS();
 21e:	2a df       	rcall	.-428    	; 0x74 <clearRS>
	//send function set 3 times
	sendByte(0b00110000);//Function set
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	34 df       	rcall	.-408    	; 0x8c <sendByte>
 224:	81 ee       	ldi	r24, 0xE1	; 225
 226:	94 e0       	ldi	r25, 0x04	; 4
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <initDisplay+0x1e>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <initDisplay+0x24>
 22e:	00 00       	nop
	_delay_ms(5);	//>4.1
	
	sendByte(0b00110000);//Function set
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	2c df       	rcall	.-424    	; 0x8c <sendByte>
 234:	83 ef       	ldi	r24, 0xF3	; 243
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <initDisplay+0x2e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <initDisplay+0x34>
 23e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00110000);//Function set
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	24 df       	rcall	.-440    	; 0x8c <sendByte>
 244:	83 ef       	ldi	r24, 0xF3	; 243
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <initDisplay+0x3e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <initDisplay+0x44>
 24e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00100000);//Function set	- 4bit mode
 250:	80 e2       	ldi	r24, 0x20	; 32
 252:	1c df       	rcall	.-456    	; 0x8c <sendByte>
 254:	83 ef       	ldi	r24, 0xF3	; 243
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <initDisplay+0x4e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <initDisplay+0x54>
 25e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(FUNCTION_SET);	// interface length and Character font	- 4 bit en 5*8
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	23 df       	rcall	.-442    	; 0xaa <sendNibble>
 264:	83 ef       	ldi	r24, 0xF3	; 243
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <initDisplay+0x5e>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <initDisplay+0x64>
 26e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CURSOR_ON_BLINK);// display on, cursor on, blink on
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	1b df       	rcall	.-458    	; 0xaa <sendNibble>
 274:	83 ef       	ldi	r24, 0xF3	; 243
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <initDisplay+0x6e>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <initDisplay+0x74>
 27e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CLEAR_DISPLAY);	// clear display
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	13 df       	rcall	.-474    	; 0xaa <sendNibble>
 284:	83 ef       	ldi	r24, 0xF3	; 243
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <initDisplay+0x7e>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <initDisplay+0x84>
 28e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(ENTRY_MODE);		// ready to write
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	0b df       	rcall	.-490    	; 0xaa <sendNibble>
 294:	83 ef       	ldi	r24, 0xF3	; 243
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <initDisplay+0x8e>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <initDisplay+0x94>
 29e:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(RETURN_HOME);	// return home
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	03 df       	rcall	.-506    	; 0xaa <sendNibble>
 2a4:	83 ef       	ldi	r24, 0xF3	; 243
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <initDisplay+0x9e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <initDisplay+0xa4>
 2ae:	00 00       	nop
 2b0:	9f e3       	ldi	r25, 0x3F	; 63
 2b2:	2d e0       	ldi	r18, 0x0D	; 13
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	91 50       	subi	r25, 0x01	; 1
 2b8:	20 40       	sbci	r18, 0x00	; 0
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <initDisplay+0xac>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <initDisplay+0xb6>
 2c0:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	_delay_ms(1000);
	
	writeToDisplay(volStrText, strlen(volStrText), 0x80);
 2c2:	e8 e0       	ldi	r30, 0x08	; 8
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	01 90       	ld	r0, Z+
 2c8:	00 20       	and	r0, r0
 2ca:	e9 f7       	brne	.-6      	; 0x2c6 <initDisplay+0xbc>
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	bf 01       	movw	r22, r30
 2d0:	68 50       	subi	r22, 0x08	; 8
 2d2:	71 40       	sbci	r23, 0x01	; 1
 2d4:	40 e8       	ldi	r20, 0x80	; 128
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	16 df       	rcall	.-468    	; 0x108 <writeToDisplay>
	writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
 2dc:	e3 e1       	ldi	r30, 0x13	; 19
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	01 90       	ld	r0, Z+
 2e2:	00 20       	and	r0, r0
 2e4:	e9 f7       	brne	.-6      	; 0x2e0 <initDisplay+0xd6>
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	bf 01       	movw	r22, r30
 2ea:	63 51       	subi	r22, 0x13	; 19
 2ec:	71 40       	sbci	r23, 0x01	; 1
 2ee:	44 e9       	ldi	r20, 0x94	; 148
 2f0:	83 e1       	ldi	r24, 0x13	; 19
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	09 df       	rcall	.-494    	; 0x108 <writeToDisplay>
 2f6:	08 95       	ret

000002f8 <clkLow>:
	clkLow();
	_delay_us(I2CSpeed);
}

void clkLow(void){
	PORTB &= 0b10111111;
 2f8:	86 b1       	in	r24, 0x06	; 6
 2fa:	8f 7b       	andi	r24, 0xBF	; 191
 2fc:	86 b9       	out	0x06, r24	; 6
 2fe:	08 95       	ret

00000300 <clkHigh>:
}

void clkHigh(void){
	PORTB |= 0b01000000;
 300:	86 b1       	in	r24, 0x06	; 6
 302:	80 64       	ori	r24, 0x40	; 64
 304:	86 b9       	out	0x06, r24	; 6
 306:	08 95       	ret

00000308 <clkPulse>:
	sdaHigh();
	_delay_us(I2CSpeed);
}

void clkPulse(void){
	clkHigh();
 308:	fb df       	rcall	.-10     	; 0x300 <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	81 e2       	ldi	r24, 0x21	; 33
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <clkPulse+0x4>
 310:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 312:	f2 df       	rcall	.-28     	; 0x2f8 <clkLow>
 314:	81 e2       	ldi	r24, 0x21	; 33
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <clkPulse+0xe>
 31a:	00 00       	nop
 31c:	08 95       	ret

0000031e <sdaLow>:
void clkHigh(void){
	PORTB |= 0b01000000;
}

void sdaLow(void){
	PORTB &= 0b01111111;
 31e:	86 b1       	in	r24, 0x06	; 6
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	86 b9       	out	0x06, r24	; 6
 324:	08 95       	ret

00000326 <startCom>:
	clkPulse();
}

void startCom(void){
	//start condition
	sdaLow();
 326:	fb df       	rcall	.-10     	; 0x31e <sdaLow>
 328:	81 e2       	ldi	r24, 0x21	; 33
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <startCom+0x4>
 32e:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 330:	e3 df       	rcall	.-58     	; 0x2f8 <clkLow>
 332:	81 e2       	ldi	r24, 0x21	; 33
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <startCom+0xe>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <sdaHigh>:
void sdaLow(void){
	PORTB &= 0b01111111;
}

void sdaHigh(void){
	PORTB |= 0b10000000;
 33c:	86 b1       	in	r24, 0x06	; 6
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	86 b9       	out	0x06, r24	; 6
 342:	08 95       	ret

00000344 <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
 344:	fb df       	rcall	.-10     	; 0x33c <sdaHigh>
	clkHigh();
 346:	dc df       	rcall	.-72     	; 0x300 <clkHigh>
 348:	81 e2       	ldi	r24, 0x21	; 33
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <initI2C+0x6>
 34e:	00 00       	nop
 350:	08 95       	ret

00000352 <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
 356:	d3 d0       	rcall	.+422    	; 0x4fe <reverse>
 358:	d8 2f       	mov	r29, r24
	for(uint8_t index = 0; index < 8; index++){
 35a:	c0 e0       	ldi	r28, 0x00	; 0
 35c:	08 c0       	rjmp	.+16     	; 0x36e <sendI2C+0x1c>
		result = shift & mask;
		if(result == 0x01){
 35e:	d0 ff       	sbrs	r29, 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <sendI2C+0x14>
			sdaHigh();
 362:	ec df       	rcall	.-40     	; 0x33c <sdaHigh>
 364:	01 c0       	rjmp	.+2      	; 0x368 <sendI2C+0x16>
		}
		else{
			sdaLow();
 366:	db df       	rcall	.-74     	; 0x31e <sdaLow>
		}
		clkPulse();
 368:	cf df       	rcall	.-98     	; 0x308 <clkPulse>
		shift = (shift >> 1);	//shift right by one
 36a:	d6 95       	lsr	r29
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
	for(uint8_t index = 0; index < 8; index++){
 36c:	cf 5f       	subi	r28, 0xFF	; 255
 36e:	c8 30       	cpi	r28, 0x08	; 8
 370:	b0 f3       	brcs	.-20     	; 0x35e <sendI2C+0xc>
		}
		clkPulse();
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaHigh();	//sdalow ?
 372:	e4 df       	rcall	.-56     	; 0x33c <sdaHigh>
	clkPulse();
 374:	c9 df       	rcall	.-110    	; 0x308 <clkPulse>
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <finishCom>:
	_delay_us(I2CSpeed);
}

void finishCom(){
	// finish communication
	clkHigh();
 37c:	c1 df       	rcall	.-126    	; 0x300 <clkHigh>
 37e:	81 e2       	ldi	r24, 0x21	; 33
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <finishCom+0x4>
 384:	00 00       	nop
	_delay_us(I2CSpeed);
	sdaHigh();
 386:	da df       	rcall	.-76     	; 0x33c <sdaHigh>
 388:	81 e2       	ldi	r24, 0x21	; 33
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <finishCom+0xe>
 38e:	00 00       	nop
 390:	08 95       	ret

00000392 <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	18 2f       	mov	r17, r24
 39a:	d6 2f       	mov	r29, r22
 39c:	c4 2f       	mov	r28, r20
	startCom();
 39e:	c3 df       	rcall	.-122    	; 0x326 <startCom>
	sendI2C(chipAddress);
 3a0:	81 2f       	mov	r24, r17
 3a2:	d7 df       	rcall	.-82     	; 0x352 <sendI2C>
	sendI2C(subAddress);
 3a4:	8d 2f       	mov	r24, r29
 3a6:	d5 df       	rcall	.-86     	; 0x352 <sendI2C>
	sendI2C(data);
 3a8:	8c 2f       	mov	r24, r28
 3aa:	d3 df       	rcall	.-90     	; 0x352 <sendI2C>
	finishCom();
 3ac:	e7 df       	rcall	.-50     	; 0x37c <finishCom>
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	08 95       	ret

000003b6 <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0b11111110;	//output
 3b6:	8e ef       	ldi	r24, 0xFE	; 254
 3b8:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;		//Set pull ups
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	83 b9       	out	0x03, r24	; 3
	PORTA = 0x00;		//write zero
 3be:	12 b8       	out	0x02, r1	; 2
	
	//PORT B
	DDRB = 0b11000000;	//output
 3c0:	90 ec       	ldi	r25, 0xC0	; 192
 3c2:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 3c4:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b00000000;	//write zero
 3c6:	16 b8       	out	0x06, r1	; 6
	
	//PORT C
	DDRC = 0b11000000;	//output
 3c8:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 3ca:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b00000000;	//write zero
 3cc:	1a b8       	out	0x0a, r1	; 10
 3ce:	08 95       	ret

000003d0 <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving off
 3d0:	e4 e6       	ldi	r30, 0x64	; 100
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	8e 7f       	andi	r24, 0xFE	; 254
 3d8:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 3da:	ea e7       	ldi	r30, 0x7A	; 122
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 3e4:	ad e7       	ldi	r26, 0x7D	; 125
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	8c 91       	ld	r24, X
 3ea:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 3ec:	80 81       	ld	r24, Z
 3ee:	84 60       	ori	r24, 0x04	; 4
 3f0:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 3f2:	eb e7       	ldi	r30, 0x7B	; 123
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	88 60       	ori	r24, 0x08	; 8
 3fa:	80 83       	st	Z, r24
 3fc:	08 95       	ret

000003fe <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA	|= ADCReadPin;
 3fe:	ec e7       	ldi	r30, 0x7C	; 124
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	90 81       	ld	r25, Z
 404:	89 2b       	or	r24, r25
 406:	80 83       	st	Z, r24
	ADMUXB	&= 0b11111110;
 408:	ed e7       	ldi	r30, 0x7D	; 125
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	8e 7f       	andi	r24, 0xFE	; 254
 410:	80 83       	st	Z, r24
	ADCSRA	|= 0b01000000;		//ADSC on
 412:	ea e7       	ldi	r30, 0x7A	; 122
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	80 64       	ori	r24, 0x40	; 64
 41a:	80 83       	st	Z, r24
	return ADCH;
 41c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 420:	08 95       	ret

00000422 <initTimer1>:

//-----------------------------------------------------------------------------------------	Timer1
void initTimer1(void){
	PRR	   &= 0b11110111;						//power saving off
 422:	e4 e6       	ldi	r30, 0x64	; 100
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	87 7f       	andi	r24, 0xF7	; 247
 42a:	80 83       	st	Z, r24

	TCCR1B |= (1 << WGM12 );					// Configure timer 1 for CTC mode
 42c:	e1 e8       	ldi	r30, 0x81	; 129
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	88 60       	ori	r24, 0x08	; 8
 434:	80 83       	st	Z, r24
	OCR1A = 0;
 436:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 43a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
	
	TIMSK1 |= (1 << OCIE1A );					// Enable CTC interrupt
 43e:	af e6       	ldi	r26, 0x6F	; 111
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	8c 91       	ld	r24, X
 444:	82 60       	ori	r24, 0x02	; 2
 446:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11 ) | (1 << CS10 );		// prescaler of 64
 448:	80 81       	ld	r24, Z
 44a:	83 60       	ori	r24, 0x03	; 3
 44c:	80 83       	st	Z, r24
 44e:	08 95       	ret

00000450 <main>:
uint8_t dispValue = 0x00;

int main(void)
{
	//IO
	initIO();
 450:	b2 df       	rcall	.-156    	; 0x3b6 <initIO>
	
	//ADC
	initADC();
 452:	be df       	rcall	.-132    	; 0x3d0 <initADC>
	
	//I2C
	initI2C();
 454:	77 df       	rcall	.-274    	; 0x344 <initI2C>
	
	//DISPLAY
	initDisplay();
 456:	d9 de       	rcall	.-590    	; 0x20a <initDisplay>
	
	//TIMER1
	initTimer1();
 458:	e4 df       	rcall	.-56     	; 0x422 <initTimer1>
	
	//ENABLE INTERRUPTS
	sei();
 45a:	78 94       	sei
	
	while (1)
	{
		//read inputs
		gain = ReadADCPinValue(0b00001000);		//PB0
 45c:	88 e0       	ldi	r24, 0x08	; 8
 45e:	cf df       	rcall	.-98     	; 0x3fe <ReadADCPinValue>
 460:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <gain>
		bass = ReadADCPinValue(0b00001011);		//PB3
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	cb df       	rcall	.-106    	; 0x3fe <ReadADCPinValue>
 468:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <bass>
		midRange = ReadADCPinValue(0b00001100);	//PB4
 46c:	8c e0       	ldi	r24, 0x0C	; 12
 46e:	c7 df       	rcall	.-114    	; 0x3fe <ReadADCPinValue>
 470:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <midRange>
		treble = ReadADCPinValue(0b00001101);	//PB5
 474:	8d e0       	ldi	r24, 0x0D	; 13
 476:	c3 df       	rcall	.-122    	; 0x3fe <ReadADCPinValue>
 478:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <treble>
		
		//mux PC2 PC3 PC4 PC5
		muxInput = PORTC;
 47c:	8a b1       	in	r24, 0x0a	; 10
		muxInput = muxInput & 0b00111100;
 47e:	8c 73       	andi	r24, 0x3C	; 60
 480:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <muxInput>
		switch (muxInput)
 484:	88 30       	cpi	r24, 0x08	; 8
 486:	61 f0       	breq	.+24     	; 0x4a0 <main+0x50>
 488:	18 f4       	brcc	.+6      	; 0x490 <main+0x40>
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	31 f0       	breq	.+12     	; 0x49a <main+0x4a>
 48e:	13 c0       	rjmp	.+38     	; 0x4b6 <main+0x66>
 490:	80 31       	cpi	r24, 0x10	; 16
 492:	51 f0       	breq	.+20     	; 0x4a8 <main+0x58>
 494:	80 32       	cpi	r24, 0x20	; 32
 496:	61 f0       	breq	.+24     	; 0x4b0 <main+0x60>
 498:	0e c0       	rjmp	.+28     	; 0x4b6 <main+0x66>
		{
			case 0b00000100:
			mux = 0x00;
 49a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <mux>
			break;
 49e:	0b c0       	rjmp	.+22     	; 0x4b6 <main+0x66>
			case 0b00001000:
			mux = 0x01;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <mux>
			break;
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <main+0x66>
			case 0b00010000:
			mux = 0x02;
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <mux>
			break;
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <main+0x66>
			case 0b00100000:
			mux = 0x03;
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <mux>
			break;
		}
		
		//TDA update
		setTDAValue(CHIP_ADDRESS, SubAdr_Input_selector, mux);
 4b6:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <mux>
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	88 e8       	ldi	r24, 0x88	; 136
 4be:	69 df       	rcall	.-302    	; 0x392 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Input_gain, gain);
 4c0:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <gain>
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	88 e8       	ldi	r24, 0x88	; 136
 4c8:	64 df       	rcall	.-312    	; 0x392 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Volume, volume);
 4ca:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <volume>
 4ce:	62 e0       	ldi	r22, 0x02	; 2
 4d0:	88 e8       	ldi	r24, 0x88	; 136
 4d2:	5f df       	rcall	.-322    	; 0x392 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Bass_gain, bass);
 4d4:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <bass>
 4d8:	63 e0       	ldi	r22, 0x03	; 3
 4da:	88 e8       	ldi	r24, 0x88	; 136
 4dc:	5a df       	rcall	.-332    	; 0x392 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Mid_range_gain, midRange);
 4de:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <midRange>
 4e2:	64 e0       	ldi	r22, 0x04	; 4
 4e4:	88 e8       	ldi	r24, 0x88	; 136
 4e6:	55 df       	rcall	.-342    	; 0x392 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Treble_gain, treble);
 4e8:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <treble>
 4ec:	65 e0       	ldi	r22, 0x05	; 5
 4ee:	88 e8       	ldi	r24, 0x88	; 136
 4f0:	50 df       	rcall	.-352    	; 0x392 <setTDAValue>
		
		//Display update -> parallel
		updateDisplay(volume, mux);
 4f2:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <mux>
 4f6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <volume>
 4fa:	2a de       	rcall	.-940    	; 0x150 <updateDisplay>
		/*
		for(int i = 0; i < 4;i++){
		updateDisplay((i*50), i);
		}*/
	}
 4fc:	af cf       	rjmp	.-162    	; 0x45c <main+0xc>

000004fe <reverse>:
	//TCCR1B |= (1 << CS00 );						// no prescaling
}

//-----------------------------------------------------------------------------------------	MISC
uint8_t reverse(uint8_t b) {
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 4fe:	28 2f       	mov	r18, r24
 500:	22 95       	swap	r18
 502:	2f 70       	andi	r18, 0x0F	; 15
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	82 95       	swap	r24
 508:	92 95       	swap	r25
 50a:	90 7f       	andi	r25, 0xF0	; 240
 50c:	98 27       	eor	r25, r24
 50e:	80 7f       	andi	r24, 0xF0	; 240
 510:	98 27       	eor	r25, r24
 512:	92 2f       	mov	r25, r18
 514:	98 2b       	or	r25, r24
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 516:	29 2f       	mov	r18, r25
 518:	2c 7c       	andi	r18, 0xCC	; 204
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	35 95       	asr	r19
 51e:	27 95       	ror	r18
 520:	35 95       	asr	r19
 522:	27 95       	ror	r18
 524:	93 73       	andi	r25, 0x33	; 51
 526:	89 2f       	mov	r24, r25
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	82 2b       	or	r24, r18
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 534:	28 2f       	mov	r18, r24
 536:	2a 7a       	andi	r18, 0xAA	; 170
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	35 95       	asr	r19
 53c:	27 95       	ror	r18
 53e:	85 75       	andi	r24, 0x55	; 85
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
	return b;
}
 546:	82 2b       	or	r24, r18
 548:	08 95       	ret

0000054a <__vector_9>:

//-----------------------------------------------------------------------------------------	ISR
ISR(TIMER1_COMPA_vect, ISR_BLOCK){
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
	/*
	0x00	READ
	0x01	IDLE	*/

	// Toggle LED on each interrupt
	PORTA ^= 1 << PORTA1;
 558:	92 b1       	in	r25, 0x02	; 2
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	89 27       	eor	r24, r25
 55e:	82 b9       	out	0x02, r24	; 2

	//rotary encoder
	switch (volumeSwitchState)
 560:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <volumeSwitchState.1826>
 564:	88 23       	and	r24, r24
 566:	19 f0       	breq	.+6      	; 0x56e <__vector_9+0x24>
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	d9 f0       	breq	.+54     	; 0x5a2 <__vector_9+0x58>
 56c:	1d c0       	rjmp	.+58     	; 0x5a8 <__vector_9+0x5e>
	{
		case 0x00:
		if(PINB & (1<<PINB2)){					// clk = 0?
 56e:	22 9b       	sbis	0x04, 2	; 4
 570:	1b c0       	rjmp	.+54     	; 0x5a8 <__vector_9+0x5e>
			if(PINB & (1<<PINB1)){				// data = 0
 572:	21 9b       	sbis	0x04, 1	; 4
 574:	0b c0       	rjmp	.+22     	; 0x58c <__vector_9+0x42>
				if(volume <= 250){
 576:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <volume>
 57a:	8b 3f       	cpi	r24, 0xFB	; 251
 57c:	18 f4       	brcc	.+6      	; 0x584 <__vector_9+0x3a>
					volume += 5;
 57e:	8b 5f       	subi	r24, 0xFB	; 251
 580:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <volume>
				}
				volumeSwitchState = 0x01;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <volumeSwitchState.1826>
 58a:	0e c0       	rjmp	.+28     	; 0x5a8 <__vector_9+0x5e>
			}
			else{								// data = 1
				if(volume >= 5){
 58c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <volume>
 590:	85 30       	cpi	r24, 0x05	; 5
 592:	18 f0       	brcs	.+6      	; 0x59a <__vector_9+0x50>
					volume -= 5;
 594:	85 50       	subi	r24, 0x05	; 5
 596:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <volume>
				}
				volumeSwitchState = 0x01;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <volumeSwitchState.1826>
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <__vector_9+0x5e>
			}
		}
		break;
		
		case 0x01:
		if(PINB & (1<<PINB2)){					// clk still low?
 5a2:	22 9b       	sbis	0x04, 2	; 4
			//stay
		}
		else{
			volumeSwitchState = 0x00;
 5a4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <volumeSwitchState.1826>
		}
		break;
	}
	
}
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <__udivmodqi4>:
 5b6:	99 1b       	sub	r25, r25
 5b8:	79 e0       	ldi	r23, 0x09	; 9
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <__udivmodqi4_ep>

000005bc <__udivmodqi4_loop>:
 5bc:	99 1f       	adc	r25, r25
 5be:	96 17       	cp	r25, r22
 5c0:	08 f0       	brcs	.+2      	; 0x5c4 <__udivmodqi4_ep>
 5c2:	96 1b       	sub	r25, r22

000005c4 <__udivmodqi4_ep>:
 5c4:	88 1f       	adc	r24, r24
 5c6:	7a 95       	dec	r23
 5c8:	c9 f7       	brne	.-14     	; 0x5bc <__udivmodqi4_loop>
 5ca:	80 95       	com	r24
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
