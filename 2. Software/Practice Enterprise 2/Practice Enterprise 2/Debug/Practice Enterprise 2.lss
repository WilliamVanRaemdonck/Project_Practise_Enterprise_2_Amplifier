
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000396  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001740  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000afb  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a62  00000000  00000000  000027bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  00003220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000601  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aab  00000000  00000000  00003a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	68 d1       	rcall	.+720    	; 0x312 <main>
  42:	a7 c1       	rjmp	.+846    	; 0x392 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <setRS>:
	sendNibble(RETURN_HOME);	// return home
	_delay_ms(2);	//>1.67ms
}

void setRS(void){
	PORTC |= 0b01000000;
  46:	8a b1       	in	r24, 0x0a	; 10
  48:	80 64       	ori	r24, 0x40	; 64
  4a:	8a b9       	out	0x0a, r24	; 10
  4c:	08 95       	ret

0000004e <clearRS>:
}

void clearRS(void){
	PORTC &= 0b10111111;
  4e:	8a b1       	in	r24, 0x0a	; 10
  50:	8f 7b       	andi	r24, 0xBF	; 191
  52:	8a b9       	out	0x0a, r24	; 10
  54:	08 95       	ret

00000056 <setEnable>:
}

void setEnable(void){
	PORTC |= 0b10000000;
  56:	8a b1       	in	r24, 0x0a	; 10
  58:	80 68       	ori	r24, 0x80	; 128
  5a:	8a b9       	out	0x0a, r24	; 10
  5c:	08 95       	ret

0000005e <clearEnable>:
}

void clearEnable(void){
	PORTC &= 0b01111111;
  5e:	8a b1       	in	r24, 0x0a	; 10
  60:	8f 77       	andi	r24, 0x7F	; 127
  62:	8a b9       	out	0x0a, r24	; 10
  64:	08 95       	ret

00000066 <sendByte>:
	_delay_ms(1000);
}

void sendByte(uint8_t data){
	//send data
	PORTA = data;
  66:	82 b9       	out	0x02, r24	; 2
	
	//pulse enable
	setEnable();
  68:	f6 df       	rcall	.-20     	; 0x56 <setEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	86 ea       	ldi	r24, 0xA6	; 166
  6c:	8a 95       	dec	r24
  6e:	f1 f7       	brne	.-4      	; 0x6c <sendByte+0x6>
  70:	00 c0       	rjmp	.+0      	; 0x72 <sendByte+0xc>
	_delay_us(500);
	clearEnable();
  72:	f5 df       	rcall	.-22     	; 0x5e <clearEnable>
  74:	86 ea       	ldi	r24, 0xA6	; 166
  76:	8a 95       	dec	r24
  78:	f1 f7       	brne	.-4      	; 0x76 <sendByte+0x10>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <sendByte+0x16>
	_delay_us(500);
	
	//default position
	clearEnable();
  7c:	f0 df       	rcall	.-32     	; 0x5e <clearEnable>
	clearRS();
  7e:	e7 df       	rcall	.-50     	; 0x4e <clearRS>
	PORTA = 0x00;
  80:	12 b8       	out	0x02, r1	; 2
  82:	08 95       	ret

00000084 <sendNibble>:
}

void sendNibble(uint8_t data){
  84:	cf 93       	push	r28
	//data shift
	uint8_t input = data;
	uint8_t leftNibble = (input & 0b11110000);
  86:	98 2f       	mov	r25, r24
  88:	90 7f       	andi	r25, 0xF0	; 240
	input = (data << 4);
  8a:	c8 2f       	mov	r28, r24
  8c:	c2 95       	swap	r28
  8e:	c0 7f       	andi	r28, 0xF0	; 240
	uint8_t rightNibble = (input & 0b11110000);
	
	//data send
	PORTA = leftNibble;
  90:	92 b9       	out	0x02, r25	; 2
	
	//pulse
	setEnable();
  92:	e1 df       	rcall	.-62     	; 0x56 <setEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	83 ef       	ldi	r24, 0xF3	; 243
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <sendNibble+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <sendNibble+0x1a>
  9e:	00 00       	nop
	_delay_ms(2);
	clearEnable();
  a0:	de df       	rcall	.-68     	; 0x5e <clearEnable>
  a2:	83 ef       	ldi	r24, 0xF3	; 243
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <sendNibble+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <sendNibble+0x28>
  ac:	00 00       	nop
	_delay_ms(2);
	
	//data send
	PORTA = rightNibble;
  ae:	c2 b9       	out	0x02, r28	; 2
	
	//pulse
	setEnable();
  b0:	d2 df       	rcall	.-92     	; 0x56 <setEnable>
  b2:	83 ef       	ldi	r24, 0xF3	; 243
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <sendNibble+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <sendNibble+0x38>
  bc:	00 00       	nop
	_delay_ms(2);
	clearEnable();
  be:	cf df       	rcall	.-98     	; 0x5e <clearEnable>
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <sendNibble+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <sendNibble+0x46>
  ca:	00 00       	nop
	_delay_ms(2);
	
	//default position
	clearEnable();
  cc:	c8 df       	rcall	.-112    	; 0x5e <clearEnable>
	clearRS();
  ce:	bf df       	rcall	.-130    	; 0x4e <clearRS>
	PORTA = 0x00;
  d0:	12 b8       	out	0x02, r1	; 2
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <clearLCD>:

void clearLCD(void){
	sendNibble(CLEAR_DISPLAY);	// clear display
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	d5 df       	rcall	.-86     	; 0x84 <sendNibble>
  da:	83 ef       	ldi	r24, 0xF3	; 243
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <clearLCD+0x8>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <clearLCD+0xe>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <cursorHome>:
	_delay_ms(2);	//>1.67ms
}

void cursorHome(void){
	sendNibble(RETURN_HOME);	// return home
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	cc df       	rcall	.-104    	; 0x84 <sendNibble>
  ec:	83 ef       	ldi	r24, 0xF3	; 243
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <cursorHome+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <cursorHome+0xe>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <writeToDisplay>:
	_delay_ms(2);	//>1.67ms
	
	_delay_ms(1000);
}

void writeToDisplay(uint8_t data){
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	cursorHome();
  fe:	f4 df       	rcall	.-24     	; 0xe8 <cursorHome>
	clearLCD();
 100:	ea df       	rcall	.-44     	; 0xd6 <clearLCD>
	
	sendNibble(0b10000000);		//address = 0 DDRAM
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	bf df       	rcall	.-130    	; 0x84 <sendNibble>
 106:	83 ef       	ldi	r24, 0xF3	; 243
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
 110:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	setRS();
 112:	99 df       	rcall	.-206    	; 0x46 <setRS>
	sendNibble(data);
 114:	8c 2f       	mov	r24, r28
 116:	b6 df       	rcall	.-148    	; 0x84 <sendNibble>
	clearRS();
 118:	9a df       	rcall	.-204    	; 0x4e <clearRS>
 11a:	9f e3       	ldi	r25, 0x3F	; 63
 11c:	2d e0       	ldi	r18, 0x0D	; 13
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	91 50       	subi	r25, 0x01	; 1
 122:	20 40       	sbci	r18, 0x00	; 0
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
 12a:	00 00       	nop
		
	_delay_ms(1000);
}
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <initDisplay>:
#include "../main.h"
#include "Display.h"

void initDisplay(void){
	//init
	setRS();
 130:	8a df       	rcall	.-236    	; 0x46 <setRS>
	setEnable();
 132:	91 df       	rcall	.-222    	; 0x56 <setEnable>
	PORTA = 0x00;
 134:	12 b8       	out	0x02, r1	; 2
 136:	83 ed       	ldi	r24, 0xD3	; 211
 138:	90 e3       	ldi	r25, 0x30	; 48
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <initDisplay+0xa>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <initDisplay+0x10>
 140:	00 00       	nop
	//power on delay
	_delay_ms(50);
	
	clearEnable();
 142:	8d df       	rcall	.-230    	; 0x5e <clearEnable>
	clearRS();
 144:	84 df       	rcall	.-248    	; 0x4e <clearRS>
	//send function set 3 times
	sendByte(0b00110000);//Function set
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	8e df       	rcall	.-228    	; 0x66 <sendByte>
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <initDisplay+0x1e>
 152:	00 c0       	rjmp	.+0      	; 0x154 <initDisplay+0x24>
 154:	00 00       	nop
	_delay_ms(5);	//>4.1
	
	sendByte(0b00110000);//Function set
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	86 df       	rcall	.-244    	; 0x66 <sendByte>
 15a:	83 ef       	ldi	r24, 0xF3	; 243
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <initDisplay+0x2e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <initDisplay+0x34>
 164:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00110000);//Function set
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	7e df       	rcall	.-260    	; 0x66 <sendByte>
 16a:	83 ef       	ldi	r24, 0xF3	; 243
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <initDisplay+0x3e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <initDisplay+0x44>
 174:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00100000);//Function set	- 4bit mode
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	76 df       	rcall	.-276    	; 0x66 <sendByte>
 17a:	83 ef       	ldi	r24, 0xF3	; 243
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <initDisplay+0x4e>
 182:	00 c0       	rjmp	.+0      	; 0x184 <initDisplay+0x54>
 184:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(FUNCTION_SET);	// interface length and Character font	- 4 bit en 5*8
 186:	88 e2       	ldi	r24, 0x28	; 40
 188:	7d df       	rcall	.-262    	; 0x84 <sendNibble>
 18a:	83 ef       	ldi	r24, 0xF3	; 243
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <initDisplay+0x5e>
 192:	00 c0       	rjmp	.+0      	; 0x194 <initDisplay+0x64>
 194:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CURSOR_ON_BLINK);// display on, cursor on, blink on
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	75 df       	rcall	.-278    	; 0x84 <sendNibble>
 19a:	83 ef       	ldi	r24, 0xF3	; 243
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <initDisplay+0x6e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <initDisplay+0x74>
 1a4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CLEAR_DISPLAY);	// clear display
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	6d df       	rcall	.-294    	; 0x84 <sendNibble>
 1aa:	83 ef       	ldi	r24, 0xF3	; 243
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <initDisplay+0x7e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <initDisplay+0x84>
 1b4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(ENTRY_MODE);		// ready to write
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	65 df       	rcall	.-310    	; 0x84 <sendNibble>
 1ba:	83 ef       	ldi	r24, 0xF3	; 243
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <initDisplay+0x8e>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <initDisplay+0x94>
 1c4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(RETURN_HOME);	// return home
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	5d df       	rcall	.-326    	; 0x84 <sendNibble>
 1ca:	83 ef       	ldi	r24, 0xF3	; 243
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <initDisplay+0x9e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <initDisplay+0xa4>
 1d4:	00 00       	nop
 1d6:	9f e3       	ldi	r25, 0x3F	; 63
 1d8:	2d e0       	ldi	r18, 0x0D	; 13
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	91 50       	subi	r25, 0x01	; 1
 1de:	20 40       	sbci	r18, 0x00	; 0
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <initDisplay+0xac>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <initDisplay+0xb6>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <clkLow>:
	clkLow();
	_delay_us(I2CSpeed);
}

void clkLow(void){
	PORTB &= 0b10111111;
 1ea:	86 b1       	in	r24, 0x06	; 6
 1ec:	8f 7b       	andi	r24, 0xBF	; 191
 1ee:	86 b9       	out	0x06, r24	; 6
 1f0:	08 95       	ret

000001f2 <clkHigh>:
}

void clkHigh(void){
	PORTB |= 0b01000000;
 1f2:	86 b1       	in	r24, 0x06	; 6
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	86 b9       	out	0x06, r24	; 6
 1f8:	08 95       	ret

000001fa <clkPulse>:
	sdaHigh();
	_delay_us(I2CSpeed);
}

void clkPulse(void){
	clkHigh();
 1fa:	fb df       	rcall	.-10     	; 0x1f2 <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	81 e2       	ldi	r24, 0x21	; 33
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <clkPulse+0x4>
 202:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 204:	f2 df       	rcall	.-28     	; 0x1ea <clkLow>
 206:	81 e2       	ldi	r24, 0x21	; 33
 208:	8a 95       	dec	r24
 20a:	f1 f7       	brne	.-4      	; 0x208 <__DATA_REGION_LENGTH__+0x8>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <sdaLow>:
void clkHigh(void){
	PORTB |= 0b01000000;
}

void sdaLow(void){
	PORTB &= 0b01111111;
 210:	86 b1       	in	r24, 0x06	; 6
 212:	8f 77       	andi	r24, 0x7F	; 127
 214:	86 b9       	out	0x06, r24	; 6
 216:	08 95       	ret

00000218 <startCom>:
	clkPulse();
}

void startCom(void){
	//start condition
	sdaLow();
 218:	fb df       	rcall	.-10     	; 0x210 <sdaLow>
 21a:	81 e2       	ldi	r24, 0x21	; 33
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <startCom+0x4>
 220:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 222:	e3 df       	rcall	.-58     	; 0x1ea <clkLow>
 224:	81 e2       	ldi	r24, 0x21	; 33
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <startCom+0xe>
 22a:	00 00       	nop
 22c:	08 95       	ret

0000022e <sdaHigh>:
void sdaLow(void){
	PORTB &= 0b01111111;
}

void sdaHigh(void){
	PORTB |= 0b10000000;
 22e:	86 b1       	in	r24, 0x06	; 6
 230:	80 68       	ori	r24, 0x80	; 128
 232:	86 b9       	out	0x06, r24	; 6
 234:	08 95       	ret

00000236 <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
 236:	fb df       	rcall	.-10     	; 0x22e <sdaHigh>
	clkHigh();
 238:	dc df       	rcall	.-72     	; 0x1f2 <clkHigh>
 23a:	81 e2       	ldi	r24, 0x21	; 33
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <initI2C+0x6>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
 248:	7e d0       	rcall	.+252    	; 0x346 <reverse>
 24a:	d8 2f       	mov	r29, r24
	for(uint8_t index = 0; index < 8; index++){
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	08 c0       	rjmp	.+16     	; 0x260 <sendI2C+0x1c>
		result = shift & mask;
		if(result == 0x01){
 250:	d0 ff       	sbrs	r29, 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <sendI2C+0x14>
			sdaHigh();
 254:	ec df       	rcall	.-40     	; 0x22e <sdaHigh>
 256:	01 c0       	rjmp	.+2      	; 0x25a <sendI2C+0x16>
		}
		else{
			sdaLow();
 258:	db df       	rcall	.-74     	; 0x210 <sdaLow>
		}
		clkPulse();
 25a:	cf df       	rcall	.-98     	; 0x1fa <clkPulse>
		shift = (shift >> 1);	//shift right by one
 25c:	d6 95       	lsr	r29
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
	for(uint8_t index = 0; index < 8; index++){
 25e:	cf 5f       	subi	r28, 0xFF	; 255
 260:	c8 30       	cpi	r28, 0x08	; 8
 262:	b0 f3       	brcs	.-20     	; 0x250 <sendI2C+0xc>
		}
		clkPulse();
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaHigh();	//sdalow ?
 264:	e4 df       	rcall	.-56     	; 0x22e <sdaHigh>
	clkPulse();
 266:	c9 df       	rcall	.-110    	; 0x1fa <clkPulse>
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <finishCom>:
	_delay_us(I2CSpeed);
}

void finishCom(){
	// finish communication
	clkHigh();
 26e:	c1 df       	rcall	.-126    	; 0x1f2 <clkHigh>
 270:	81 e2       	ldi	r24, 0x21	; 33
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <finishCom+0x4>
 276:	00 00       	nop
	_delay_us(I2CSpeed);
	sdaHigh();
 278:	da df       	rcall	.-76     	; 0x22e <sdaHigh>
 27a:	81 e2       	ldi	r24, 0x21	; 33
 27c:	8a 95       	dec	r24
 27e:	f1 f7       	brne	.-4      	; 0x27c <finishCom+0xe>
 280:	00 00       	nop
 282:	08 95       	ret

00000284 <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	18 2f       	mov	r17, r24
 28c:	d6 2f       	mov	r29, r22
 28e:	c4 2f       	mov	r28, r20
	startCom();
 290:	c3 df       	rcall	.-122    	; 0x218 <startCom>
	sendI2C(chipAddress);
 292:	81 2f       	mov	r24, r17
 294:	d7 df       	rcall	.-82     	; 0x244 <sendI2C>
	sendI2C(subAddress);
 296:	8d 2f       	mov	r24, r29
 298:	d5 df       	rcall	.-86     	; 0x244 <sendI2C>
	sendI2C(data);
 29a:	8c 2f       	mov	r24, r28
 29c:	d3 df       	rcall	.-90     	; 0x244 <sendI2C>
	finishCom();
 29e:	e7 df       	rcall	.-50     	; 0x26e <finishCom>
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	08 95       	ret

000002a8 <initIO>:
	return ADCH;
}

//-----------------------------------------------------------------------------------------	MISC
void printl(uint8_t input){
	PORTA = input;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	81 b9       	out	0x01, r24	; 1
 2ac:	83 b9       	out	0x03, r24	; 3
 2ae:	12 b8       	out	0x02, r1	; 2
 2b0:	90 ec       	ldi	r25, 0xC0	; 192
 2b2:	95 b9       	out	0x05, r25	; 5
 2b4:	87 b9       	out	0x07, r24	; 7
 2b6:	16 b8       	out	0x06, r1	; 6
 2b8:	99 b9       	out	0x09, r25	; 9
 2ba:	8b b9       	out	0x0b, r24	; 11
 2bc:	1a b8       	out	0x0a, r1	; 10
 2be:	08 95       	ret

000002c0 <initADC>:
 2c0:	e4 e6       	ldi	r30, 0x64	; 100
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	80 83       	st	Z, r24
 2ca:	ea e7       	ldi	r30, 0x7A	; 122
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	80 83       	st	Z, r24
 2d4:	ad e7       	ldi	r26, 0x7D	; 125
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	8c 91       	ld	r24, X
 2da:	1c 92       	st	X, r1
 2dc:	80 81       	ld	r24, Z
 2de:	84 60       	ori	r24, 0x04	; 4
 2e0:	80 83       	st	Z, r24
 2e2:	eb e7       	ldi	r30, 0x7B	; 123
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	80 83       	st	Z, r24
 2ec:	08 95       	ret

000002ee <ReadADCPinValue>:
 2ee:	ec e7       	ldi	r30, 0x7C	; 124
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	90 81       	ld	r25, Z
 2f4:	89 2b       	or	r24, r25
 2f6:	80 83       	st	Z, r24
 2f8:	ed e7       	ldi	r30, 0x7D	; 125
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	80 83       	st	Z, r24
 302:	ea e7       	ldi	r30, 0x7A	; 122
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	80 64       	ori	r24, 0x40	; 64
 30a:	80 83       	st	Z, r24
 30c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 310:	08 95       	ret

00000312 <main>:
 312:	ca df       	rcall	.-108    	; 0x2a8 <initIO>
 314:	d5 df       	rcall	.-86     	; 0x2c0 <initADC>
 316:	8f df       	rcall	.-226    	; 0x236 <initI2C>
 318:	0b df       	rcall	.-490    	; 0x130 <initDisplay>
 31a:	88 e0       	ldi	r24, 0x08	; 8
 31c:	e8 df       	rcall	.-48     	; 0x2ee <ReadADCPinValue>
 31e:	8b e0       	ldi	r24, 0x0B	; 11
 320:	e6 df       	rcall	.-52     	; 0x2ee <ReadADCPinValue>
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	e4 df       	rcall	.-56     	; 0x2ee <ReadADCPinValue>
 326:	8d e0       	ldi	r24, 0x0D	; 13
 328:	e2 df       	rcall	.-60     	; 0x2ee <ReadADCPinValue>
 32a:	8a b1       	in	r24, 0x0a	; 10
 32c:	42 e8       	ldi	r20, 0x82	; 130
 32e:	62 e8       	ldi	r22, 0x82	; 130
 330:	88 e8       	ldi	r24, 0x88	; 136
 332:	a8 df       	rcall	.-176    	; 0x284 <setTDAValue>
 334:	83 ec       	ldi	r24, 0xC3	; 195
 336:	99 e0       	ldi	r25, 0x09	; 9
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x26>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x2c>
 33e:	00 00       	nop
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	db de       	rcall	.-586    	; 0xfa <writeToDisplay>
 344:	ea cf       	rjmp	.-44     	; 0x31a <main+0x8>

00000346 <reverse>:
}

uint8_t reverse(uint8_t b) {
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 346:	28 2f       	mov	r18, r24
 348:	22 95       	swap	r18
 34a:	2f 70       	andi	r18, 0x0F	; 15
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	82 95       	swap	r24
 350:	92 95       	swap	r25
 352:	90 7f       	andi	r25, 0xF0	; 240
 354:	98 27       	eor	r25, r24
 356:	80 7f       	andi	r24, 0xF0	; 240
 358:	98 27       	eor	r25, r24
 35a:	92 2f       	mov	r25, r18
 35c:	98 2b       	or	r25, r24
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 35e:	29 2f       	mov	r18, r25
 360:	2c 7c       	andi	r18, 0xCC	; 204
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	35 95       	asr	r19
 366:	27 95       	ror	r18
 368:	35 95       	asr	r19
 36a:	27 95       	ror	r18
 36c:	93 73       	andi	r25, 0x33	; 51
 36e:	89 2f       	mov	r24, r25
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	82 2b       	or	r24, r18
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 37c:	28 2f       	mov	r18, r24
 37e:	2a 7a       	andi	r18, 0xAA	; 170
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	35 95       	asr	r19
 384:	27 95       	ror	r18
 386:	85 75       	andi	r24, 0x55	; 85
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
	return b;
}
 38e:	82 2b       	or	r24, r18
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
