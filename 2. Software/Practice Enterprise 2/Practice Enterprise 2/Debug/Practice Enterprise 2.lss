
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080013e  0080013e  00000744  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000195b  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af5  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7d  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000038b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  00003b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dee  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e7       	ldi	r30, 0x72	; 114
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 33       	cpi	r26, 0x3E	; 62
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e3       	ldi	r26, 0x3E	; 62
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 34       	cpi	r26, 0x40	; 64
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	90 d2       	rcall	.+1312   	; 0x588 <main>
  68:	02 c3       	rjmp	.+1540   	; 0x66e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <setRS>:
	sendNibble(RETURN_HOME);	// return home
	_delay_ms(2);	//>1.67ms
}

void setRS(void){
	PORTC |= 0b01000000;
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8a b9       	out	0x0a, r24	; 10
  72:	08 95       	ret

00000074 <clearRS>:
}

void clearRS(void){
	PORTC &= 0b10111111;
  74:	8a b1       	in	r24, 0x0a	; 10
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	8a b9       	out	0x0a, r24	; 10
  7a:	08 95       	ret

0000007c <setEnable>:
}

void setEnable(void){
	PORTC |= 0b10000000;
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8a b9       	out	0x0a, r24	; 10
  82:	08 95       	ret

00000084 <clearEnable>:
}

void clearEnable(void){
	PORTC &= 0b01111111;
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	08 95       	ret

0000008c <sendByte>:
	address = DDRAMaddress;
}

void sendByte(char data){
	//send data
	PORTA = data;
  8c:	82 b9       	out	0x02, r24	; 2
	
	//pulse enable
	setEnable();
  8e:	f6 df       	rcall	.-20     	; 0x7c <setEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	86 ea       	ldi	r24, 0xA6	; 166
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <sendByte+0x6>
  96:	00 c0       	rjmp	.+0      	; 0x98 <sendByte+0xc>
	_delay_us(500);
	clearEnable();
  98:	f5 df       	rcall	.-22     	; 0x84 <clearEnable>
  9a:	86 ea       	ldi	r24, 0xA6	; 166
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <sendByte+0x10>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <sendByte+0x16>
	_delay_us(500);
	
	//default position
	clearEnable();
  a2:	f0 df       	rcall	.-32     	; 0x84 <clearEnable>
	clearRS();
  a4:	e7 df       	rcall	.-50     	; 0x74 <clearRS>
	PORTA = 0x00;
  a6:	12 b8       	out	0x02, r1	; 2
  a8:	08 95       	ret

000000aa <sendNibble>:
}

void sendNibble(char data){
  aa:	cf 93       	push	r28
	//data shift
	char input = (char)data;
	char leftNibble = (input & 0b11110000);
  ac:	98 2f       	mov	r25, r24
  ae:	90 7f       	andi	r25, 0xF0	; 240
	input = (data << 4);
  b0:	c8 2f       	mov	r28, r24
  b2:	c2 95       	swap	r28
  b4:	c0 7f       	andi	r28, 0xF0	; 240
	char rightNibble = (input & 0b11110000);
	
	//data send
	PORTA = leftNibble;
  b6:	92 b9       	out	0x02, r25	; 2
	
	//pulse
	setEnable();
  b8:	e1 df       	rcall	.-62     	; 0x7c <setEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	83 ef       	ldi	r24, 0xF3	; 243
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <sendNibble+0x14>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <sendNibble+0x1a>
  c4:	00 00       	nop
	_delay_ms(2);
	clearEnable();
  c6:	de df       	rcall	.-68     	; 0x84 <clearEnable>
  c8:	83 ef       	ldi	r24, 0xF3	; 243
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <sendNibble+0x22>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <sendNibble+0x28>
  d2:	00 00       	nop
	_delay_ms(2);
	
	//data send
	PORTA = rightNibble;
  d4:	c2 b9       	out	0x02, r28	; 2
	
	//pulse
	setEnable();
  d6:	d2 df       	rcall	.-92     	; 0x7c <setEnable>
  d8:	83 ef       	ldi	r24, 0xF3	; 243
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <sendNibble+0x32>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <sendNibble+0x38>
  e2:	00 00       	nop
	_delay_ms(2);
	clearEnable();
  e4:	cf df       	rcall	.-98     	; 0x84 <clearEnable>
  e6:	83 ef       	ldi	r24, 0xF3	; 243
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <sendNibble+0x40>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <sendNibble+0x46>
  f0:	00 00       	nop
	_delay_ms(2);
	
	//default position
	clearEnable();
  f2:	c8 df       	rcall	.-112    	; 0x84 <clearEnable>
	clearRS();
  f4:	bf df       	rcall	.-130    	; 0x74 <clearRS>
	PORTA = 0x00;
  f6:	12 b8       	out	0x02, r1	; 2
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <clearLCD>:

void clearLCD(void){
	sendNibble(CLEAR_DISPLAY);	// clear display
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	d5 df       	rcall	.-86     	; 0xaa <sendNibble>
 100:	83 ef       	ldi	r24, 0xF3	; 243
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <cursorHome>:
	_delay_ms(2);	//>1.67ms
}

void cursorHome(void){
	sendNibble(RETURN_HOME);	// return home
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	cc df       	rcall	.-104    	; 0xaa <sendNibble>
 112:	83 ef       	ldi	r24, 0xF3	; 243
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <cursorHome+0x8>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <cursorHome+0xe>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <writeToDisplay>:
	
	muxPrev = mux;
	barsPrev = bars;
}

void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	7c 01       	movw	r14, r24
 12e:	06 2f       	mov	r16, r22
 130:	14 2f       	mov	r17, r20
	uint8_t address = DDRAMaddress;
	cursorHome();
 132:	ed df       	rcall	.-38     	; 0x10e <cursorHome>
	for(int i = 0; i < length;i++){
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	11 c0       	rjmp	.+34     	; 0x15c <writeToDisplay+0x3c>
		sendNibble(address);		//address = 0 DDRAM
 13a:	81 2f       	mov	r24, r17
 13c:	b6 df       	rcall	.-148    	; 0xaa <sendNibble>
 13e:	83 ef       	ldi	r24, 0xF3	; 243
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <writeToDisplay+0x22>
 146:	00 c0       	rjmp	.+0      	; 0x148 <writeToDisplay+0x28>
 148:	00 00       	nop
		_delay_ms(2);	//>1.67ms
		
		setRS();
 14a:	90 df       	rcall	.-224    	; 0x6c <setRS>
		sendNibble(data[i]);
 14c:	f7 01       	movw	r30, r14
 14e:	ec 0f       	add	r30, r28
 150:	fd 1f       	adc	r31, r29
 152:	80 81       	ld	r24, Z
 154:	aa df       	rcall	.-172    	; 0xaa <sendNibble>
		clearRS();
 156:	8e df       	rcall	.-228    	; 0x74 <clearRS>
		
		address++;
 158:	1f 5f       	subi	r17, 0xFF	; 255
}

void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
	uint8_t address = DDRAMaddress;
	cursorHome();
	for(int i = 0; i < length;i++){
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	80 2f       	mov	r24, r16
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	c8 17       	cp	r28, r24
 162:	d9 07       	cpc	r29, r25
 164:	54 f3       	brlt	.-44     	; 0x13a <writeToDisplay+0x1a>
		
		address++;
	}
	
	address = DDRAMaddress;
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	08 95       	ret

00000174 <updateDisplay>:
	_delay_ms(2);	//>1.67ms
	
	_delay_ms(1000);
}

void updateDisplay(uint8_t input, uint8_t mux){
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	e7 97       	sbiw	r28, 0x37	; 55
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	16 2f       	mov	r17, r22
	//2 ??????_______________	address: 0xc0
	//3 INPUT:					address: 0x94
	//4 [] [] [?] []			address: 0xd4

	//vars
	char inputStrText[] = "INPUT:";
 18e:	97 e0       	ldi	r25, 0x07	; 7
 190:	ee e2       	ldi	r30, 0x2E	; 46
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	de 01       	movw	r26, r28
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	9a 95       	dec	r25
 19e:	e1 f7       	brne	.-8      	; 0x198 <updateDisplay+0x24>
	char volStrText[] = "VOLUME:";
 1a0:	98 e0       	ldi	r25, 0x08	; 8
 1a2:	e5 e3       	ldi	r30, 0x35	; 53
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	de 01       	movw	r26, r28
 1a8:	18 96       	adiw	r26, 0x08	; 8
 1aa:	01 90       	ld	r0, Z+
 1ac:	0d 92       	st	X+, r0
 1ae:	9a 95       	dec	r25
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <updateDisplay+0x36>
	uint8_t blanks = 0;
	static uint8_t barsPrev;
	static uint8_t muxPrev;
	
	// volume string
	bars = input / 13; // 0 - 255 => 0 - 20 => / 12.75 ~ 13 
 1b2:	6d e0       	ldi	r22, 0x0D	; 13
 1b4:	50 d2       	rcall	.+1184   	; 0x656 <__udivmodqi4>
 1b6:	08 2f       	mov	r16, r24
 1b8:	48 2f       	mov	r20, r24
	blanks = 20 - bars;
 1ba:	54 e1       	ldi	r21, 0x14	; 20
 1bc:	58 1b       	sub	r21, r24
	
	strcpy(barStr, "");
 1be:	18 8a       	std	Y+16, r1	; 0x10
	
	for(int i = 0; i < bars; i++){
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <updateDisplay+0x68>
		strcat(barStr, "X");
 1c6:	fe 01       	movw	r30, r28
 1c8:	70 96       	adiw	r30, 0x10	; 16
 1ca:	01 90       	ld	r0, Z+
 1cc:	00 20       	and	r0, r0
 1ce:	e9 f7       	brne	.-6      	; 0x1ca <updateDisplay+0x56>
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	28 e5       	ldi	r18, 0x58	; 88
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	31 83       	std	Z+1, r19	; 0x01
 1d8:	20 83       	st	Z, r18
	bars = input / 13; // 0 - 255 => 0 - 20 => / 12.75 ~ 13 
	blanks = 20 - bars;
	
	strcpy(barStr, "");
	
	for(int i = 0; i < bars; i++){
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	24 2f       	mov	r18, r20
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	82 17       	cp	r24, r18
 1e2:	93 07       	cpc	r25, r19
 1e4:	84 f3       	brlt	.-32     	; 0x1c6 <updateDisplay+0x52>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <__DATA_REGION_LENGTH__+0x2>
		strcat(barStr, "X");
	}
	
	for(int i = 0; i < blanks; i++){
		strcat(barStr, "_");
 1ec:	fe 01       	movw	r30, r28
 1ee:	70 96       	adiw	r30, 0x10	; 16
 1f0:	01 90       	ld	r0, Z+
 1f2:	00 20       	and	r0, r0
 1f4:	e9 f7       	brne	.-6      	; 0x1f0 <updateDisplay+0x7c>
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	2f e5       	ldi	r18, 0x5F	; 95
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	31 83       	std	Z+1, r19	; 0x01
 1fe:	20 83       	st	Z, r18
	
	for(int i = 0; i < bars; i++){
		strcat(barStr, "X");
	}
	
	for(int i = 0; i < blanks; i++){
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	25 2f       	mov	r18, r21
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	82 17       	cp	r24, r18
 208:	93 07       	cpc	r25, r19
 20a:	84 f3       	brlt	.-32     	; 0x1ec <updateDisplay+0x78>
		strcat(barStr, "_");
	}
	
	// mux string
	switch(mux){
 20c:	11 30       	cpi	r17, 0x01	; 1
 20e:	31 f1       	breq	.+76     	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
 210:	38 f0       	brcs	.+14     	; 0x220 <__DATA_REGION_LENGTH__+0x20>
 212:	12 30       	cpi	r17, 0x02	; 2
 214:	09 f4       	brne	.+2      	; 0x218 <__DATA_REGION_LENGTH__+0x18>
 216:	42 c0       	rjmp	.+132    	; 0x29c <__DATA_REGION_LENGTH__+0x9c>
 218:	13 30       	cpi	r17, 0x03	; 3
 21a:	09 f4       	brne	.+2      	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
 21c:	5f c0       	rjmp	.+190    	; 0x2dc <__DATA_REGION_LENGTH__+0xdc>
 21e:	7b c0       	rjmp	.+246    	; 0x316 <__stack+0x17>
		case 0x00:
		strcpy(muxStr, " [");
 220:	de 01       	movw	r26, r28
 222:	94 96       	adiw	r26, 0x24	; 36
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	9b e5       	ldi	r25, 0x5B	; 91
 228:	9d a3       	std	Y+37, r25	; 0x25
 22a:	8c a3       	std	Y+36, r24	; 0x24
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	1c 92       	st	X, r1
 230:	12 97       	sbiw	r26, 0x02	; 2
		strcat(muxStr, "X");
 232:	fd 01       	movw	r30, r26
 234:	01 90       	ld	r0, Z+
 236:	00 20       	and	r0, r0
 238:	e9 f7       	brne	.-6      	; 0x234 <__DATA_REGION_LENGTH__+0x34>
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	88 e5       	ldi	r24, 0x58	; 88
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	91 83       	std	Z+1, r25	; 0x01
 242:	80 83       	st	Z, r24
		strcat(muxStr, "]  [_]  [_]  [_] ");
 244:	0d 90       	ld	r0, X+
 246:	00 20       	and	r0, r0
 248:	e9 f7       	brne	.-6      	; 0x244 <__DATA_REGION_LENGTH__+0x44>
 24a:	11 97       	sbiw	r26, 0x01	; 1
 24c:	82 e1       	ldi	r24, 0x12	; 18
 24e:	e0 e0       	ldi	r30, 0x00	; 0
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	8a 95       	dec	r24
 258:	e1 f7       	brne	.-8      	; 0x252 <__DATA_REGION_LENGTH__+0x52>
		break;
 25a:	5d c0       	rjmp	.+186    	; 0x316 <__stack+0x17>
		case 0x01:
		strcpy(muxStr, " [_]  [_]");
 25c:	ce 01       	movw	r24, r28
 25e:	84 96       	adiw	r24, 0x24	; 36
 260:	2a e0       	ldi	r18, 0x0A	; 10
 262:	e2 e1       	ldi	r30, 0x12	; 18
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	dc 01       	movw	r26, r24
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	2a 95       	dec	r18
 26e:	e1 f7       	brne	.-8      	; 0x268 <__DATA_REGION_LENGTH__+0x68>
		strcat(muxStr, "X");
 270:	fc 01       	movw	r30, r24
 272:	01 90       	ld	r0, Z+
 274:	00 20       	and	r0, r0
 276:	e9 f7       	brne	.-6      	; 0x272 <__DATA_REGION_LENGTH__+0x72>
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	28 e5       	ldi	r18, 0x58	; 88
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	31 83       	std	Z+1, r19	; 0x01
 280:	20 83       	st	Z, r18
		strcat(muxStr, "]  [_]  [_] ");
 282:	dc 01       	movw	r26, r24
 284:	0d 90       	ld	r0, X+
 286:	00 20       	and	r0, r0
 288:	e9 f7       	brne	.-6      	; 0x284 <__DATA_REGION_LENGTH__+0x84>
 28a:	11 97       	sbiw	r26, 0x01	; 1
 28c:	8d e0       	ldi	r24, 0x0D	; 13
 28e:	e5 e0       	ldi	r30, 0x05	; 5
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	01 90       	ld	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	8a 95       	dec	r24
 298:	e1 f7       	brne	.-8      	; 0x292 <__DATA_REGION_LENGTH__+0x92>
		break;
 29a:	3d c0       	rjmp	.+122    	; 0x316 <__stack+0x17>
		case 0x02:
		strcpy(muxStr, " [_]  [_]  [");
 29c:	ce 01       	movw	r24, r28
 29e:	84 96       	adiw	r24, 0x24	; 36
 2a0:	2d e0       	ldi	r18, 0x0D	; 13
 2a2:	e1 e2       	ldi	r30, 0x21	; 33
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	dc 01       	movw	r26, r24
 2a8:	01 90       	ld	r0, Z+
 2aa:	0d 92       	st	X+, r0
 2ac:	2a 95       	dec	r18
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <__DATA_REGION_LENGTH__+0xa8>
		strcat(muxStr, "X");
 2b0:	fc 01       	movw	r30, r24
 2b2:	01 90       	ld	r0, Z+
 2b4:	00 20       	and	r0, r0
 2b6:	e9 f7       	brne	.-6      	; 0x2b2 <__DATA_REGION_LENGTH__+0xb2>
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	28 e5       	ldi	r18, 0x58	; 88
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	31 83       	std	Z+1, r19	; 0x01
 2c0:	20 83       	st	Z, r18
		strcat(muxStr, "]  [_] ");
 2c2:	dc 01       	movw	r26, r24
 2c4:	0d 90       	ld	r0, X+
 2c6:	00 20       	and	r0, r0
 2c8:	e9 f7       	brne	.-6      	; 0x2c4 <__DATA_REGION_LENGTH__+0xc4>
 2ca:	11 97       	sbiw	r26, 0x01	; 1
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	ea e0       	ldi	r30, 0x0A	; 10
 2d0:	f1 e0       	ldi	r31, 0x01	; 1
 2d2:	01 90       	ld	r0, Z+
 2d4:	0d 92       	st	X+, r0
 2d6:	8a 95       	dec	r24
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <__DATA_REGION_LENGTH__+0xd2>
		break;
 2da:	1d c0       	rjmp	.+58     	; 0x316 <__stack+0x17>
		case 0x03:
		strcpy(muxStr, " [_]  [_]  [_]  [");
 2dc:	ce 01       	movw	r24, r28
 2de:	84 96       	adiw	r24, 0x24	; 36
 2e0:	22 e1       	ldi	r18, 0x12	; 18
 2e2:	ec e1       	ldi	r30, 0x1C	; 28
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	dc 01       	movw	r26, r24
 2e8:	01 90       	ld	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	2a 95       	dec	r18
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <__DATA_REGION_LENGTH__+0xe8>
		strcat(muxStr, "X");
 2f0:	fc 01       	movw	r30, r24
 2f2:	01 90       	ld	r0, Z+
 2f4:	00 20       	and	r0, r0
 2f6:	e9 f7       	brne	.-6      	; 0x2f2 <__DATA_REGION_LENGTH__+0xf2>
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	28 e5       	ldi	r18, 0x58	; 88
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	31 83       	std	Z+1, r19	; 0x01
 300:	20 83       	st	Z, r18
		strcat(muxStr, "] ");
 302:	fc 01       	movw	r30, r24
 304:	01 90       	ld	r0, Z+
 306:	00 20       	and	r0, r0
 308:	e9 f7       	brne	.-6      	; 0x304 <__stack+0x5>
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	8d e5       	ldi	r24, 0x5D	; 93
 30e:	90 e2       	ldi	r25, 0x20	; 32
 310:	91 83       	std	Z+1, r25	; 0x01
 312:	80 83       	st	Z, r24
 314:	12 82       	std	Z+2, r1	; 0x02
		break;
	}
	
	if(mux != muxPrev || bars > barsPrev){
 316:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <muxPrev.1912>
 31a:	18 13       	cpse	r17, r24
 31c:	04 c0       	rjmp	.+8      	; 0x326 <__stack+0x27>
 31e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 322:	84 17       	cp	r24, r20
 324:	08 f4       	brcc	.+2      	; 0x328 <__stack+0x29>
		clearLCD();
 326:	ea de       	rcall	.-556    	; 0xfc <clearLCD>
	}
	
	writeToDisplay(volStrText, strlen(volStrText), 0x80);
 328:	ce 01       	movw	r24, r28
 32a:	08 96       	adiw	r24, 0x08	; 8
 32c:	fc 01       	movw	r30, r24
 32e:	01 90       	ld	r0, Z+
 330:	00 20       	and	r0, r0
 332:	e9 f7       	brne	.-6      	; 0x32e <__stack+0x2f>
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	bf 01       	movw	r22, r30
 338:	68 1b       	sub	r22, r24
 33a:	79 0b       	sbc	r23, r25
 33c:	40 e8       	ldi	r20, 0x80	; 128
 33e:	f0 de       	rcall	.-544    	; 0x120 <writeToDisplay>
	writeToDisplay(barStr, strlen(barStr), 0xc0);
 340:	ce 01       	movw	r24, r28
 342:	40 96       	adiw	r24, 0x10	; 16
 344:	fc 01       	movw	r30, r24
 346:	01 90       	ld	r0, Z+
 348:	00 20       	and	r0, r0
 34a:	e9 f7       	brne	.-6      	; 0x346 <__stack+0x47>
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	bf 01       	movw	r22, r30
 350:	68 1b       	sub	r22, r24
 352:	79 0b       	sbc	r23, r25
 354:	40 ec       	ldi	r20, 0xC0	; 192
 356:	e4 de       	rcall	.-568    	; 0x120 <writeToDisplay>
	writeToDisplay(inputStrText, strlen(inputStrText), 0x94);
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	fc 01       	movw	r30, r24
 35e:	01 90       	ld	r0, Z+
 360:	00 20       	and	r0, r0
 362:	e9 f7       	brne	.-6      	; 0x35e <__stack+0x5f>
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	bf 01       	movw	r22, r30
 368:	68 1b       	sub	r22, r24
 36a:	79 0b       	sbc	r23, r25
 36c:	44 e9       	ldi	r20, 0x94	; 148
 36e:	d8 de       	rcall	.-592    	; 0x120 <writeToDisplay>
	writeToDisplay(muxStr, strlen(muxStr), 0xd4);
 370:	ce 01       	movw	r24, r28
 372:	84 96       	adiw	r24, 0x24	; 36
 374:	fc 01       	movw	r30, r24
 376:	01 90       	ld	r0, Z+
 378:	00 20       	and	r0, r0
 37a:	e9 f7       	brne	.-6      	; 0x376 <__stack+0x77>
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	bf 01       	movw	r22, r30
 380:	68 1b       	sub	r22, r24
 382:	79 0b       	sbc	r23, r25
 384:	44 ed       	ldi	r20, 0xD4	; 212
 386:	cc de       	rcall	.-616    	; 0x120 <writeToDisplay>
	
	muxPrev = mux;
 388:	10 93 3f 01 	sts	0x013F, r17	; 0x80013f <muxPrev.1912>
	barsPrev = bars;
 38c:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <__data_end>
}
 390:	e7 96       	adiw	r28, 0x37	; 55
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <initDisplay>:
#include "Display.h"
#include <string.h>

void initDisplay(void){
	//init
	setRS();
 3a6:	62 de       	rcall	.-828    	; 0x6c <setRS>
	setEnable();
 3a8:	69 de       	rcall	.-814    	; 0x7c <setEnable>
	PORTA = 0x00;
 3aa:	12 b8       	out	0x02, r1	; 2
 3ac:	83 ed       	ldi	r24, 0xD3	; 211
 3ae:	90 e3       	ldi	r25, 0x30	; 48
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <initDisplay+0xa>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <initDisplay+0x10>
 3b6:	00 00       	nop
	//power on delay
	_delay_ms(50);
	
	clearEnable();
 3b8:	65 de       	rcall	.-822    	; 0x84 <clearEnable>
	clearRS();
 3ba:	5c de       	rcall	.-840    	; 0x74 <clearRS>
	//send function set 3 times
	sendByte(0b00110000);//Function set
 3bc:	80 e3       	ldi	r24, 0x30	; 48
 3be:	66 de       	rcall	.-820    	; 0x8c <sendByte>
 3c0:	81 ee       	ldi	r24, 0xE1	; 225
 3c2:	94 e0       	ldi	r25, 0x04	; 4
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <initDisplay+0x1e>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <initDisplay+0x24>
 3ca:	00 00       	nop
	_delay_ms(5);	//>4.1
	
	sendByte(0b00110000);//Function set
 3cc:	80 e3       	ldi	r24, 0x30	; 48
 3ce:	5e de       	rcall	.-836    	; 0x8c <sendByte>
 3d0:	83 ef       	ldi	r24, 0xF3	; 243
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <initDisplay+0x2e>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <initDisplay+0x34>
 3da:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00110000);//Function set
 3dc:	80 e3       	ldi	r24, 0x30	; 48
 3de:	56 de       	rcall	.-852    	; 0x8c <sendByte>
 3e0:	83 ef       	ldi	r24, 0xF3	; 243
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <initDisplay+0x3e>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <initDisplay+0x44>
 3ea:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00100000);//Function set	- 4bit mode
 3ec:	80 e2       	ldi	r24, 0x20	; 32
 3ee:	4e de       	rcall	.-868    	; 0x8c <sendByte>
 3f0:	83 ef       	ldi	r24, 0xF3	; 243
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <initDisplay+0x4e>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <initDisplay+0x54>
 3fa:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(FUNCTION_SET);	// interface length and Character font	- 4 bit en 5*8
 3fc:	88 e2       	ldi	r24, 0x28	; 40
 3fe:	55 de       	rcall	.-854    	; 0xaa <sendNibble>
 400:	83 ef       	ldi	r24, 0xF3	; 243
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CURSOR_ON_BLINK);// display on, cursor on, blink on
 40c:	8c e0       	ldi	r24, 0x0C	; 12
 40e:	4d de       	rcall	.-870    	; 0xaa <sendNibble>
 410:	83 ef       	ldi	r24, 0xF3	; 243
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CLEAR_DISPLAY);	// clear display
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	45 de       	rcall	.-886    	; 0xaa <sendNibble>
 420:	83 ef       	ldi	r24, 0xF3	; 243
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(ENTRY_MODE);		// ready to write
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	3d de       	rcall	.-902    	; 0xaa <sendNibble>
 430:	83 ef       	ldi	r24, 0xF3	; 243
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(RETURN_HOME);	// return home
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	35 de       	rcall	.-918    	; 0xaa <sendNibble>
 440:	83 ef       	ldi	r24, 0xF3	; 243
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
 44c:	9f e3       	ldi	r25, 0x3F	; 63
 44e:	2d e0       	ldi	r18, 0x0D	; 13
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	91 50       	subi	r25, 0x01	; 1
 454:	20 40       	sbci	r18, 0x00	; 0
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
 45e:	08 95       	ret

00000460 <clkLow>:
	clkLow();
	_delay_us(I2CSpeed);
}

void clkLow(void){
	PORTB &= 0b10111111;
 460:	86 b1       	in	r24, 0x06	; 6
 462:	8f 7b       	andi	r24, 0xBF	; 191
 464:	86 b9       	out	0x06, r24	; 6
 466:	08 95       	ret

00000468 <clkHigh>:
}

void clkHigh(void){
	PORTB |= 0b01000000;
 468:	86 b1       	in	r24, 0x06	; 6
 46a:	80 64       	ori	r24, 0x40	; 64
 46c:	86 b9       	out	0x06, r24	; 6
 46e:	08 95       	ret

00000470 <clkPulse>:
	sdaHigh();
	_delay_us(I2CSpeed);
}

void clkPulse(void){
	clkHigh();
 470:	fb df       	rcall	.-10     	; 0x468 <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	81 e2       	ldi	r24, 0x21	; 33
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <clkPulse+0x4>
 478:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 47a:	f2 df       	rcall	.-28     	; 0x460 <clkLow>
 47c:	81 e2       	ldi	r24, 0x21	; 33
 47e:	8a 95       	dec	r24
 480:	f1 f7       	brne	.-4      	; 0x47e <clkPulse+0xe>
 482:	00 00       	nop
 484:	08 95       	ret

00000486 <sdaLow>:
void clkHigh(void){
	PORTB |= 0b01000000;
}

void sdaLow(void){
	PORTB &= 0b01111111;
 486:	86 b1       	in	r24, 0x06	; 6
 488:	8f 77       	andi	r24, 0x7F	; 127
 48a:	86 b9       	out	0x06, r24	; 6
 48c:	08 95       	ret

0000048e <startCom>:
	clkPulse();
}

void startCom(void){
	//start condition
	sdaLow();
 48e:	fb df       	rcall	.-10     	; 0x486 <sdaLow>
 490:	81 e2       	ldi	r24, 0x21	; 33
 492:	8a 95       	dec	r24
 494:	f1 f7       	brne	.-4      	; 0x492 <startCom+0x4>
 496:	00 00       	nop
	_delay_us(I2CSpeed);
	clkLow();
 498:	e3 df       	rcall	.-58     	; 0x460 <clkLow>
 49a:	81 e2       	ldi	r24, 0x21	; 33
 49c:	8a 95       	dec	r24
 49e:	f1 f7       	brne	.-4      	; 0x49c <startCom+0xe>
 4a0:	00 00       	nop
 4a2:	08 95       	ret

000004a4 <sdaHigh>:
void sdaLow(void){
	PORTB &= 0b01111111;
}

void sdaHigh(void){
	PORTB |= 0b10000000;
 4a4:	86 b1       	in	r24, 0x06	; 6
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	86 b9       	out	0x06, r24	; 6
 4aa:	08 95       	ret

000004ac <initI2C>:
void initI2C(){
	/*
	PB7	SDA
	PB6	SCL
	*/
	sdaHigh();
 4ac:	fb df       	rcall	.-10     	; 0x4a4 <sdaHigh>
	clkHigh();
 4ae:	dc df       	rcall	.-72     	; 0x468 <clkHigh>
 4b0:	81 e2       	ldi	r24, 0x21	; 33
 4b2:	8a 95       	dec	r24
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <initI2C+0x6>
 4b6:	00 00       	nop
 4b8:	08 95       	ret

000004ba <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
 4be:	a5 d0       	rcall	.+330    	; 0x60a <reverse>
 4c0:	d8 2f       	mov	r29, r24
	for(uint8_t index = 0; index < 8; index++){
 4c2:	c0 e0       	ldi	r28, 0x00	; 0
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <sendI2C+0x1c>
		result = shift & mask;
		if(result == 0x01){
 4c6:	d0 ff       	sbrs	r29, 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <sendI2C+0x14>
			sdaHigh();
 4ca:	ec df       	rcall	.-40     	; 0x4a4 <sdaHigh>
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <sendI2C+0x16>
		}
		else{
			sdaLow();
 4ce:	db df       	rcall	.-74     	; 0x486 <sdaLow>
		}
		clkPulse();
 4d0:	cf df       	rcall	.-98     	; 0x470 <clkPulse>
		shift = (shift >> 1);	//shift right by one
 4d2:	d6 95       	lsr	r29
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
	for(uint8_t index = 0; index < 8; index++){
 4d4:	cf 5f       	subi	r28, 0xFF	; 255
 4d6:	c8 30       	cpi	r28, 0x08	; 8
 4d8:	b0 f3       	brcs	.-20     	; 0x4c6 <sendI2C+0xc>
		}
		clkPulse();
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaHigh();	//sdalow ?
 4da:	e4 df       	rcall	.-56     	; 0x4a4 <sdaHigh>
	clkPulse();
 4dc:	c9 df       	rcall	.-110    	; 0x470 <clkPulse>
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <finishCom>:
	_delay_us(I2CSpeed);
}

void finishCom(){
	// finish communication
	clkHigh();
 4e4:	c1 df       	rcall	.-126    	; 0x468 <clkHigh>
 4e6:	81 e2       	ldi	r24, 0x21	; 33
 4e8:	8a 95       	dec	r24
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <finishCom+0x4>
 4ec:	00 00       	nop
	_delay_us(I2CSpeed);
	sdaHigh();
 4ee:	da df       	rcall	.-76     	; 0x4a4 <sdaHigh>
 4f0:	81 e2       	ldi	r24, 0x21	; 33
 4f2:	8a 95       	dec	r24
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <finishCom+0xe>
 4f6:	00 00       	nop
 4f8:	08 95       	ret

000004fa <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	18 2f       	mov	r17, r24
 502:	d6 2f       	mov	r29, r22
 504:	c4 2f       	mov	r28, r20
	startCom();
 506:	c3 df       	rcall	.-122    	; 0x48e <startCom>
	sendI2C(chipAddress);
 508:	81 2f       	mov	r24, r17
 50a:	d7 df       	rcall	.-82     	; 0x4ba <sendI2C>
	sendI2C(subAddress);
 50c:	8d 2f       	mov	r24, r29
 50e:	d5 df       	rcall	.-86     	; 0x4ba <sendI2C>
	sendI2C(data);
 510:	8c 2f       	mov	r24, r28
 512:	d3 df       	rcall	.-90     	; 0x4ba <sendI2C>
	finishCom();
 514:	e7 df       	rcall	.-50     	; 0x4e4 <finishCom>
}
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	08 95       	ret

0000051e <initIO>:
	return ADCH;
}

//-----------------------------------------------------------------------------------------	MISC
void printl(uint8_t input){
	PORTA = input;
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	81 b9       	out	0x01, r24	; 1
 522:	83 b9       	out	0x03, r24	; 3
 524:	12 b8       	out	0x02, r1	; 2
 526:	90 ec       	ldi	r25, 0xC0	; 192
 528:	95 b9       	out	0x05, r25	; 5
 52a:	87 b9       	out	0x07, r24	; 7
 52c:	16 b8       	out	0x06, r1	; 6
 52e:	99 b9       	out	0x09, r25	; 9
 530:	8b b9       	out	0x0b, r24	; 11
 532:	1a b8       	out	0x0a, r1	; 10
 534:	08 95       	ret

00000536 <initADC>:
 536:	e4 e6       	ldi	r30, 0x64	; 100
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	8e 7f       	andi	r24, 0xFE	; 254
 53e:	80 83       	st	Z, r24
 540:	ea e7       	ldi	r30, 0x7A	; 122
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	80 68       	ori	r24, 0x80	; 128
 548:	80 83       	st	Z, r24
 54a:	ad e7       	ldi	r26, 0x7D	; 125
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	8c 91       	ld	r24, X
 550:	1c 92       	st	X, r1
 552:	80 81       	ld	r24, Z
 554:	84 60       	ori	r24, 0x04	; 4
 556:	80 83       	st	Z, r24
 558:	eb e7       	ldi	r30, 0x7B	; 123
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	88 60       	ori	r24, 0x08	; 8
 560:	80 83       	st	Z, r24
 562:	08 95       	ret

00000564 <ReadADCPinValue>:
 564:	ec e7       	ldi	r30, 0x7C	; 124
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	90 81       	ld	r25, Z
 56a:	89 2b       	or	r24, r25
 56c:	80 83       	st	Z, r24
 56e:	ed e7       	ldi	r30, 0x7D	; 125
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	8e 7f       	andi	r24, 0xFE	; 254
 576:	80 83       	st	Z, r24
 578:	ea e7       	ldi	r30, 0x7A	; 122
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	80 64       	ori	r24, 0x40	; 64
 580:	80 83       	st	Z, r24
 582:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 586:	08 95       	ret

00000588 <main>:
 588:	ca df       	rcall	.-108    	; 0x51e <initIO>
 58a:	d5 df       	rcall	.-86     	; 0x536 <initADC>
 58c:	8f df       	rcall	.-226    	; 0x4ac <initI2C>
 58e:	0b df       	rcall	.-490    	; 0x3a6 <initDisplay>
 590:	d0 e0       	ldi	r29, 0x00	; 0
 592:	88 e0       	ldi	r24, 0x08	; 8
 594:	e7 df       	rcall	.-50     	; 0x564 <ReadADCPinValue>
 596:	c8 2f       	mov	r28, r24
 598:	8b e0       	ldi	r24, 0x0B	; 11
 59a:	e4 df       	rcall	.-56     	; 0x564 <ReadADCPinValue>
 59c:	f8 2e       	mov	r15, r24
 59e:	8c e0       	ldi	r24, 0x0C	; 12
 5a0:	e1 df       	rcall	.-62     	; 0x564 <ReadADCPinValue>
 5a2:	08 2f       	mov	r16, r24
 5a4:	8d e0       	ldi	r24, 0x0D	; 13
 5a6:	de df       	rcall	.-68     	; 0x564 <ReadADCPinValue>
 5a8:	18 2f       	mov	r17, r24
 5aa:	8a b1       	in	r24, 0x0a	; 10
 5ac:	8c 73       	andi	r24, 0x3C	; 60
 5ae:	88 30       	cpi	r24, 0x08	; 8
 5b0:	49 f0       	breq	.+18     	; 0x5c4 <main+0x3c>
 5b2:	18 f4       	brcc	.+6      	; 0x5ba <main+0x32>
 5b4:	84 30       	cpi	r24, 0x04	; 4
 5b6:	61 f0       	breq	.+24     	; 0x5d0 <main+0x48>
 5b8:	0c c0       	rjmp	.+24     	; 0x5d2 <main+0x4a>
 5ba:	80 31       	cpi	r24, 0x10	; 16
 5bc:	29 f0       	breq	.+10     	; 0x5c8 <main+0x40>
 5be:	80 32       	cpi	r24, 0x20	; 32
 5c0:	29 f0       	breq	.+10     	; 0x5cc <main+0x44>
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <main+0x4a>
 5c4:	d1 e0       	ldi	r29, 0x01	; 1
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <main+0x4a>
 5c8:	d2 e0       	ldi	r29, 0x02	; 2
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <main+0x4a>
 5cc:	d3 e0       	ldi	r29, 0x03	; 3
 5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <main+0x4a>
 5d0:	d0 e0       	ldi	r29, 0x00	; 0
 5d2:	4d 2f       	mov	r20, r29
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	88 e8       	ldi	r24, 0x88	; 136
 5d8:	90 df       	rcall	.-224    	; 0x4fa <setTDAValue>
 5da:	4c 2f       	mov	r20, r28
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	88 e8       	ldi	r24, 0x88	; 136
 5e0:	8c df       	rcall	.-232    	; 0x4fa <setTDAValue>
 5e2:	40 e0       	ldi	r20, 0x00	; 0
 5e4:	62 e0       	ldi	r22, 0x02	; 2
 5e6:	88 e8       	ldi	r24, 0x88	; 136
 5e8:	88 df       	rcall	.-240    	; 0x4fa <setTDAValue>
 5ea:	4f 2d       	mov	r20, r15
 5ec:	63 e0       	ldi	r22, 0x03	; 3
 5ee:	88 e8       	ldi	r24, 0x88	; 136
 5f0:	84 df       	rcall	.-248    	; 0x4fa <setTDAValue>
 5f2:	40 2f       	mov	r20, r16
 5f4:	64 e0       	ldi	r22, 0x04	; 4
 5f6:	88 e8       	ldi	r24, 0x88	; 136
 5f8:	80 df       	rcall	.-256    	; 0x4fa <setTDAValue>
 5fa:	41 2f       	mov	r20, r17
 5fc:	65 e0       	ldi	r22, 0x05	; 5
 5fe:	88 e8       	ldi	r24, 0x88	; 136
 600:	7c df       	rcall	.-264    	; 0x4fa <setTDAValue>
 602:	6d 2f       	mov	r22, r29
 604:	8c 2f       	mov	r24, r28
 606:	b6 dd       	rcall	.-1172   	; 0x174 <updateDisplay>
 608:	c4 cf       	rjmp	.-120    	; 0x592 <main+0xa>

0000060a <reverse>:
}

uint8_t reverse(uint8_t b) {
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 60a:	28 2f       	mov	r18, r24
 60c:	22 95       	swap	r18
 60e:	2f 70       	andi	r18, 0x0F	; 15
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	82 95       	swap	r24
 614:	92 95       	swap	r25
 616:	90 7f       	andi	r25, 0xF0	; 240
 618:	98 27       	eor	r25, r24
 61a:	80 7f       	andi	r24, 0xF0	; 240
 61c:	98 27       	eor	r25, r24
 61e:	92 2f       	mov	r25, r18
 620:	98 2b       	or	r25, r24
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 622:	29 2f       	mov	r18, r25
 624:	2c 7c       	andi	r18, 0xCC	; 204
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	35 95       	asr	r19
 62a:	27 95       	ror	r18
 62c:	35 95       	asr	r19
 62e:	27 95       	ror	r18
 630:	93 73       	andi	r25, 0x33	; 51
 632:	89 2f       	mov	r24, r25
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	82 2b       	or	r24, r18
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 640:	28 2f       	mov	r18, r24
 642:	2a 7a       	andi	r18, 0xAA	; 170
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	35 95       	asr	r19
 648:	27 95       	ror	r18
 64a:	85 75       	andi	r24, 0x55	; 85
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
	return b;
}
 652:	82 2b       	or	r24, r18
 654:	08 95       	ret

00000656 <__udivmodqi4>:
 656:	99 1b       	sub	r25, r25
 658:	79 e0       	ldi	r23, 0x09	; 9
 65a:	04 c0       	rjmp	.+8      	; 0x664 <__udivmodqi4_ep>

0000065c <__udivmodqi4_loop>:
 65c:	99 1f       	adc	r25, r25
 65e:	96 17       	cp	r25, r22
 660:	08 f0       	brcs	.+2      	; 0x664 <__udivmodqi4_ep>
 662:	96 1b       	sub	r25, r22

00000664 <__udivmodqi4_ep>:
 664:	88 1f       	adc	r24, r24
 666:	7a 95       	dec	r23
 668:	c9 f7       	brne	.-14     	; 0x65c <__udivmodqi4_loop>
 66a:	80 95       	com	r24
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
