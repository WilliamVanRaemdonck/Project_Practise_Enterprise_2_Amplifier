
Practice Enterprise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000676  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080017e  0080017e  00000788  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bb7  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c11  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db9  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00003ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fe  00000000  00000000  000041c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d48  00000000  00000000  000048c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	db c2       	rjmp	.+1462   	; 0x5ca <__vector_9>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e7       	ldi	r30, 0x76	; 118
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 37       	cpi	r26, 0x7E	; 126
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e7       	ldi	r26, 0x7E	; 126
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 39       	cpi	r26, 0x9D	; 157
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	45 d2       	rcall	.+1162   	; 0x4f2 <main>
  68:	04 c3       	rjmp	.+1544   	; 0x672 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <setRS>:
	sendNibble(RETURN_HOME);	// return home
	_delay_ms(2);	//>1.67ms
}

void setRS(void){
	PORTC |= 0b01000000;
  6c:	8a b1       	in	r24, 0x0a	; 10
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8a b9       	out	0x0a, r24	; 10
  72:	08 95       	ret

00000074 <clearRS>:
}

void clearRS(void){
	PORTC &= 0b10111111;
  74:	8a b1       	in	r24, 0x0a	; 10
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	8a b9       	out	0x0a, r24	; 10
  7a:	08 95       	ret

0000007c <setEnable>:
}

void setEnable(void){
	PORTC |= 0b10000000;
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8a b9       	out	0x0a, r24	; 10
  82:	08 95       	ret

00000084 <clearEnable>:
}

void clearEnable(void){
	PORTC &= 0b01111111;
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	08 95       	ret

0000008c <sendByte>:
	}
}

void sendByte(char data){
	//send data
	PORTA = data;
  8c:	82 b9       	out	0x02, r24	; 2
	
	//pulse enable
	setEnable();
  8e:	f6 df       	rcall	.-20     	; 0x7c <setEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	85 e8       	ldi	r24, 0x85	; 133
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <sendByte+0x6>
  96:	00 00       	nop
	_delay_us(50);
	clearEnable();
  98:	f5 df       	rcall	.-22     	; 0x84 <clearEnable>
  9a:	85 e8       	ldi	r24, 0x85	; 133
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <sendByte+0x10>
  a0:	00 00       	nop
	_delay_us(50);
	
	//default position
	clearEnable();
  a2:	f0 df       	rcall	.-32     	; 0x84 <clearEnable>
	clearRS();
  a4:	e7 df       	rcall	.-50     	; 0x74 <clearRS>
	PORTA = 0x00;
  a6:	12 b8       	out	0x02, r1	; 2
  a8:	08 95       	ret

000000aa <sendNibble>:
}

void sendNibble(char data){
  aa:	cf 93       	push	r28
	uint8_t input = 0x00;
	uint8_t leftNibble = 0x00;
	uint8_t rightNibble = 0x00;
	
	//X to blok
	if(data == 0b01011001){		//data == Y ?
  ac:	89 35       	cpi	r24, 0x59	; 89
  ae:	31 f0       	breq	.+12     	; 0xbc <sendNibble+0x12>
		rightNibble = 0xFF;
	}
	else{
		input = (uint8_t)data;
		
		leftNibble = (input & 0b11110000);
  b0:	98 2f       	mov	r25, r24
  b2:	90 7f       	andi	r25, 0xF0	; 240
		
		input = (((uint8_t)data) << 4);
  b4:	c8 2f       	mov	r28, r24
  b6:	c2 95       	swap	r28
  b8:	c0 7f       	andi	r28, 0xF0	; 240
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <sendNibble+0x16>
	uint8_t rightNibble = 0x00;
	
	//X to blok
	if(data == 0b01011001){		//data == Y ?
		leftNibble = 0xFF;
		rightNibble = 0xFF;
  bc:	cf ef       	ldi	r28, 0xFF	; 255
	uint8_t leftNibble = 0x00;
	uint8_t rightNibble = 0x00;
	
	//X to blok
	if(data == 0b01011001){		//data == Y ?
		leftNibble = 0xFF;
  be:	9f ef       	ldi	r25, 0xFF	; 255
		input = (((uint8_t)data) << 4);
		rightNibble = (input & 0b11110000);
	}
	
	//data send
	PORTA = leftNibble;
  c0:	92 b9       	out	0x02, r25	; 2
	
	//pulse
	setEnable();
  c2:	dc df       	rcall	.-72     	; 0x7c <setEnable>
  c4:	85 e8       	ldi	r24, 0x85	; 133
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <sendNibble+0x1c>
  ca:	00 00       	nop
	//_delay_ms(2);
	_delay_us(50);
	clearEnable();
  cc:	db df       	rcall	.-74     	; 0x84 <clearEnable>
  ce:	85 e8       	ldi	r24, 0x85	; 133
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <sendNibble+0x26>
  d4:	00 00       	nop
	//_delay_ms(2);
	_delay_us(50);
	
	//data send
	PORTA = rightNibble;
  d6:	c2 b9       	out	0x02, r28	; 2
	
	//pulse
	setEnable();
  d8:	d1 df       	rcall	.-94     	; 0x7c <setEnable>
  da:	85 e8       	ldi	r24, 0x85	; 133
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <sendNibble+0x32>
  e0:	00 00       	nop
	//_delay_ms(2);
	_delay_us(50);
	clearEnable();
  e2:	d0 df       	rcall	.-96     	; 0x84 <clearEnable>
  e4:	85 e8       	ldi	r24, 0x85	; 133
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <sendNibble+0x3c>
  ea:	00 00       	nop
	//_delay_ms(2);
	_delay_us(50);
	
	//default position
	clearEnable();
  ec:	cb df       	rcall	.-106    	; 0x84 <clearEnable>
	clearRS();
  ee:	c2 df       	rcall	.-124    	; 0x74 <clearRS>
	PORTA = 0x00;
  f0:	12 b8       	out	0x02, r1	; 2
}
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <clearLCD>:

void clearLCD(void){
	sendNibble(CLEAR_DISPLAY);	// clear display
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	d8 df       	rcall	.-80     	; 0xaa <sendNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e9       	ldi	r24, 0x9F	; 159
  fc:	9f e0       	ldi	r25, 0x0F	; 15
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <clearLCD+0x8>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <cursorHome>:
	_delay_ms(2);	//>1.67ms
}

void cursorHome(void){
	sendNibble(RETURN_HOME);	// return home
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	cf df       	rcall	.-98     	; 0xaa <sendNibble>
 10c:	8f e9       	ldi	r24, 0x9F	; 159
 10e:	9f e0       	ldi	r25, 0x0F	; 15
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <cursorHome+0x8>
 114:	00 c0       	rjmp	.+0      	; 0x116 <cursorHome+0xe>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <writeToDisplay>:
	writeToDisplay(barStr, strlen(barStr), 0xc0);
	//writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
	writeToDisplay(muxStr, strlen(muxStr), 0xd4);
}

void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	7c 01       	movw	r14, r24
 128:	06 2f       	mov	r16, r22
 12a:	14 2f       	mov	r17, r20
	uint8_t addressF = DDRAMaddress;
	
	cursorHome();
 12c:	ed df       	rcall	.-38     	; 0x108 <cursorHome>
	
	for(int i = 0; i < length;i++){
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	11 c0       	rjmp	.+34     	; 0x156 <writeToDisplay+0x3c>
		sendNibble(addressF);		//address = 0 DDRAM
 134:	81 2f       	mov	r24, r17
 136:	b9 df       	rcall	.-142    	; 0xaa <sendNibble>
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <writeToDisplay+0x22>
 140:	00 c0       	rjmp	.+0      	; 0x142 <writeToDisplay+0x28>
 142:	00 00       	nop
		//_delay_us(2);				
		_delay_ms(2);				//>1.67ms
		
		setRS();
 144:	93 df       	rcall	.-218    	; 0x6c <setRS>
		sendNibble(data[i]);
 146:	f7 01       	movw	r30, r14
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	80 81       	ld	r24, Z
 14e:	ad df       	rcall	.-166    	; 0xaa <sendNibble>
		clearRS();
 150:	91 df       	rcall	.-222    	; 0x74 <clearRS>
		
		addressF++;
 152:	1f 5f       	subi	r17, 0xFF	; 255
void writeToDisplay(char data[], uint8_t length, uint8_t DDRAMaddress){
	uint8_t addressF = DDRAMaddress;
	
	cursorHome();
	
	for(int i = 0; i < length;i++){
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	80 2f       	mov	r24, r16
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	c8 17       	cp	r28, r24
 15c:	d9 07       	cpc	r29, r25
 15e:	54 f3       	brlt	.-44     	; 0x134 <writeToDisplay+0x1a>
		sendNibble(data[i]);
		clearRS();
		
		addressF++;
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	08 95       	ret

0000016e <updateDisplay>:
	
	writeToDisplay(volStrText, strlen(volStrText), 0x80);
	writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
}

void updateDisplay(uint8_t displayValueF, uint8_t mux){
 16e:	46 2f       	mov	r20, r22
	//2 ??????_______________	address: 0xc0
	//3 INPUT:					address: 0x94
	//4 [] [] [?] []			address: 0xd4

	// volume string
	bars = displayValueF / 12; // 0 - 255 => 0 - 20 => / 12.75 ~ 12
 170:	6c e0       	ldi	r22, 0x0C	; 12
 172:	73 d2       	rcall	.+1254   	; 0x65a <__udivmodqi4>
 174:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <bars>
	blanks = 20 - bars;
 178:	94 e1       	ldi	r25, 0x14	; 20
 17a:	98 1b       	sub	r25, r24
 17c:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <__data_end>
	
	//assemble string
	strcpy(barStr, "");
 180:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <barStr>
	for(int i = 0; i < bars; i++){
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	0c c0       	rjmp	.+24     	; 0x1a2 <updateDisplay+0x34>
		strcat(barStr, "Y");
 18a:	e7 e8       	ldi	r30, 0x87	; 135
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	01 90       	ld	r0, Z+
 190:	00 20       	and	r0, r0
 192:	e9 f7       	brne	.-6      	; 0x18e <updateDisplay+0x20>
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	89 e5       	ldi	r24, 0x59	; 89
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	91 83       	std	Z+1, r25	; 0x01
 19c:	80 83       	st	Z, r24
	bars = displayValueF / 12; // 0 - 255 => 0 - 20 => / 12.75 ~ 12
	blanks = 20 - bars;
	
	//assemble string
	strcpy(barStr, "");
	for(int i = 0; i < bars; i++){
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <bars>
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	28 17       	cp	r18, r24
 1aa:	39 07       	cpc	r19, r25
 1ac:	74 f3       	brlt	.-36     	; 0x18a <updateDisplay+0x1c>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	0c c0       	rjmp	.+24     	; 0x1cc <updateDisplay+0x5e>
		strcat(barStr, "Y");
	}
	for(int i = 0; i < blanks; i++){
		strcat(barStr, "_");
 1b4:	e7 e8       	ldi	r30, 0x87	; 135
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	01 90       	ld	r0, Z+
 1ba:	00 20       	and	r0, r0
 1bc:	e9 f7       	brne	.-6      	; 0x1b8 <updateDisplay+0x4a>
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	8f e5       	ldi	r24, 0x5F	; 95
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	91 83       	std	Z+1, r25	; 0x01
 1c6:	80 83       	st	Z, r24
	//assemble string
	strcpy(barStr, "");
	for(int i = 0; i < bars; i++){
		strcat(barStr, "Y");
	}
	for(int i = 0; i < blanks; i++){
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	28 17       	cp	r18, r24
 1d4:	39 07       	cpc	r19, r25
 1d6:	74 f3       	brlt	.-36     	; 0x1b4 <updateDisplay+0x46>
		strcat(barStr, "_");
	}
	
	//mux string
	muxStr = muxTable[mux];
 1d8:	e4 2f       	mov	r30, r20
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	e0 50       	subi	r30, 0x00	; 0
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	91 81       	ldd	r25, Z+1	; 0x01
 1e8:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <muxStr+0x1>
 1ec:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <muxStr>
	
	//writeToDisplay(volStrText, strlen(volStrText), 0x80);
	writeToDisplay(barStr, strlen(barStr), 0xc0);
 1f0:	e7 e8       	ldi	r30, 0x87	; 135
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	01 90       	ld	r0, Z+
 1f6:	00 20       	and	r0, r0
 1f8:	e9 f7       	brne	.-6      	; 0x1f4 <updateDisplay+0x86>
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	bf 01       	movw	r22, r30
 1fe:	67 58       	subi	r22, 0x87	; 135
 200:	71 40       	sbci	r23, 0x01	; 1
 202:	40 ec       	ldi	r20, 0xC0	; 192
 204:	87 e8       	ldi	r24, 0x87	; 135
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	88 df       	rcall	.-240    	; 0x11a <writeToDisplay>
	//writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
	writeToDisplay(muxStr, strlen(muxStr), 0xd4);
 20a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <muxStr>
 20e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <muxStr+0x1>
 212:	fc 01       	movw	r30, r24
 214:	01 90       	ld	r0, Z+
 216:	00 20       	and	r0, r0
 218:	e9 f7       	brne	.-6      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	bf 01       	movw	r22, r30
 21e:	68 1b       	sub	r22, r24
 220:	79 0b       	sbc	r23, r25
 222:	44 ed       	ldi	r20, 0xD4	; 212
 224:	7a df       	rcall	.-268    	; 0x11a <writeToDisplay>
 226:	08 95       	ret

00000228 <initDisplay>:
uint8_t bars = 0;
uint8_t blanks = 0;

void initDisplay(void){
	//init
	setRS();
 228:	21 df       	rcall	.-446    	; 0x6c <setRS>
	setEnable();
 22a:	28 df       	rcall	.-432    	; 0x7c <setEnable>
	PORTA = 0x00;
 22c:	12 b8       	out	0x02, r1	; 2
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	84 e3       	ldi	r24, 0x34	; 52
 232:	9c e0       	ldi	r25, 0x0C	; 12
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <initDisplay+0xc>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <initDisplay+0x16>
 23e:	00 00       	nop
	//power on delay
	_delay_ms(500);
	
	clearEnable();
 240:	21 df       	rcall	.-446    	; 0x84 <clearEnable>
	clearRS();
 242:	18 df       	rcall	.-464    	; 0x74 <clearRS>
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	84 e3       	ldi	r24, 0x34	; 52
 248:	9c e0       	ldi	r25, 0x0C	; 12
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <initDisplay+0x22>
 252:	00 c0       	rjmp	.+0      	; 0x254 <initDisplay+0x2c>
 254:	00 00       	nop
	_delay_ms(500);
	
	//send function set 3 times
	sendByte(0b00110000);//Function set
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	19 df       	rcall	.-462    	; 0x8c <sendByte>
 25a:	8f e0       	ldi	r24, 0x0F	; 15
 25c:	97 e2       	ldi	r25, 0x27	; 39
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <initDisplay+0x36>
 262:	00 c0       	rjmp	.+0      	; 0x264 <initDisplay+0x3c>
 264:	00 00       	nop
	_delay_ms(5);	//>4.1
	
	sendByte(0b00110000);//Function set
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	11 df       	rcall	.-478    	; 0x8c <sendByte>
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <initDisplay+0x46>
 272:	00 c0       	rjmp	.+0      	; 0x274 <initDisplay+0x4c>
 274:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00110000);//Function set
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	09 df       	rcall	.-494    	; 0x8c <sendByte>
 27a:	8f e9       	ldi	r24, 0x9F	; 159
 27c:	9f e0       	ldi	r25, 0x0F	; 15
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <initDisplay+0x56>
 282:	00 c0       	rjmp	.+0      	; 0x284 <initDisplay+0x5c>
 284:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendByte(0b00100000);//Function set	- 4bit mode
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	01 df       	rcall	.-510    	; 0x8c <sendByte>
 28a:	8f e9       	ldi	r24, 0x9F	; 159
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <initDisplay+0x66>
 292:	00 c0       	rjmp	.+0      	; 0x294 <initDisplay+0x6c>
 294:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(FUNCTION_SET);	// interface length and Character font	- 4 bit en 5*8
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	08 df       	rcall	.-496    	; 0xaa <sendNibble>
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <initDisplay+0x76>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <initDisplay+0x7c>
 2a4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CURSOR_ON_BLINK);// display on, cursor on, blink on
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	00 df       	rcall	.-512    	; 0xaa <sendNibble>
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <initDisplay+0x86>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <initDisplay+0x8c>
 2b4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(CLEAR_DISPLAY);	// clear display
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	f8 de       	rcall	.-528    	; 0xaa <sendNibble>
 2ba:	8f e9       	ldi	r24, 0x9F	; 159
 2bc:	9f e0       	ldi	r25, 0x0F	; 15
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <initDisplay+0x96>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <initDisplay+0x9c>
 2c4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(ENTRY_MODE);		// ready to write
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	f0 de       	rcall	.-544    	; 0xaa <sendNibble>
 2ca:	8f e9       	ldi	r24, 0x9F	; 159
 2cc:	9f e0       	ldi	r25, 0x0F	; 15
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <initDisplay+0xa6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <initDisplay+0xac>
 2d4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	sendNibble(RETURN_HOME);	// return home
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	e8 de       	rcall	.-560    	; 0xaa <sendNibble>
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <initDisplay+0xb6>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <initDisplay+0xbc>
 2e4:	00 00       	nop
	_delay_ms(2);	//>1.67ms
	
	clearLCD();
 2e6:	07 df       	rcall	.-498    	; 0xf6 <clearLCD>
	
	writeToDisplay(volStrText, strlen(volStrText), 0x80);
 2e8:	e8 e0       	ldi	r30, 0x08	; 8
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	01 90       	ld	r0, Z+
 2ee:	00 20       	and	r0, r0
 2f0:	e9 f7       	brne	.-6      	; 0x2ec <initDisplay+0xc4>
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	bf 01       	movw	r22, r30
 2f6:	68 50       	subi	r22, 0x08	; 8
 2f8:	71 40       	sbci	r23, 0x01	; 1
 2fa:	40 e8       	ldi	r20, 0x80	; 128
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0c df       	rcall	.-488    	; 0x11a <writeToDisplay>
	writeToDisplay(inpStrText, strlen(inpStrText), 0x94);
 302:	e3 e1       	ldi	r30, 0x13	; 19
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	01 90       	ld	r0, Z+
 308:	00 20       	and	r0, r0
 30a:	e9 f7       	brne	.-6      	; 0x306 <__stack+0x7>
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	bf 01       	movw	r22, r30
 310:	63 51       	subi	r22, 0x13	; 19
 312:	71 40       	sbci	r23, 0x01	; 1
 314:	44 e9       	ldi	r20, 0x94	; 148
 316:	83 e1       	ldi	r24, 0x13	; 19
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	ff de       	rcall	.-514    	; 0x11a <writeToDisplay>
 31c:	08 95       	ret

0000031e <EEPROM_write>:
#include "EEPROM.h"
#include <avr/interrupt.h>

void EEPROM_write(uint8_t ucAddress, uint8_t ucData)
{
	cli();
 31e:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
 320:	f9 99       	sbic	0x1f, 1	; 31
 322:	fe cf       	rjmp	.-4      	; 0x320 <EEPROM_write+0x2>
	/* Set Programming mode */
	EECR = (0<<EEPM1)|(0<<EEPM0);
 324:	1f ba       	out	0x1f, r1	; 31
	/* Set up address and data registers */
	EEAR = ucAddress; 
 326:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 328:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
 32a:	8f b3       	in	r24, 0x1f	; 31
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
 330:	8f b3       	in	r24, 0x1f	; 31
 332:	82 60       	ori	r24, 0x02	; 2
 334:	8f bb       	out	0x1f, r24	; 31
	sei();
 336:	78 94       	sei
 338:	08 95       	ret

0000033a <EEPROM_read>:
}

uint8_t EEPROM_read(uint8_t ucAddress)
{
	cli();
 33a:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
 33c:	f9 99       	sbic	0x1f, 1	; 31
 33e:	fe cf       	rjmp	.-4      	; 0x33c <EEPROM_read+0x2>
	/* Set up address register */
	EEAR = ucAddress;
 340:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 342:	8f b3       	in	r24, 0x1f	; 31
 344:	81 60       	ori	r24, 0x01	; 1
 346:	8f bb       	out	0x1f, r24	; 31
	/* Return data from data register */
	sei();
 348:	78 94       	sei
	return EEDR;
 34a:	80 b5       	in	r24, 0x20	; 32
 34c:	08 95       	ret

0000034e <clkLow>:
	clkLow();
	_delay_us(I2CSpeed);
}

void clkLow(void){
	PORTB &= 0b01111111;
 34e:	86 b1       	in	r24, 0x06	; 6
 350:	8f 77       	andi	r24, 0x7F	; 127
 352:	86 b9       	out	0x06, r24	; 6
 354:	08 95       	ret

00000356 <clkHigh>:
	//PORTB &= ~(1<<PINB6);
}

void clkHigh(void){
	PORTB |= 0b10000000;
 356:	86 b1       	in	r24, 0x06	; 6
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	86 b9       	out	0x06, r24	; 6
 35c:	08 95       	ret

0000035e <clkPulse>:
	sdaHigh();
	_delay_us(I2CSpeed);
}

void clkPulse(void){
	clkHigh();
 35e:	fb df       	rcall	.-10     	; 0x356 <clkHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	8a e8       	ldi	r24, 0x8A	; 138
 362:	8a 95       	dec	r24
 364:	f1 f7       	brne	.-4      	; 0x362 <clkPulse+0x4>
 366:	00 c0       	rjmp	.+0      	; 0x368 <clkPulse+0xa>
	_delay_us(I2CSpeed);
	clkLow();
 368:	f2 df       	rcall	.-28     	; 0x34e <clkLow>
 36a:	8a e8       	ldi	r24, 0x8A	; 138
 36c:	8a 95       	dec	r24
 36e:	f1 f7       	brne	.-4      	; 0x36c <clkPulse+0xe>
 370:	00 c0       	rjmp	.+0      	; 0x372 <clkPulse+0x14>
 372:	08 95       	ret

00000374 <sdaLow>:
	PORTB |= 0b10000000;
	//PORTB |= (1<<PINB6);
}

void sdaLow(void){
	PORTB &= 0b10111111;
 374:	86 b1       	in	r24, 0x06	; 6
 376:	8f 7b       	andi	r24, 0xBF	; 191
 378:	86 b9       	out	0x06, r24	; 6
 37a:	08 95       	ret

0000037c <startCom>:
	clkPulse();
}

void startCom(void){
	//start condition
	sdaLow();
 37c:	fb df       	rcall	.-10     	; 0x374 <sdaLow>
 37e:	8a e8       	ldi	r24, 0x8A	; 138
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <startCom+0x4>
 384:	00 c0       	rjmp	.+0      	; 0x386 <startCom+0xa>
	_delay_us(I2CSpeed);
	clkLow();
 386:	e3 df       	rcall	.-58     	; 0x34e <clkLow>
 388:	8a e8       	ldi	r24, 0x8A	; 138
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <startCom+0xe>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <startCom+0x14>
 390:	08 95       	ret

00000392 <sdaHigh>:
	PORTB &= 0b10111111;
	//PORTB &= ~(1<<PINB7);
}

void sdaHigh(void){
	PORTB |= 0b01000000;
 392:	86 b1       	in	r24, 0x06	; 6
 394:	80 64       	ori	r24, 0x40	; 64
 396:	86 b9       	out	0x06, r24	; 6
 398:	08 95       	ret

0000039a <initI2C>:

#include "../main.h"
#include "I2C.h"

void initI2C(){
	sdaHigh();
 39a:	fb df       	rcall	.-10     	; 0x392 <sdaHigh>
	clkHigh();
 39c:	dc df       	rcall	.-72     	; 0x356 <clkHigh>
 39e:	8a e8       	ldi	r24, 0x8A	; 138
 3a0:	8a 95       	dec	r24
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <initI2C+0x6>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <initI2C+0xc>
 3a6:	08 95       	ret

000003a8 <sendI2C>:
	sendI2C(subAddress);
	sendI2C(data);
	finishCom();
}

void sendI2C(uint8_t input){
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	uint8_t shift = 0x00;
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
 3ac:	77 d0       	rcall	.+238    	; 0x49c <reverse>
 3ae:	d8 2f       	mov	r29, r24
	for(uint8_t index = 0; index < 8; index++){
 3b0:	c0 e0       	ldi	r28, 0x00	; 0
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <sendI2C+0x1c>
		result = shift & mask;
		if(result == 0x01){
 3b4:	d0 ff       	sbrs	r29, 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <sendI2C+0x14>
			sdaHigh();
 3b8:	ec df       	rcall	.-40     	; 0x392 <sdaHigh>
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <sendI2C+0x16>
		}
		else{
			sdaLow();
 3bc:	db df       	rcall	.-74     	; 0x374 <sdaLow>
		}
		clkPulse();
 3be:	cf df       	rcall	.-98     	; 0x35e <clkPulse>
		shift = (shift >> 1);	//shift right by one
 3c0:	d6 95       	lsr	r29
	uint8_t mask = 0b00000001;
	uint8_t result = 0x00;
	
	//send input
	shift = reverse(input);
	for(uint8_t index = 0; index < 8; index++){
 3c2:	cf 5f       	subi	r28, 0xFF	; 255
 3c4:	c8 30       	cpi	r28, 0x08	; 8
 3c6:	b0 f3       	brcs	.-20     	; 0x3b4 <sendI2C+0xc>
		}
		clkPulse();
		shift = (shift >> 1);	//shift right by one
	}
	//ACK
	sdaHigh();
 3c8:	e4 df       	rcall	.-56     	; 0x392 <sdaHigh>
	clkPulse();
 3ca:	c9 df       	rcall	.-110    	; 0x35e <clkPulse>
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <finishCom>:
	_delay_us(I2CSpeed);
}

void finishCom(){
	// finish communication
	clkHigh();
 3d2:	c1 df       	rcall	.-126    	; 0x356 <clkHigh>
 3d4:	8a e8       	ldi	r24, 0x8A	; 138
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <finishCom+0x4>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <finishCom+0xa>
	_delay_us(I2CSpeed);
	sdaHigh();
 3dc:	da df       	rcall	.-76     	; 0x392 <sdaHigh>
 3de:	8a e8       	ldi	r24, 0x8A	; 138
 3e0:	8a 95       	dec	r24
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <finishCom+0xe>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <finishCom+0x14>
 3e6:	08 95       	ret

000003e8 <setTDAValue>:
	sdaHigh();
	clkHigh();
	_delay_us(I2CSpeed);
}

void setTDAValue(uint8_t chipAddress, uint8_t subAddress, uint8_t data){
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	18 2f       	mov	r17, r24
 3f0:	d6 2f       	mov	r29, r22
 3f2:	c4 2f       	mov	r28, r20
	startCom();
 3f4:	c3 df       	rcall	.-122    	; 0x37c <startCom>
	sendI2C(chipAddress);
 3f6:	81 2f       	mov	r24, r17
 3f8:	d7 df       	rcall	.-82     	; 0x3a8 <sendI2C>
	sendI2C(subAddress);
 3fa:	8d 2f       	mov	r24, r29
 3fc:	d5 df       	rcall	.-86     	; 0x3a8 <sendI2C>
	sendI2C(data);
 3fe:	8c 2f       	mov	r24, r28
 400:	d3 df       	rcall	.-90     	; 0x3a8 <sendI2C>
	finishCom();
 402:	e7 df       	rcall	.-50     	; 0x3d2 <finishCom>
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	08 95       	ret

0000040c <initIO>:
}

//-----------------------------------------------------------------------------------------	IO
void initIO(){
	//PORT A
	DDRA = 0xff;	//output			
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	81 b9       	out	0x01, r24	; 1
	PUEA = 0xff;	//Set pull ups
 410:	83 b9       	out	0x03, r24	; 3
	PORTA = 0x00;	//write zero
 412:	12 b8       	out	0x02, r1	; 2
	//PORT B
	DDRB = 0b11000000;	//output
 414:	90 ec       	ldi	r25, 0xC0	; 192
 416:	95 b9       	out	0x05, r25	; 5
	PUEB = 0xff;		//Set pull ups
 418:	87 b9       	out	0x07, r24	; 7
	PORTB = 0b00000000;	//write zero
 41a:	16 b8       	out	0x06, r1	; 6
	//PORT C
	DDRC = 0b11000000;	//output
 41c:	99 b9       	out	0x09, r25	; 9
	PUEC = 0xff;		//Set pull ups
 41e:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0b00000000;	//write zero
 420:	1a b8       	out	0x0a, r1	; 10
 422:	08 95       	ret

00000424 <initADC>:
}

//-----------------------------------------------------------------------------------------	ADC
void initADC(){
	PRR		&= 0b11111110;		//turn power saving off
 424:	e4 e6       	ldi	r30, 0x64	; 100
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	8e 7f       	andi	r24, 0xFE	; 254
 42c:	80 83       	st	Z, r24
	ADCSRA	|= 0b10000000;		//turn ADEN on
 42e:	ea e7       	ldi	r30, 0x7A	; 122
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	80 68       	ori	r24, 0x80	; 128
 436:	80 83       	st	Z, r24
	ADMUXB	&= 0b00000000;		//Voltage reference VCC
 438:	ad e7       	ldi	r26, 0x7D	; 125
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	8c 91       	ld	r24, X
 43e:	1c 92       	st	X, r1
	ADCSRA	|= 0b00000100;		//set Scaler 0100 => /16
 440:	80 81       	ld	r24, Z
 442:	84 60       	ori	r24, 0x04	; 4
 444:	80 83       	st	Z, r24
	ADCSRB	|= 0b00001000;		//left adjusted
 446:	eb e7       	ldi	r30, 0x7B	; 123
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	80 83       	st	Z, r24
 450:	08 95       	ret

00000452 <ReadADCPinValue>:
}

uint8_t ReadADCPinValue(uint8_t ADCReadPin){
	ADMUXA = ADCReadPin;
 452:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 456:	ea e7       	ldi	r30, 0x7A	; 122
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	80 64       	ori	r24, 0x40	; 64
 45e:	80 83       	st	Z, r24
	
	// Wait for ADC conversion to complete
	while (ADCSRA & (1 << ADSC));
 460:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 464:	86 fd       	sbrc	r24, 6
 466:	fc cf       	rjmp	.-8      	; 0x460 <ReadADCPinValue+0xe>
	
	// Return ADC result
	return ADCH;
 468:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
}
 46c:	08 95       	ret

0000046e <initTimer1>:

//-----------------------------------------------------------------------------------------	Timer1
void initTimer1(void){
	PRR	   &= 0b11110111;						//power saving off
 46e:	e4 e6       	ldi	r30, 0x64	; 100
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	87 7f       	andi	r24, 0xF7	; 247
 476:	80 83       	st	Z, r24

	TCCR1B |= (1 << WGM12 );					// Configure timer 1 for CTC mode
 478:	e1 e8       	ldi	r30, 0x81	; 129
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	88 60       	ori	r24, 0x08	; 8
 480:	80 83       	st	Z, r24
	OCR1A = 0;
 482:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 486:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>
	
	TIMSK1 |= (1 << OCIE1A );					// Enable CTC interrupt
 48a:	af e6       	ldi	r26, 0x6F	; 111
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	8c 91       	ld	r24, X
 490:	82 60       	ori	r24, 0x02	; 2
 492:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11 ) | (1 << CS10 );		// prescaler of 64
 494:	80 81       	ld	r24, Z
 496:	83 60       	ori	r24, 0x03	; 3
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret

0000049c <reverse>:
}

//-----------------------------------------------------------------------------------------	MISC
// src: https://stackoverflow.com/questions/2602823/in-c-c-whats-the-simplest-way-to-reverse-the-order-of-bits-in-a-byte
uint8_t reverse(uint8_t b) {
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 49c:	28 2f       	mov	r18, r24
 49e:	22 95       	swap	r18
 4a0:	2f 70       	andi	r18, 0x0F	; 15
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	82 95       	swap	r24
 4a6:	92 95       	swap	r25
 4a8:	90 7f       	andi	r25, 0xF0	; 240
 4aa:	98 27       	eor	r25, r24
 4ac:	80 7f       	andi	r24, 0xF0	; 240
 4ae:	98 27       	eor	r25, r24
 4b0:	92 2f       	mov	r25, r18
 4b2:	98 2b       	or	r25, r24
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 4b4:	29 2f       	mov	r18, r25
 4b6:	2c 7c       	andi	r18, 0xCC	; 204
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	35 95       	asr	r19
 4bc:	27 95       	ror	r18
 4be:	35 95       	asr	r19
 4c0:	27 95       	ror	r18
 4c2:	93 73       	andi	r25, 0x33	; 51
 4c4:	89 2f       	mov	r24, r25
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	82 2b       	or	r24, r18
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 4d2:	28 2f       	mov	r18, r24
 4d4:	2a 7a       	andi	r18, 0xAA	; 170
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	35 95       	asr	r19
 4da:	27 95       	ror	r18
 4dc:	85 75       	andi	r24, 0x55	; 85
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
	return b;
}
 4e4:	82 2b       	or	r24, r18
 4e6:	08 95       	ret

000004e8 <initclk>:

void initclk(void){
	//Set prescaler to 1;
	CCP	= 0xD8;		
 4e8:	88 ed       	ldi	r24, 0xD8	; 216
 4ea:	86 bf       	out	0x36, r24	; 54
	CLKPR = 0x00;
 4ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7fe061>
 4f0:	08 95       	ret

000004f2 <main>:
	//wdt_enable(WDTO_2S);
	//wdt_reset(); // optional, to prevent the watchdog from triggering an unwanted reset
	//WDTCSR |= (1 << WDE) | (1 << WDCE);
	//WDTCSR = (1 << RESET);
	
	initclk();
 4f2:	fa df       	rcall	.-12     	; 0x4e8 <initclk>
	
	//IO
	initIO();
 4f4:	8b df       	rcall	.-234    	; 0x40c <initIO>
	
	//ADC
	initADC();
 4f6:	96 df       	rcall	.-212    	; 0x424 <initADC>
	
	//TIMER1
	initTimer1();
 4f8:	ba df       	rcall	.-140    	; 0x46e <initTimer1>

	//I2C
	initI2C();
 4fa:	4f df       	rcall	.-354    	; 0x39a <initI2C>
	
	//DISPLAY
	initDisplay();
 4fc:	95 de       	rcall	.-726    	; 0x228 <initDisplay>
	
	//ENABLE INTERRUPTS
	sei();
 4fe:	78 94       	sei
	
	//read volume value
	volume = EEPROM_read(0x00);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	1b df       	rcall	.-458    	; 0x33a <EEPROM_read>
 504:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <volume>
	
	//unmute TDA IC
	setTDAValue(CHIP_ADDRESS, SubAdr_Speaker_attenuation_L, 0x00);
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	66 e0       	ldi	r22, 0x06	; 6
 50c:	88 e8       	ldi	r24, 0x88	; 136
 50e:	6c df       	rcall	.-296    	; 0x3e8 <setTDAValue>
	setTDAValue(CHIP_ADDRESS, SubAdr_Speaker_attenuation_R, 0x00);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	67 e0       	ldi	r22, 0x07	; 7
 514:	88 e8       	ldi	r24, 0x88	; 136
 516:	68 df       	rcall	.-304    	; 0x3e8 <setTDAValue>
	setTDAValue(CHIP_ADDRESS, SubAdr_Volume, 0x00);
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	62 e0       	ldi	r22, 0x02	; 2
 51c:	88 e8       	ldi	r24, 0x88	; 136
 51e:	64 df       	rcall	.-312    	; 0x3e8 <setTDAValue>
		
	while (1)
	{
		//read inputs
		gain = ReadADCPinValue(0b00001000);			//PB0
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	97 df       	rcall	.-210    	; 0x452 <ReadADCPinValue>
 524:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <gain>
		bass = ReadADCPinValue(0b00001011);			//PB3
 528:	8b e0       	ldi	r24, 0x0B	; 11
 52a:	93 df       	rcall	.-218    	; 0x452 <ReadADCPinValue>
 52c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <bass>
		midRange = ReadADCPinValue(0b00001100);		//PB4
 530:	8c e0       	ldi	r24, 0x0C	; 12
 532:	8f df       	rcall	.-226    	; 0x452 <ReadADCPinValue>
 534:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <midRange>
		treble = 255 - ReadADCPinValue(0b00001101);	//PB5
 538:	8d e0       	ldi	r24, 0x0D	; 13
 53a:	8b df       	rcall	.-234    	; 0x452 <ReadADCPinValue>
 53c:	80 95       	com	r24
 53e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <treble>
		
		//mux PC2 PC3 PC4 PC5
		mux = 0;
 542:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <mux>
		if (PINC & (1 << PINC3)) mux = 1;
 546:	43 9b       	sbis	0x08, 3	; 8
 548:	03 c0       	rjmp	.+6      	; 0x550 <main+0x5e>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <mux>
		if (PINC & (1 << PINC4)) mux = 2;
 550:	44 9b       	sbis	0x08, 4	; 8
 552:	03 c0       	rjmp	.+6      	; 0x55a <main+0x68>
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <mux>
		if (PINC & (1 << PINC5)) mux = 3;
 55a:	45 9b       	sbis	0x08, 5	; 8
 55c:	03 c0       	rjmp	.+6      	; 0x564 <main+0x72>
 55e:	83 e0       	ldi	r24, 0x03	; 3
 560:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <mux>
		
		//TDA update
		setTDAValue(CHIP_ADDRESS, SubAdr_Input_selector, mux);
 564:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <mux>
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	88 e8       	ldi	r24, 0x88	; 136
 56c:	3d df       	rcall	.-390    	; 0x3e8 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Input_gain, ((gain >> 4) & 0b00001111));
 56e:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <gain>
 572:	42 95       	swap	r20
 574:	4f 70       	andi	r20, 0x0F	; 15
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	88 e8       	ldi	r24, 0x88	; 136
 57a:	36 df       	rcall	.-404    	; 0x3e8 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Volume, convert6bits((255 - volume)));
 57c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <volume>
 580:	80 95       	com	r24
 582:	65 d0       	rcall	.+202    	; 0x64e <convert6bits>
 584:	48 2f       	mov	r20, r24
 586:	62 e0       	ldi	r22, 0x02	; 2
 588:	88 e8       	ldi	r24, 0x88	; 136
 58a:	2e df       	rcall	.-420    	; 0x3e8 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Bass_gain,  convert4bits(bass));
 58c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <bass>
 590:	56 d0       	rcall	.+172    	; 0x63e <convert4bits>
 592:	48 2f       	mov	r20, r24
 594:	63 e0       	ldi	r22, 0x03	; 3
 596:	88 e8       	ldi	r24, 0x88	; 136
 598:	27 df       	rcall	.-434    	; 0x3e8 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Mid_range_gain,  convert4bits(midRange));
 59a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <midRange>
 59e:	4f d0       	rcall	.+158    	; 0x63e <convert4bits>
 5a0:	48 2f       	mov	r20, r24
 5a2:	64 e0       	ldi	r22, 0x04	; 4
 5a4:	88 e8       	ldi	r24, 0x88	; 136
 5a6:	20 df       	rcall	.-448    	; 0x3e8 <setTDAValue>
		setTDAValue(CHIP_ADDRESS, SubAdr_Treble_gain,  convert4bits(treble));
 5a8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <treble>
 5ac:	48 d0       	rcall	.+144    	; 0x63e <convert4bits>
 5ae:	48 2f       	mov	r20, r24
 5b0:	65 e0       	ldi	r22, 0x05	; 5
 5b2:	88 e8       	ldi	r24, 0x88	; 136
 5b4:	19 df       	rcall	.-462    	; 0x3e8 <setTDAValue>
			
		//Display update -> parallel
		updateDisplay(volume, mux);
 5b6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <volume>
 5ba:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <mux>
 5be:	d7 dd       	rcall	.-1106   	; 0x16e <updateDisplay>
		
		//write to EEPROM
		EEPROM_write(0x00, volume);
 5c0:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <volume>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	ab de       	rcall	.-682    	; 0x31e <EEPROM_write>
	}
 5c8:	ab cf       	rjmp	.-170    	; 0x520 <main+0x2e>

000005ca <__vector_9>:
	CCP	= 0xD8;		
	CLKPR = 0x00;
}

//-----------------------------------------------------------------------------------------	ISR
ISR(TIMER1_COMPA_vect, ISR_BLOCK){
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
	/*
	0x00	READ
	0x01	IDLE	*/

	// Toggle LED on each interrupt
	PORTA ^= 1 << PORTA1;
 5d8:	92 b1       	in	r25, 0x02	; 2
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	89 27       	eor	r24, r25
 5de:	82 b9       	out	0x02, r24	; 2

	//rotary encoder
	switch (volumeSwitchState)
 5e0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <volumeSwitchState.1840>
 5e4:	88 23       	and	r24, r24
 5e6:	19 f0       	breq	.+6      	; 0x5ee <__vector_9+0x24>
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	f9 f0       	breq	.+62     	; 0x62a <__vector_9+0x60>
 5ec:	21 c0       	rjmp	.+66     	; 0x630 <__vector_9+0x66>
	{
		case 0x00:
		if(PINB & (1<<PINB2)){					// clk = 0?
 5ee:	22 9b       	sbis	0x04, 2	; 4
 5f0:	1f c0       	rjmp	.+62     	; 0x630 <__vector_9+0x66>
			if(PINB & (1<<PINB1)){				// data = 0
 5f2:	21 9b       	sbis	0x04, 1	; 4
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <__vector_9+0x46>
				if(volume >= 5){
 5f6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <volume>
 5fa:	85 30       	cpi	r24, 0x05	; 5
 5fc:	28 f0       	brcs	.+10     	; 0x608 <__vector_9+0x3e>
					volume -= 5;
 5fe:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <volume>
 602:	85 50       	subi	r24, 0x05	; 5
 604:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <volume>
				}
				volumeSwitchState = 0x01;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <volumeSwitchState.1840>
 60e:	10 c0       	rjmp	.+32     	; 0x630 <__vector_9+0x66>
			}
			else{								// data = 1
				if(volume <= 250){
 610:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <volume>
 614:	8b 3f       	cpi	r24, 0xFB	; 251
 616:	28 f4       	brcc	.+10     	; 0x622 <__vector_9+0x58>
					volume += 5;
 618:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <volume>
 61c:	8b 5f       	subi	r24, 0xFB	; 251
 61e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <volume>
				}
				volumeSwitchState = 0x01;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <volumeSwitchState.1840>
 628:	03 c0       	rjmp	.+6      	; 0x630 <__vector_9+0x66>
			}
		}
		break;
		
		case 0x01:
		if(PINB & (1<<PINB2)){					// clk still low?
 62a:	22 9b       	sbis	0x04, 2	; 4
			//stay
		}
		else{
			volumeSwitchState = 0x00;
 62c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <volumeSwitchState.1840>
		}
		break;
	}
	
}
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <convert4bits>:
						0b00001001,
						0b00001000};
						

uint8_t convert4bits(uint8_t input) {
	uint8_t shift = ((input >> 4) & 0b00001111);
 63e:	82 95       	swap	r24
 640:	8f 70       	andi	r24, 0x0F	; 15
	
	return steps[shift] ;
 642:	e8 2f       	mov	r30, r24
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	e6 5e       	subi	r30, 0xE6	; 230
 648:	fe 4f       	sbci	r31, 0xFE	; 254
}
 64a:	80 81       	ld	r24, Z
 64c:	08 95       	ret

0000064e <convert6bits>:

uint8_t convert6bits(uint8_t input) {
	uint8_t shift = ((input >> 2) & 0x3F);
 64e:	86 95       	lsr	r24
 650:	86 95       	lsr	r24
	if(shift > 0b00101000){
 652:	89 32       	cpi	r24, 0x29	; 41
 654:	08 f0       	brcs	.+2      	; 0x658 <convert6bits+0xa>
		shift = 0b00111000;
 656:	88 e3       	ldi	r24, 0x38	; 56
	}
	
	return shift; 
 658:	08 95       	ret

0000065a <__udivmodqi4>:
 65a:	99 1b       	sub	r25, r25
 65c:	79 e0       	ldi	r23, 0x09	; 9
 65e:	04 c0       	rjmp	.+8      	; 0x668 <__udivmodqi4_ep>

00000660 <__udivmodqi4_loop>:
 660:	99 1f       	adc	r25, r25
 662:	96 17       	cp	r25, r22
 664:	08 f0       	brcs	.+2      	; 0x668 <__udivmodqi4_ep>
 666:	96 1b       	sub	r25, r22

00000668 <__udivmodqi4_ep>:
 668:	88 1f       	adc	r24, r24
 66a:	7a 95       	dec	r23
 66c:	c9 f7       	brne	.-14     	; 0x660 <__udivmodqi4_loop>
 66e:	80 95       	com	r24
 670:	08 95       	ret

00000672 <_exit>:
 672:	f8 94       	cli

00000674 <__stop_program>:
 674:	ff cf       	rjmp	.-2      	; 0x674 <__stop_program>
